[{"categories":["problem solving"],"content":"Help her write an assignment qwq","date":"2020-12-02","objectID":"/posts/%E5%B8%AE%E5%81%9A%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%9C%E4%B8%9A/","tags":["C language","homework","assignment help","example"],"title":"Help with College Computer Homework","uri":"/posts/%E5%B8%AE%E5%81%9A%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%9C%E4%B8%9A/"},{"categories":["problem solving"],"content":"Introduction Help with homework qwq… I haven’t played with C language for a long time, let me try to see if I can do it. PS: I’m on Linux, the execution method may be different. If you are on Windows, you need an editor to run it. For example, Dev C++, VS 2019, etc. ","date":"2020-12-02","objectID":"/posts/%E5%B8%AE%E5%81%9A%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%9C%E4%B8%9A/:1:0","tags":["C language","homework","assignment help","example"],"title":"Help with College Computer Homework","uri":"/posts/%E5%B8%AE%E5%81%9A%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%9C%E4%B8%9A/"},{"categories":["problem solving"],"content":"Experiment Eleven Experiment Eleven Objective: Understand C programming concepts Understand C program design framework Contents: Input a grade and output its level rating. This is straightforward. We need to list several grade levels: Excellent 80 ~ 100 points [80,100] Pass 60~79 points [60,79] Fail Below 60 points [0,60) In the code, we can use expressions to represent the intervals, for example: score \u003e= 80 \u0026\u0026 score \u003c= 100 Then we use if() to determine the grade level. #include\u003cstdio.h\u003e int main(){ int score = 85; if(score \u003e= 80 \u0026\u0026 score \u003c= 100){ printf(\"The grade is excellent\"); }else if(score \u003e= 60 \u0026\u0026 score \u003c= 79){ printf(\"The grade is pass\"); }else if(score \u003e= 0 \u0026\u0026 score \u003c 60){ printf(\"The grade is fail\"); } } Next, we run the program. Output: weepingdogel@WeepingDogel /tmp\u003e make test cc test.c -o test weepingdogel@WeepingDogel /tmp\u003e ./test The grade is excellent⏎ Then we need to get the user’s input for the grade, like this, using the scanf() function to get the user’s input and assign it to an integer variable score. #include\u003cstdio.h\u003e int main(){ int score; printf(\"Enter your grade:\"); scanf(\"%d\",\u0026score); printf(\"%d\",score); } Next, we combine these two pieces of code together. The complete code is as follows: #include\u003cstdio.h\u003e int main(){ int score; printf(\"Enter your grade:\"); scanf(\"%d\",\u0026score); if(score \u003e= 80 \u0026\u0026 score \u003c= 100){ printf(\"The grade is excellent\"); }else if(score \u003e= 60 \u0026\u0026 score \u003c= 79){ printf(\"The grade is pass\"); }else if(score \u003e= 0 \u0026\u0026 score \u003c 60){ printf(\"The grade is fail\"); } } The idea is to first use scanf() function to get the user’s input for the grade, then use if() statements to compare and output the result. This is the output: weepingdogel@WeepingDogel /tmp\u003e make test cc test.c -o test weepingdogel@WeepingDogel /tmp\u003e ./test Enter your grade:99 The grade is excellent⏎ weepingdogel@WeepingDogel /tmp\u003e ./test Enter your grade:85 The grade is excellent⏎ weepingdogel@WeepingDogel /tmp\u003e ./test Enter your grade:60 The grade is pass⏎ weepingdogel@WeepingDogel /tmp\u003e ./test Enter your grade:59 The grade is fail⏎ ","date":"2020-12-02","objectID":"/posts/%E5%B8%AE%E5%81%9A%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%9C%E4%B8%9A/:2:0","tags":["C language","homework","assignment help","example"],"title":"Help with College Computer Homework","uri":"/posts/%E5%B8%AE%E5%81%9A%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%9C%E4%B8%9A/"},{"categories":["problem solving"],"content":"Experiment 12 Experiment Purpose: Understand C program design ideas Understand C program design frameworks Task content Requires writing a program that registers and then logs in, outputting the format shown in the following figure: -------------------------------------- Registration Interface Please enter your registration username: Ly Please enter your registration password: 123 Congratulations! Registration successful! -------------------------------------- -------------------------------------- Login Interface Please enter your login username: Ly Please enter your login password: 123 Login successful! -------------------------------------- -------------------------------------- Login Interface Please enter your login username: Ly Please enter your login password: 1234 Login failed! -------------------------------------- Define 4 variables to save the registered username, password and login username, password respectively. Use if…else statement to complete the judgment of the username and password. To put it simply… it uses scanf() to get input, assigns the values to variables, and then performs the judgment… Pft! Alright, here’s the code, no explanation needed… #include\u003cstdio.h\u003e #include\u003cstring.h\u003e int main(){ /* Define 4 variables to save the registered username, password and login username, password respectively */ char username_sign[40]; char password_sign[16]; char username_login[40]; char password_login[16]; /* Define 4 variables to save the registered username, password and login username, password respectively */ printf(\"--------------------------------------\\n Registration Interface\\n\"); printf(\"Please enter your registration username:\"); scanf(\"%s\", username_sign); printf(\"Please enter your registration password:\"); scanf(\"%s\", password_sign); printf(\"Congratulations! Registration successful!\"); printf(\"\\n--------------------------------------\"); /* Use scanf() to get input */ printf(\"\\n\\n--------------------------------------\\n Login Interface\\n\"); printf(\"Please enter your login username:\"); scanf(\"%s\",username_login); printf(\"Please enter your login password:\"); scanf(\"%s\",password_login); /* Use if...else statement to complete the judgment of the username and password */ /* Uses the strcmp() function here */ if(strcmp(username_login,username_sign) == 0 \u0026\u0026 strcmp(password_login,password_sign) == 0){ printf(\"Login successful!\"); }else{ printf(\"Login failed!\"); } printf(\"\\n--------------------------------------\"); } However, it’s worth noting that this string comparison method is slightly different. It requires using the strcmp() function, something like this. if(strcmp(username_login,username_sign) == 0 \u0026\u0026 strcmp(password_login,password_sign) == 0){ printf(\"Login successful!\"); }else{ printf(\"Login failed!\"); } It seems to calculate a numerical value, which equals 0 if the two strings are the same. That’s roughly how it works. Let’s take a look at the output… weepingdogel@WeepingDogel /tmp\u003e make test2 cc test2.c -o test2 weepingdogel@WeepingDogel /tmp\u003e ./test2 -------------------------------------- Registration Interface Please enter your registration username:Ly Please enter your registration password:123 Congratulations! Registration successful! -------------------------------------- -------------------------------------- Login Interface Please enter your login username:Ly Please enter your login password:123 Login successful! --------------------------------------⏎ weepingdogel@WeepingDogel /tmp\u003e ./test2 -------------------------------------- Registration Interface Please enter your registration username:Ly Please enter your registration password:123 Congratulations! Registration successful! -------------------------------------- -------------------------------------- Login Interface Please enter your login username:Ly Please enter your login password:1234 Login failed! --------------------------------------⏎ And that’s it! ","date":"2020-12-02","objectID":"/posts/%E5%B8%AE%E5%81%9A%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%9C%E4%B8%9A/:3:0","tags":["C language","homework","assignment help","example"],"title":"Help with College Computer Homework","uri":"/posts/%E5%B8%AE%E5%81%9A%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%9C%E4%B8%9A/"},{"categories":["problem solving"],"content":"Closing Remarks Actually, there are still some details that I might overlook due to carelessness, so I can’t say “Is that it? Is that all?” But relatively speaking, it’s still quite simple… yeah… ","date":"2020-12-02","objectID":"/posts/%E5%B8%AE%E5%81%9A%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%9C%E4%B8%9A/:4:0","tags":["C language","homework","assignment help","example"],"title":"Help with College Computer Homework","uri":"/posts/%E5%B8%AE%E5%81%9A%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%9C%E4%B8%9A/"},{"categories":["Programming"],"content":"Python study notes on the basics of reading and writing files","date":"2020-09-05","objectID":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/","tags":["Notes","Linux","Python","Programming"],"title":"Python Study Notes - File Operations","uri":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"},{"categories":["Programming"],"content":"File Operations ","date":"2020-09-05","objectID":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/:1:0","tags":["Notes","Linux","Python","Programming"],"title":"Python Study Notes - File Operations","uri":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"},{"categories":["Programming"],"content":"open open() is the key function in Python for file operations, with two parameters that need to be set: Filename - the name of the file, self-explanatory Mode - determines if the file being opened can be read/written to or has other attributes. open('filename','mode') ","date":"2020-09-05","objectID":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/:1:1","tags":["Notes","Linux","Python","Programming"],"title":"Python Study Notes - File Operations","uri":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"},{"categories":["Programming"],"content":"Reading Open a file in read-only mode: f = open(\"filename.txt\") This is equivalent to: f = open(\"filename\",\"rt\") “r” indicates to read “t” indicates that the file is text, this is the default setting for the function, so it can be omitted. Here’s a list from w3schools: There are four different methods (modes) for opening a file: “r” - Read - Default value. Opens a file for reading, error if the file does not exist “a” - Append - Opens a file for appending, creates the file if it does not exist “w” - Write - Opens a file for writing, creates the file if it does not exist “x” - Create - Creates the specified file, returns an error if the file exists In addition you can specify if the file should be handled as binary or text mode “t” - Text - Default value. Text mode “b” - Binary - Binary mode (e.g. images) For example, let’s say we have a file: /home/weepingdogel/test.txt --- Hello!I love Python. We can read the file without specifying the mode parameter: f = open('test.txt') print(f.read()) Output: weepingdogel@WeepingDogel ~\u003e python test.py Hello!I love Python. Or we can specify it: f = open('test.txt', 'rt') print(f.read()) Output: weepingdogel@WeepingDogel ~\u003e python test.py Hello!I love Python. ","date":"2020-09-05","objectID":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/:1:2","tags":["Notes","Linux","Python","Programming"],"title":"Python Study Notes - File Operations","uri":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"},{"categories":["Programming"],"content":"Reading lines File: /home/weepingdogel/test.txt --- Hello!I love Python. Have a nice day! Good luck! When we encounter a multiline file, we can choose to read only one line at a time using f.readline() For example: f = open('test.txt') print(f.readline()) Output: weepingdogel@WeepingDogel ~\u003e python test.py Hello!I love Python. If we need two lines: f = open('test.txt') print(f.readline()) print(f.readline()) Output: weepingdogel@WeepingDogel ~\u003e python test.py Hello!I love Python. Have a nice day! If we need three lines: f = open('test.txt') print(f.readline()) print(f.readline()) print(f.readline()) Output: weepingdogel@WeepingDogel ~\u003e python test.py Hello!I love Python. Have a nice day! Good luck! This usage reads line by line and prints with line breaks. You may need it when reading configuration files… Of course, we can also use a for() loop to read all lines at once: f = open('test.txt') for x in f: print(x) Output: weepingdogel@WeepingDogel ~\u003e python test.py Hello!I love Python. Have a nice day! Good luck! I think using for is more efficient… ","date":"2020-09-05","objectID":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/:1:3","tags":["Notes","Linux","Python","Programming"],"title":"Python Study Notes - File Operations","uri":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"},{"categories":["Programming"],"content":"Closing files Nothing much to say here… f = open('test.txt') print(f.read()) f.close() The effect is similar to the previous example. I won’t provide debugging results below, it’s too late. ","date":"2020-09-05","objectID":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/:1:4","tags":["Notes","Linux","Python","Programming"],"title":"Python Study Notes - File Operations","uri":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"},{"categories":["Programming"],"content":"Creating “x” indicates creating a new file. If the specified filename already exists, an error will be returned. f = open(\"test.txt\",\"x\") Try it out yourself, nothing much else. ","date":"2020-09-05","objectID":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/:1:5","tags":["Notes","Linux","Python","Programming"],"title":"Python Study Notes - File Operations","uri":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"},{"categories":["Programming"],"content":"Writing to a file The character 'a' represents adding content to an existing file without deleting or overwriting its original contents. For example: f = open(\"test.txt\",\"a\") f.write(\"加入内容 / content added.\") The above string will be added to the file. The character 'w' represents overwriting the file, which will replace any existing content. For example: f = open(\"test.txt\", \"w\") f.write(\"加入内容 / content added.\") In this case, only the string specified will exist in the file. ","date":"2020-09-05","objectID":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/:1:6","tags":["Notes","Linux","Python","Programming"],"title":"Python Study Notes - File Operations","uri":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"},{"categories":["Programming"],"content":"Deleting a file You need to use the os module and its os.remove() function. Simply type import os to import it. import os os.remove(\"test.txt\") Classic example Check if a file exists, delete it if it does, or display a message if it doesn’t. Deleting a directory Use os.rmdir(). import os os.rmdir(\"foldername\") ","date":"2020-09-05","objectID":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/:1:7","tags":["Notes","Linux","Python","Programming"],"title":"Python Study Notes - File Operations","uri":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"},{"categories":["Programming"],"content":"Conclusion These are the basics of file read/write operations that you should know. If you’re having trouble understanding, you can try running the following code with different open() mode parameters. Summary code: import os import datetime def sign(): # Program identification print( ''' ╭╮╭╮╭╮╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╭━━━╮╱╱╱╱╱╱╱╱╭╮ ┃┃┃┃┃┃╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╰╮╭╮┃╱╱╱╱╱╱╱╱┃┃ ┃┃┃┃┃┣━━┳━━┳━━┳┳━╮╭━━╮┃┃┃┣━━┳━━┳━━┫┃ ┃╰╯╰╯┃┃━┫┃━┫╭╮┣┫╭╮┫╭╮┃┃┃┃┃╭╮┃╭╮┃┃━┫┃ ╰╮╭╮╭┫┃━┫┃━┫╰╯┃┃┃┃┃╰╯┣╯╰╯┃╰╯┃╰╯┃┃━┫╰╮ ╱╰╯╰╯╰━━┻━━┫╭━┻┻╯╰┻━╮┣━━━┻━━┻━╮┣━━┻━╯ ╱╱╱╱╱╱╱╱╱╱╱┃┃╱╱╱╱╱╭━╯┃╱╱╱╱╱╱╭━╯┃ ╱╱╱╱╱╱╱╱╱╱╱╰╯╱╱╱╱╱╰━━╯╱╱╱╱╱╱╰━━╯ ''' ) def filecrt(filename): # File creation if os.path.exists(filename): # Check if the file exists print(str(datetime.datetime.now()) + \": The file already exists\") return 0 else: f = open(filename,'x') f.close() print(str(datetime.datetime.now()) + \": Created file: \" + filename) return 1 def filewrt(filename): fruits = ['apple', 'banana', 'strawberry','orange'] # Specify the contents to be written # File write operation f = open(filename, 'w') for fruit in fruits: f.write(fruit + '\\n') print(str(datetime.datetime.now()) + \": Writing: \" + fruit) f.close() def filedel(filename): # Delete file operation if os.path.exists(filename): os.remove(filename) print(str(datetime.datetime.now()) + \": Deleted file: \" + filename) else: print(str(datetime.datetime.now()) + \": \" + filename + \" does not exist\") def fileread(filename): print(str(datetime.datetime.now()) + \": Reading...\" ) f = open(filename,'r') print(\"-\" * 5 + \" File contents \" + \"-\" * 5 + \"\\n\") print(f.read()) print(\"-\" * 5 + \" File contents \" + \"-\" * 5 + \"\\n\") sign() if filecrt(\"test.txt\") == 0: fileread(\"test.txt\") filedel(\"test.txt\") else: filewrt(\"test.txt\") fileread(\"test.txt\") filedel(\"test.txt\") ","date":"2020-09-05","objectID":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/:2:0","tags":["Notes","Linux","Python","Programming"],"title":"Python Study Notes - File Operations","uri":"/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"},{"categories":["Problem solving"],"content":"If the input method is disabled after update, look here!!!","date":"2020-07-25","objectID":"/posts/%E5%85%B3%E4%BA%8Efcitx5/","tags":["Arch Linux","input method","fcitx","fcitx5","CVE-2010-4708"],"title":"About fcitx5, and recent environment variable issues","uri":"/posts/%E5%85%B3%E4%BA%8Efcitx5/"},{"categories":["Problem solving"],"content":"What happened I recently received a message like this For those who use $HOME/.pam_environment to set environment variables, take note! Due to CVE-2010-4708, pam upstream is set to not read user’s environment variable settings by default in version 1.4.0, and users are required to change their environment variable settings or restore the original default read behavior. ref: Linux environment variables how to set Evian’s Blog Why is the 10-year vulnerability only now fixed? Emmmm, so that’s what the vulnerability is. Emmmm, so that is .pam_environment this file can not be used …… Here thanks to lilydjwg for writing out the way to deal with various situations I’ll write a note about replacing fcitx5 in xfce + lightdm environment… Other specifics can be found in what lilydjwg wrote… (Escape ","date":"2020-07-25","objectID":"/posts/%E5%85%B3%E4%BA%8Efcitx5/:1:0","tags":["Arch Linux","input method","fcitx","fcitx5","CVE-2010-4708"],"title":"About fcitx5, and recent environment variable issues","uri":"/posts/%E5%85%B3%E4%BA%8Efcitx5/"},{"categories":["Problem solving"],"content":"fcitx5 vs fcitx Fcitx Fcitx (Flexible Input Method Framework) ── i.e. Little Penguin Input Method, which is an input method distributed under GPL wiki/Input_method) platform, which can support multiple input methods by installing the engine, and supports simple input and output, it is a common Chinese input method in Linux OS. It has the advantage of being short and compact, and has good compatibility with programs. — Arch Wiki Fcitx5 Fcitx5 is the next generation input method framework after Fcitx. — Arch Wiki Daily lazy, direct quotes (flee ","date":"2020-07-25","objectID":"/posts/%E5%85%B3%E4%BA%8Efcitx5/:2:0","tags":["Arch Linux","input method","fcitx","fcitx5","CVE-2010-4708"],"title":"About fcitx5, and recent environment variable issues","uri":"/posts/%E5%85%B3%E4%BA%8Efcitx5/"},{"categories":["Problem solving"],"content":"Okay, let’s get right to it first post my system situation Operating system: Arch Linux Desktop environment: xfce Display Manager: lightdm Actually, just writing the input method environment variables from .pam_environment to .xprofile will solve the problem, but I’d like to try fcitx5. ","date":"2020-07-25","objectID":"/posts/%E5%85%B3%E4%BA%8Efcitx5/:3:0","tags":["Arch Linux","input method","fcitx","fcitx5","CVE-2010-4708"],"title":"About fcitx5, and recent environment variable issues","uri":"/posts/%E5%85%B3%E4%BA%8Efcitx5/"},{"categories":["Problem solving"],"content":"Uninstall the old version fcitx First of all, we need to uninstall the original fcitx, I was using fcitx-googlepinyin input method before, so I need to uninstall this package too, because there will be dependency. Besides, all the packages that have some relationship with fcitx should be uninstalled, otherwise pacman will report error, so you have to execute this (PS: you may not use Google input method, so please change fcitx-googlepinyin to the package name of the input method you installed) sudo pacman -Rs fcitx-configtool fcitx-googlepinyin fcitx-qt5 fcitx Next, delete this file, it’s useless anyway (escape $ sudo rm -rf . /.pam_environment ","date":"2020-07-25","objectID":"/posts/%E5%85%B3%E4%BA%8Efcitx5/:3:1","tags":["Arch Linux","input method","fcitx","fcitx5","CVE-2010-4708"],"title":"About fcitx5, and recent environment variable issues","uri":"/posts/%E5%85%B3%E4%BA%8Efcitx5/"},{"categories":["Problem solving"],"content":"Installing fcitx5 Now to install fcitx5, this is how to do it fcitx5 The main package, no need to explain fcitx5-chinese-addons Chinese input method package …. Arch Wiki explains it like this. fcitx5-chinese-addons contains a lot of Chinese input methods: Pinyin, ShuangPin, WubiPinyin, Natural Code, CangJie, BingToad Holographic, ErBi, etc. fcitx5-im Environment dependency package, you have to install it, otherwise you can’t type on some software fcitx5-configtool fcitx5’s GUI configuration tool, because I don’t know how to modify the configuration file, so I installed this. Install it after the three above. Then, execute $ sudo pacman -S fcitx5 fcitx5-chinese-addons fcitx5-im fcitx5-configtool After the package is installed, it will theoretically boot up, but well, there can be some metaphysical problems, so do this manually first $ sudo cp /usr/share/applications/fcitx5.desktop ~/.config/autostart/ -v ","date":"2020-07-25","objectID":"/posts/%E5%85%B3%E4%BA%8Efcitx5/:3:2","tags":["Arch Linux","input method","fcitx","fcitx5","CVE-2010-4708"],"title":"About fcitx5, and recent environment variable issues","uri":"/posts/%E5%85%B3%E4%BA%8Efcitx5/"},{"categories":["Problem solving"],"content":"Environment variables Well, finally it’s set environment variable, since .pam_environment can’t be used, where to write it? lilydjwg said: Using X11 desktop environment, usually login through display manager, such as lightdm and sddm. Both of them support ~/.xprofile. This file will be sourced during boot, using a shell determined by dm itself. Both lightdm and sddm use /bin/sh (in the files /etc/lightdm/Xsession and /usr/share/sddm/scripts/Xsession respectively). As you can see, in addition to reading .xprofile, lightdm also reads .profile. sddm even reads the startup configuration scripts for bash, zsh, tcsh, and fish. That is, we need to write the fcitx5 environment variables in the .xprofile file Then… $ vim . /.xprofile Write these things in it export INPUT_METHOD=fcitx5 export GTK_IM_MODULE=fcitx5 export QT_IM_MODULE=fcitx5 export XMODIFIERS=@im=fcitx5 Next you can choose to restart lightdm, $ sudo systemctl restart lightdm Or reboot the system. $ sudo reboot At this time, a keyboard appears in the status bar of xfce, but pressing CTRL + SPACE but it does not bring up the Chinese input method, so what should we do? Right-click the keyboard icon, click Configure, and then go to the QT configuration tool to add Chinese input methods on it! Just double click to add to the left ~ Then click OK and start enjoying fcitx5! ","date":"2020-07-25","objectID":"/posts/%E5%85%B3%E4%BA%8Efcitx5/:3:3","tags":["Arch Linux","input method","fcitx","fcitx5","CVE-2010-4708"],"title":"About fcitx5, and recent environment variable issues","uri":"/posts/%E5%85%B3%E4%BA%8Efcitx5/"},{"categories":["Problem solving"],"content":"Reference links How to set environment variables for Linux - Evian’s Blog Fcitx5 (Simplified Chinese) - ArchWiki Fcitx - Wikipedia Fcitx (Simplified Chinese) - ArchWiki Translated with www.DeepL.com/Translator (free version) ","date":"2020-07-25","objectID":"/posts/%E5%85%B3%E4%BA%8Efcitx5/:4:0","tags":["Arch Linux","input method","fcitx","fcitx5","CVE-2010-4708"],"title":"About fcitx5, and recent environment variable issues","uri":"/posts/%E5%85%B3%E4%BA%8Efcitx5/"},{"categories":"about","content":"Once lost thing will never be able to come back.","date":"0001-01-01","objectID":"/about/","tags":["about"],"title":"About","uri":"/about/"},{"categories":"about","content":" Introduction Hello, I’m WeepingDogel, a college student. I’m Young, Male, Arch User, Python beginner Copyright Statement Unless otherwise noted, all articles on this website are original. This website follows the CC-BY-NC 4.0 license Please indicate the link when reprinting. Some articles use screenshots as covers, most article cover images are from wallhaven.cc. Comment You can leave a comment using the comment plugin below. Contact Links lilydjwg’s Blog 李皓奇 | liolok.com crzy233.github.io mushin2k’s blog Piggy’s Blog 欠陥電気の摸鱼小池 111的 Blog 首页-zhyjc6’s Blog Home | website_project ⑨BIE Garden in the Wonderland 欧式的Blog Dec KiraPGR’s Blog Lynnrin’s Blog poly000客栈 ","date":"0001-01-01","objectID":"/about/:0:0","tags":["about"],"title":"About","uri":"/about/"}]