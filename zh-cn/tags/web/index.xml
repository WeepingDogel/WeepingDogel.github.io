<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Web - 标签 - WeepingDogel 的博客</title>
        <link>http://weepingdogel.github.io/zh-cn/tags/web/</link>
        <description>Web - 标签 - WeepingDogel 的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>weepingdogel@gmail.com (WeepingDogel)</managingEditor>
            <webMaster>weepingdogel@gmail.com (WeepingDogel)</webMaster><lastBuildDate>Sat, 22 Jul 2023 15:46:49 &#43;0800</lastBuildDate><atom:link href="http://weepingdogel.github.io/zh-cn/tags/web/" rel="self" type="application/rss+xml" /><item>
    <title>如何在Vue 3.2中从父组件传递一个值给子组件？</title>
    <link>http://weepingdogel.github.io/zh-cn/posts/how_to_transfer_a_value_from_the_parent_component_to_the_child_component_in_vue_3.2/</link>
    <pubDate>Sat, 22 Jul 2023 15:46:49 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://weepingdogel.github.io/zh-cn/posts/how_to_transfer_a_value_from_the_parent_component_to_the_child_component_in_vue_3.2/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/img/background_preview_2023_07_22.png" referrerpolicy="no-referrer">
            </div><h2 id="介绍">介绍</h2>
<p>Vue 是一种流行的 JavaScript 框架，用于构建交互式的网页界面。它易于学习、多功能，并拥有一个支持性强的社区。</p>
<p>使用 Vue 开发单页面应用非常方便。</p>
<p>然而，在父组件和子组件之间传递值的场景中，有时候可能会遇到一些挑战。</p>
<p>还不清楚？想象一下这种情景：你创建了一个按钮，希望它可以控制一个 <code>&lt;p&gt;&lt;/p&gt;</code> 元素的内容，以满足特定的开发需求。</p>
<p>这时，就该将不同的值传递给 <code>ChildComponent</code>，来改变属性或触发事件了。</p>
<h2 id="从父组件传递值给子组件的方法">从父组件传递值给子组件的方法</h2>
<h3 id="步骤-1创建父组件">步骤 1：创建父组件</h3>
<ol>
<li>为父组件创建一个新的 Vue 组件文件（例如 <code>ParentComponent.vue</code>）。</li>
<li>在组件的模板中，定义父组件的内容并包含子组件。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;FatherBox&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">ChildComponent</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>通过添加必要的导入语句导入子组件。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;ts&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">ChildComponent</span> <span class="nx">from</span> <span class="s1">&#39;./ChildComponent.vue&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="4">
<li>在父组件的 components 属性中注册子组件。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;ts&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ChildComponent</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="步骤-2在父组件中定义数据">步骤 2：在父组件中定义数据。</h3>
<ol>
<li>在父组件的脚本部分中，定义一个数据属性来存储将传递给子组件的值。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;ts&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>给数据属性赋初始值。这将是最初传递给子组件的值。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;ts&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Hello from the parent component!&#39;</span><span class="p">,</span> <span class="c1">// Value to pass to child component
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="步骤3将数据作为属性传递给子组件">步骤3：将数据作为属性传递给子组件</h3>
<ol>
<li>在父组件的模板中，添加子组件并使用冒号（:）绑定将数据属性作为 prop 传递给子组件。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;FatherBox&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">ChildComponent</span> <span class="nt">:message</span><span class="s">=&#34;message&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>在子组件中，prop 的名称应与在父组件中传递 prop 时选择的名称相匹配。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;ts&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">ChildComponent</span> <span class="nx">from</span> <span class="s1">&#39;./ChildComponent.vue&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">ChildComponent</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Hello from the parent component!&#39;</span><span class="p">,</span> <span class="c1">// Value to pass to child component
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">changeMessage</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="s1">&#39;New message from parent!&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="步骤4创建子组件">步骤4：创建子组件</h3>
<ol>
<li>
<p>为子组件创建一个新的 Vue 组件文件（例如，<code>ChildComponent.vue</code>）。</p>
</li>
<li>
<p>在子组件的模板中，定义子组件的内容。这将包括呈现从组件传递的 prop 值。</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;{{</span> <span class="nx">message</span> <span class="p">}}&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="步骤5在子组件中定义-prop">步骤5：在子组件中定义 prop。</h3>
<ol>
<li>在子组件的脚本部分中，定义用于接收父组件发送的数据的 prop。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;ts&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">props</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">message</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>为了确保数据的完整性，可以指定 prop 的类型（例如 <code>String</code>、<code>Number</code> 等）。如果必须传递该 prop，则还可以设置 <code>required: true</code>。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="nx">message</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="第六步从子组件发出事件">第六步：从子组件发出事件</h3>
<ol>
<li>在子组件的脚本中，定义一个方法来发出事件，与父组件进行通信。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">changeMessage</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">newMessage</span> <span class="o">=</span> <span class="s1">&#39;New message from child!&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>在该方法内部，使用 <code>this.emit('事件名称',数据)</code>来发出事件。选择一个合适的事件名称，并将任何相关数据递给父组件。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">changeMessage</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">newMessage</span> <span class="o">=</span> <span class="s1">&#39;New message from child!&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;update-message&#39;</span><span class="p">,</span> <span class="nx">newMessage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="第七步在父组件中处理事件">第七步：在父组件中处理事件</h3>
<ol>
<li>在父组件的脚本中，定义一个方法来处理子组件发出的事件。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="nx">updateMessage</span><span class="p">(</span><span class="nx">newMessage</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>在父组件的模板中，通过使用 <code>@event-name=&quot;methodName&quot;</code> 为子组件实例添加事件监听器。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">ChildComponent</span> <span class="nt">:message</span><span class="s">=&#34;message&#34;</span> <span class="nt">@update-message</span><span class="s">=&#34;updateMessage&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>在该方法中，将发出的数据作为参数接收，并相应地更新父件的数据。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="nx">updateMessage</span><span class="p">(</span><span class="nx">newMessage</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="nx">newMessage</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="完整代码">完整代码</h3>
<p>父组件:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;FatherBox&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">ChildComponent</span> <span class="nt">:message</span><span class="s">=&#34;message&#34;</span> <span class="nt">@update-message</span><span class="s">=&#34;updateMessage&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">button</span> <span class="nt">@click</span><span class="s">=&#34;changeMessage&#34;</span><span class="p">&gt;</span><span class="na">Change</span> <span class="na">Message</span> <span class="na">By</span> <span class="na">ParentComponent</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;ts&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">ChildComponent</span> <span class="nx">from</span> <span class="s1">&#39;./ChildComponent.vue&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">ChildComponent</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Hello from the parent component!&#39;</span><span class="p">,</span> <span class="c1">// Value to pass to child component
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">updateMessage</span><span class="p">(</span><span class="nx">newMessage</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="nx">newMessage</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">changeMessage</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="s1">&#39;New message from parent!&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nx">FatherBox</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">background</span><span class="o">-</span><span class="nx">color</span><span class="o">:</span> <span class="err">#</span><span class="nx">f1f1f1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">border</span><span class="o">-</span><span class="nx">radius</span><span class="o">:</span> <span class="mi">20</span><span class="nx">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">box</span><span class="o">-</span><span class="nx">shadow</span><span class="o">:</span> <span class="mi">0</span> <span class="mi">5</span><span class="nx">px</span> <span class="mi">5</span><span class="nx">px</span> <span class="nx">rgba</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">padding</span><span class="o">:</span> <span class="mi">20</span><span class="nx">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>子组件:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;{{</span> <span class="nx">message</span> <span class="p">}}&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">button</span> <span class="nt">@click</span><span class="s">=&#34;changeMessage&#34;</span><span class="p">&gt;</span><span class="na">Change</span> <span class="na">Message</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;ts&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">props</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">message</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">changeMessage</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kr">const</span> <span class="nx">newMessage</span> <span class="o">=</span> <span class="s1">&#39;New message from child!&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;update-message&#39;</span><span class="p">,</span> <span class="nx">newMessage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="测试">测试</h2>
<p>然后我们可以执行 <code>yarn dev</code> 来启动开发服务器，然后我们就可以看到一个类似这样的页面：</p>
<p></p>
<p>现在让我们尝试点击第一个按钮！</p>
<p></p>
<p>显然！文本的内容发生了变化！</p>
<p>那么让我们点击第二个按钮吧！</p>
<p></p>
<p>它变成了&quot;New message from parent!&quot;</p>
<p>是不是很神奇呢？</p>
<h2 id="结语">结语</h2>
<p>没错！通过按照这些步骤，在Vue.js中可以成功地通过props和事件将值从父组件传给子组件。不要忘记保存文件，根据需要导组件，并适当注册组件。</p>
]]></description>
</item><item>
    <title>浅尝 Docker</title>
    <link>http://weepingdogel.github.io/zh-cn/posts/%E6%B5%85%E5%B0%9Ddocker/</link>
    <pubDate>Sat, 15 Oct 2022 20:21:13 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://weepingdogel.github.io/zh-cn/posts/%E6%B5%85%E5%B0%9Ddocker/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://w.wallhaven.cc/full/d5/wallhaven-d5we7o.png" referrerpolicy="no-referrer">
            </div><h1 id="序">序</h1>
<p>嗯，未雨绸缪，提前学一下怎么玩 docker 。</p>
<p><del>卷死他们</del></p>
<h1 id="docker-是什么">docker 是什么？</h1>
<p><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>官方英文简介<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker’s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production.</div>
        </div>
    </div>
根据官方文档的说明和通俗的理解， docker 能够提供快速部署软件项目的容器，它相当于一个可以模拟项目所需环境的虚拟机，但又和我们理解的一般的虚拟机又不同。</p>
<p>一般的虚拟机需要安装整个操作系统，会对我们的计算机占用大量的资源，而 docker 只需要模拟出项目所需要的运行环境，占用率非常低，这可以大大提高开发效率。</p>
<p>它可以按照我们的需求模拟出软件环境，并且能够快速部署我们开发好的项目实例（比如 Mastodon），并且一定程度上它具有环境隔离功能，运行环境与操作系统相分离，而且可以同时运行多个容器。</p>
<p>并且我们可以把容器封装成镜像，进行反复利用。</p>
<p>就像这条运着集装箱的鲸鱼一样，游到哪都是开箱即用。</p>
<p></p>
<h1 id="怎么安装-docker">怎么安装 docker</h1>
<p>各个平台装 docker 都非常简单。</p>
<p>Linux 平台可能对初学者稍微难一些，但是对熟悉的用户来说， Linux 安装 docker 非常快。</p>
<p>直接从相应发行版的包管理器安装就行。</p>
<h2 id="arch">Arch</h2>
<p>比如咱 Arch 可以让 pacman 把这条鲸鱼给带回来。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo pacman -S docker
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>如果运行时出现以下报错</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">docker</span><span class="p">:</span> <span class="n">Cannot</span> <span class="n">connect</span> <span class="n">to</span> <span class="n">the</span> <span class="n">Docker</span> <span class="n">daemon</span> <span class="n">at</span> <span class="n">unix</span><span class="p">:</span><span class="o">///</span><span class="k">var</span><span class="o">/</span><span class="n">run</span><span class="o">/</span><span class="n">docker</span><span class="o">.</span><span class="n">sock</span><span class="o">.</span> <span class="n">Is</span> <span class="n">the</span> <span class="n">docker</span> <span class="n">daemon</span> <span class="n">running</span><span class="err">?</span><span class="o">.</span>
</span></span><span class="line"><span class="cl"><span class="n">See</span> <span class="s1">&#39;docker run --help&#39;</span><span class="o">.</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>请使用 <code>systemctl</code> 启动 <code>docker</code> 的系统进程。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo systemctl start docker
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果有必要，设置其开机自启</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo systemctl enable docker
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h2 id="debian">Debian</h2>
<p>如果是用 deb 系的发行版，可以参考<a href="https://docs.docker.com/engine/install/debian/#install-docker-engine" target="_blank" rel="noopener noreffer">官方文档</a>用 apt 来安装。</p>
<h3 id="设置仓库">设置仓库</h3>
<ol>
<li>更新 apt 仓库，并安装一些依赖来允许 apt 通过 https 使用第三方仓库。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo apt update
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo apt install ca-certificates curl gnupg lsb-release
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>添加 Docker 官方 GPG 密钥</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo mkdir -p /etc/apt/keyrings
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">curl</span> <span class="o">-</span><span class="n">fsSL</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">download</span><span class="o">.</span><span class="n">docker</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">linux</span><span class="o">/</span><span class="n">debian</span><span class="o">/</span><span class="n">gpg</span> <span class="o">|</span> <span class="n">sudo</span> <span class="n">gpg</span> <span class="o">--</span><span class="n">dearmor</span> <span class="o">-</span><span class="n">o</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">apt</span><span class="o">/</span><span class="n">keyrings</span><span class="o">/</span><span class="n">docker</span><span class="o">.</span><span class="n">gpg</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>设置 Docker 仓库</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="s2">&#34;deb [arch=</span><span class="k">$(</span>dpkg --print-architecture<span class="k">)</span><span class="s2"> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
</span></span></span><span class="line"><span class="cl"><span class="s2">  </span><span class="k">$(</span>lsb_release -cs<span class="k">)</span><span class="s2"> stable&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装-docker">安装 docker</h3>
<ol>
<li>更新软件包仓库</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo apt update
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果更新的时候发生了 GPG 错误，可以参考官网的<a href="https://docs.docker.com/engine/install/debian/#install-docker-engine" target="_blank" rel="noopener noreffer">这个提示</a>：</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Receiving a GPG error when running apt-get update?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Your default <a href="https://en.wikipedia.org/wiki/Umask" target="_blank" rel="noopener noreffer">umask</a> may be incorrectly configured, preventing detection of the repository public key file. Try granting read permission for the Docker public key file before updating the package index:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> $ sudo chmod a+r /etc/apt/keyrings/docker.gpg
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> $ sudo apt-get update
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<ol start="2">
<li>安装 Docker Engine 、 containerd 和 Docker Compose.</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>通过运行 hello-world 镜像来验证 docker 是否安装成功</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker run hello-world
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="rpm-系列">rpm 系列</h2>
<p>其实说实话，这类发行版我个人不太喜欢，就拿 CentOS 为例吧，CentOS 7 以上的版本也是可以直接用 yum 安装的。</p>
<h3 id="设置仓库-1">设置仓库</h3>
<p>一样是设置第三方仓库。</p>
<p>不过要先安装 <code>yum-utils</code> 才能用 <code>yum-config-manager</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo yum install -y yum-utils
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后设置仓库</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">sudo</span> <span class="n">yum</span><span class="o">-</span><span class="n">config</span><span class="o">-</span><span class="n">manager</span> \
</span></span><span class="line"><span class="cl">    <span class="o">--</span><span class="n">add</span><span class="o">-</span><span class="n">repo</span> \
</span></span><span class="line"><span class="cl">    <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">download</span><span class="o">.</span><span class="n">docker</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">linux</span><span class="o">/</span><span class="n">centos</span><span class="o">/</span><span class="n">docker</span><span class="o">-</span><span class="n">ce</span><span class="o">.</span><span class="n">repo</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装">安装</h3>
<p>一样是使用 yum 命令来安装 docker 的软件包和依赖。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="对于-linux-平台再提一嘴">对于 Linux 平台再提一嘴</h2>
<p>上述的方法都是在 Linux 平台安装 docker 的最新版本，如果需要安装特定的版本，可以<a href="https://docs.docker.com/engine/" target="_blank" rel="noopener noreffer">参考 docker 的官方文档</a>进行操作。</p>
<h2 id="windows">Windows</h2>
<p>在 Windows 平台可以直接安装 docker-desktop，这也非常简单，直接通过 <a href="https://docs.docker.com/desktop/install/windows-install/" target="_blank" rel="noopener noreffer">docker 官方文档</a><a href="https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe" target="_blank" rel="noopener noreffer">下载</a>安装包就行了。</p>
<h1 id="我能怎么玩-docker">我能怎么玩 docker？</h1>
<p>docker 能干的事多着呢。</p>
<p>最常用的就是在 docker 容器里运行应用程序了。</p>
<h2 id="helloworld">HelloWorld</h2>
<p>比如我们来运行一个 Hello World</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker run ubuntu /bin/echo &#34;hello world&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><p>如图所见，它输出一系列字符后，在最后输出了 hello world</p>
<p></p>
<p>那么来解释一下命令的含义吧</p>
<ul>
<li><code>docker</code> &ndash; 运行 docker 的二进制文件, 这个没什么好说的</li>
<li><code>run</code> &ndash; 运行容器</li>
<li><code>ubuntu</code> &ndash; 要运行的镜像名称</li>
<li><code>/bin/echo &quot;hello world&quot;</code> - 在容器里面要执行的命令</li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>提示<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>如果出现了以下信息，可能是因为在启动容器的时候没有下载好相关的镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Unable to find image &#39;ubuntu:latest&#39; locally
</span></span><span class="line"><span class="cl">latest: Pulling from library/ubuntu
</span></span><span class="line"><span class="cl">e96e057aae67: Pull complete 
</span></span></code></pre></td></tr></table>
</div>
</div><p>默认情况下 docker 会自动下载，但最好养成启动之前下载好镜像的习惯。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker pull ubuntu
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h2 id="交互式容器">交互式容器</h2>
<p>当然,我们也可以创建一个可以交互的容器,意思就是可以用 bash 来控制它</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker run -i -t ubuntu /bin/bash
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>参数含义<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li><code>-i</code>: 交互式操作。</li>
<li><code>-t</code>: 终端。</li>
</ul>
<p><a href="https://www.runoob.com/docker/docker-image-usage.html" target="_blank" rel="noopener noreffer">引自菜鸟教程</a></div>
        </div>
    </div>
<p>这样我们创建容器之后,我们的 shell 也变成了容器里的 shell</p>
<p></p>
<p>我们可以对它进行一些操作命令,随便打几个吧.</p>
<p></p>
<p>而且我们执行的命令是不会影响到主系统的</p>
<p>然后我们可以使用 <code>exit</code> 命令来退出这个系统.</p>
<p></p>
<p>这样一来容器的操作系统就退出了,同时容器也停止运行了, 因为这个容器不是以 daemon 模式来运行的.</p>
<h2 id="以-daemon-模式来运行容器">以 daemon 模式来运行容器</h2>
<p>接下来我要说的是,为啥上文中用 <code>exit</code> 退出容器 shell 之后还不算完.</p>
<p>这次我们再打开一个容器,不过这次加一个参数 <code>-d</code></p>
<p>这个参数的意思是以 Daemon 模式运行, 那么 Daemon 是什么意思呢?</p>
<p>通过搜索引擎得到的答案往往是什么 系统守护进程巴拉巴拉的,其实它类似于后台运行的意思.</p>
<p>接下来我们用这个命令来开个容器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker run -i -t -d ubuntu /bin/bash
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>这时我们发现,我们并没有得一个 shell, 而是得到来一串字符串.</p>
<p>我们试试用 docker 的 ps 命令来查看一下正在运行的容器:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker ps
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们得到来这样的结果</p>
<p></p>
<p>图片可能不太清楚? 这里还是贴出来吧</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[weepingdogel@WeepingDogel-Arch ~]$ sudo docker ps
</span></span><span class="line"><span class="cl">CONTAINER ID   IMAGE     COMMAND       CREATED              STATUS              PORTS     NAMES
</span></span><span class="line"><span class="cl">2f4976200305   ubuntu    &#34;/bin/bash&#34;   About a minute ago   Up About a minute             funny_pare
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后发现了返回的结果中容器 ID 只有上面返回字符串的前面一部分,这个往往是我们会用的容器 ID</p>
<p>要怎样才能控制它的 shell 呢?</p>
<p>又要接触新的 docker 命令了</p>
<ul>
<li>attach</li>
<li>exec</li>
</ul>
<p>exec 需要加上 <code>-i</code> 和 <code>-t</code> 参数以及命令,比如 <code>/bin/bash</code> .</p>
<p>所以执行格式是这样的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker exec -it 容器ID 命令
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们需要执行 bash</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker exec -it 2f4976200305 /bin/bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>很快,我们就进入了容器的 shell.</p>
<p></p>
<p>我们可以用 <code>cat /etc/os-release</code> 来查看系统信息.</p>
<p></p>
<p>我们可以很清晰的看到,上面返回的是 Ubuntu 而我用的是 Arch, 因此我们可以确定容器里的东西不会影响到操作系统.</p>
<p>什么?不清晰?那再看清楚一点吧</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">PRETTY_NAME=&#34;Ubuntu 22.04.1 LTS&#34;
</span></span><span class="line"><span class="cl">NAME=&#34;Ubuntu&#34;
</span></span><span class="line"><span class="cl">VERSION_ID=&#34;22.04&#34;
</span></span><span class="line"><span class="cl">VERSION=&#34;22.04.1 LTS (Jammy Jellyfish)&#34;
</span></span><span class="line"><span class="cl">VERSION_CODENAME=jammy
</span></span><span class="line"><span class="cl">ID=ubuntu
</span></span><span class="line"><span class="cl">ID_LIKE=debian
</span></span><span class="line"><span class="cl">HOME_URL=&#34;https://www.ubuntu.com/&#34;
</span></span><span class="line"><span class="cl">SUPPORT_URL=&#34;https://help.ubuntu.com/&#34;
</span></span><span class="line"><span class="cl">BUG_REPORT_URL=&#34;https://bugs.launchpad.net/ubuntu/&#34;
</span></span><span class="line"><span class="cl">PRIVACY_POLICY_URL=&#34;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&#34;
</span></span><span class="line"><span class="cl">UBUNTU_CODENAME=jammy
</span></span></code></pre></td></tr></table>
</div>
</div><p>退出还是一样的可以用 <code>exit</code> , 但是此时的 exit 只是退出这个 bash, 它并不会关闭容器.</p>
<p>执行 <code>docker ps</code> 我们可以看到它还在运行.</p>
<p></p>
<p>那么我们接下来试试 attach</p>
<p>它的用法是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker attach 容器ID
</span></span></code></pre></td></tr></table>
</div>
</div><p>所以我需要执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker attach 2f4976200305
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>这样一来我们也可以得到一个shell,但是如果我们执行了 <code>exit</code>, 这个容器是会被停止的.</p>
<p>来试试看?</p>
<p>很明显,当 <code>exit</code> 被执行之后用 <code>docker ps</code> 命令看不到正在运行的容器ID,这说明容器被停止了.</p>
<p></p>
<p>如果需要再次启动这个容器呢,我们可以使用 start 或者 restart 命令来重启.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker restart 2f4976200305
</span></span></code></pre></td></tr></table>
</div>
</div><p>此时我们用 <code>docker ps</code> 就又能看到它在运行了</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>提示<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>使用 <code>docker ps -a</code>命令可以查看所有的容器,无论是否正在运行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker ps -a
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
</div>
        </div>
    </div>
<h2 id="删除容器">删除容器</h2>
<p>如果这些容器不需要了怎么办,</p>
<p><del>比如玩坏了,要把它删掉</del></p>
<p>那就要用 <code>docker rm</code> 命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker rm 容器ID
</span></span></code></pre></td></tr></table>
</div>
</div><p>后面接上容器 ID 就能删除, 可以删除多个</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker rm 6c8c8d9f5540 6c49bc1fdc49 eb71e810ee50 5a84d067d769 2addaf3666ef
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后在用 <code>docker ps -a</code> 来查看, 就看不到任何容器 ID 了</p>
<p></p>
<h2 id="镜像">镜像</h2>
<p>docker 容器运行的前提条件是它需要相应的镜像.</p>
<p>可以用 <code>docker images</code> 来查看本地已经有的镜像, 如果需要的别的镜像可以用 <code>docker pull</code> 来获取</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker images
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>我们来获取 php 的镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker pull php
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>等待他们自动下载完成,镜像就可以用了.</p>
<p>如果你运行容器的时候没有事先拉取镜像的话, docker 则会在运行容器的时候临时进行拉取.</p>
<p>下载进程完成之后, 我们查看一下现有的镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker images
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
</span></span><span class="line"><span class="cl">ubuntu       latest    a8780b506fa4   7 days ago    77.8MB
</span></span><span class="line"><span class="cl">php          latest    30e567f030d3   12 days ago   484MB
</span></span><span class="line"><span class="cl">httpd        latest    fe8735c23ec5   2 weeks ago   145MB
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>各个选项说明:<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>
<p>REPOSITORY：表示镜像的仓库源</p>
</li>
<li>
<p>TAG：镜像的标签</p>
</li>
<li>
<p>IMAGE ID：镜像ID</p>
</li>
<li>
<p>CREATED：镜像创建时间</p>
</li>
<li>
<p>SIZE：镜像大小</p>
</li>
</ul>
<p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 <code>15.10</code>、<code>14.04</code> 等多个不同的版本，我们使用 <code>REPOSITORY:TAG</code> 来定义不同的镜像。</p>
<p><a href="https://www.runoob.com/docker/docker-image-usage.html" target="_blank" rel="noopener noreffer">引自菜鸟教程</a></p>
</div>
        </div>
    </div>
<h2 id="删除镜像">删除镜像</h2>
<p>当然, 不需要的镜像也是可以删除的.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker rmi 镜像ID
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>如图,这样就把不需要的镜像删除了</p>
<h2 id="dockerfile">dockerfile</h2>
<p>啥是 dockerfile? Dockerfile 是用来构建镜像文件的文本文件, 文件里面包含的是一条条指令和说明, 和一些 shell 脚本类似(比如 PKGBUILD )</p>
<p>而一个简单的 Dockerfile 是长这样的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> nginx</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> <span class="nb">echo</span> <span class="s1">&#39;Hello World!&#39;</span> &gt; /usr/share/nginx/html/index.html<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>来自菜鸟教程的提示<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li><code>FROM</code> 定制的镜像都是基于 FROM 的镜像, 这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</li>
<li><code>RUN</code> 用于执行后面跟着的命令行命令。有以下俩种格式：</li>
</ul>
<p>shell 格式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">RUN</span> &lt;命令行命令&gt;<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>exec 格式:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">RUN</span> <span class="o">[</span><span class="s2">&#34;可执行文件&#34;</span>, <span class="s2">&#34;参数1&#34;</span>, <span class="s2">&#34;参数2&#34;</span><span class="o">]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 例如：</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># RUN [&#34;./test.php&#34;, &#34;dev&#34;, &#34;offline&#34;] 等价于 RUN ./test.php dev offline</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<p>熟悉 Linux 操作的话, 上手这玩意也就很简单了, 但是值得注意的是菜鸟教程当中说的这一段:</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> centos</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> yum -y install wget<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> wget -O redis.tar.gz <span class="s2">&#34;http://download.redis.io/releases/redis-5.0.3.tar.gz&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> tar -xvf redis.tar.gz<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>以上执行会创建 3 层镜像。可简化为以下格式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> centos</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> yum -y install wget <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> wget -O redis.tar.gz <span class="s2">&#34;http://download.redis.io/releases/redis-5.0.3.tar.gz&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> tar -xvf redis.tar.gz<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<p>也就是说我们要尽量在 RUN 当中写命令脚本的时候尽量写并列语句.</p>
<h2 id="一个简单的-web-服务器">一个简单的 Web 服务器.</h2>
<p>现在我想试试用 docker 来跑一个简单的网页了.</p>
<p>就跑一下我之前闲着没事干写的<a href="/simpleLogin/index.html" rel="">登录页面</a>吧.</p>
<p>首先我们要创建一个目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mkdir webtest
</span></span></code></pre></td></tr></table>
</div>
</div><p>先把前端的静态文件复制进去</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cp test/* webtest/ -rv
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后进入该目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cd webtest
</span></span></code></pre></td></tr></table>
</div>
</div><p>检查一下文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ls -lh
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">总计 4.0K
</span></span><span class="line"><span class="cl">drwxr-xr-x 2 weepingdogel weepingdogel   23 11月10日 21:30 css
</span></span><span class="line"><span class="cl">drwxr-xr-x 2 weepingdogel weepingdogel    6 11月10日 21:30 img
</span></span><span class="line"><span class="cl">-rw-r--r-- 1 weepingdogel weepingdogel 1.4K 11月10日 21:30 index.html
</span></span><span class="line"><span class="cl">drwxr-xr-x 2 weepingdogel weepingdogel   21 11月10日 21:30 js
</span></span></code></pre></td></tr></table>
</div>
</div><p>ok ,现在我们来写一个 dockerfile</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> nginx</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> ./index.html /usr/share/nginx/html/index.html<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> ./css/style.css /usr/share/nginx/html/css/style.css<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> ./js/main.js /usr/share/nginx/html/js/main.js<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>指令详解<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>COPY</li>
</ul>
<p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p>
<p>格式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">COPY</span> <span class="o">[</span>--chown<span class="o">=</span>&lt;user&gt;:&lt;group&gt;<span class="o">]</span> &lt;源路径1&gt;...  &lt;目标路径&gt;<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> <span class="o">[</span>--chown<span class="o">=</span>&lt;user&gt;:&lt;group&gt;<span class="o">]</span> <span class="o">[</span><span class="s2">&#34;&lt;源路径1&gt;&#34;</span>,...  <span class="s2">&#34;&lt;目标路径&gt;&#34;</span><span class="o">]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong><code>[--chown=&lt;user&gt;:&lt;group&gt;]</code></strong>：可选参数，用户改变复制到容器内文件的拥有者和属组。</p>
<p><strong><code>&lt;源路径&gt;</code></strong>：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">COPY</span> hom* /mydir/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> hom?.txt /mydir/<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong><code>&lt;目标路径&gt;</code></strong>：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</p>
</div>
        </div>
    </div>
<p>我的思路和正常的搭建方式一样,安装 nginx 之后再把写好的静态文件复制到web根目录就行, 但是用 docker 的效率高很多.</p>
<p>但是如果不用 docker 的话, 我至少要多花半个小时的时间去配置一个虚拟机, 配置软件源 安装 nginx 什么的, 花的时间就更多了, 而现在我只需要写一个脚本就能一键部署, 而且还能保存为镜像分享给别人,一劳永逸~</p>
<p>好了, 话不多说, 开始构建镜像</p>
<p>使用 <code>docker build</code> 命令通过目录下的 <code>dockerfile</code> 文件构建一个镜像,</p>
<p><code>-t</code> 的属性值是指 <strong><code>&lt;镜像名称:镜像标签&gt;</code></strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker build -t webtest:latest .
</span></span></code></pre></td></tr></table>
</div>
</div><p>注意了, 我在最后面还加了一个 <code>.</code> , 这个叫做上写文路径, 也是指相对路径</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>什么叫上下文路径?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</div>
        </div>
    </div>
<p>然后我们查看一下镜像列表</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker images
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>很明显,我们可以看到我们刚刚创建的镜像, 镜像 ID 是 <code>9acd8c30bd5b</code>.</p>
<p>那么接下来把它部署到容器里~ 用 <code>-p</code> 来指定端口绑定 <strong><code>&lt;外部端口:内部端口&gt;</code></strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker run -p 8080:80 -d 9acd8c30bd5b
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在我们已经把容器的 80 端口映射到了宿主机的 8080 端口~</p>
<p>然后访问我们的本地 IP + 8080 就可以访问到那个页面了, 我这里用 <code>127.0.0.1:8080</code> 访问</p>
<p></p>
<p>成功访问!</p>
<p>这样一来,快速部署 nginx 就完成了!</p>
<h1 id="结语">结语</h1>
<p>经过对 docker 初学习和初体验, 我也浅尝到了它的高效率和便捷性, 收获还是比较多的.</p>
<p>但目前还是一个入门的阶段,更多高级应用方法还等着去探索~</p>
<p>诶? 你问我难不难? QwQ ~</p>
<p>对 Linux 熟悉的人来玩这个没几天应该就能玩会了, 不过要做到深入的了解还是需要时间的.</p>
<p>那 就这样吧</p>
]]></description>
</item><item>
    <title>试玩 IPFS 协议——Web3.0时代的先驱者。</title>
    <link>http://weepingdogel.github.io/zh-cn/posts/%E8%AF%95%E7%8E%A9ipfs/</link>
    <pubDate>Fri, 12 Aug 2022 09:48:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://weepingdogel.github.io/zh-cn/posts/%E8%AF%95%E7%8E%A9ipfs/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://upload.wikimedia.org/wikipedia/commons/1/18/Ipfs-logo-1024-ice-text.png" referrerpolicy="no-referrer">
            </div><p><del>这个 LOGO 真好看。</del></p>
<h1 id="ipfs-是什么啊">IPFS 是什么啊？</h1>
<p><strong>IPFS(InterPlanetary File System)</strong>, 听名字一看好像是个文件系统？ 翻译过来是星际文件系统，听起来是不是很高级？</p>
<p>实际上它能实现的功能远比文件系统强大。</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>官方描述<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">IPFS is a collection of protocols, packages, and specifications that allow computers to send and receive data. Because of this, users can pick and choose which packages to install when using IPFS. And like shoe sizes, there is no one-size-fits-all solution. A developer building network applications will install a different set of tools than someone who wants to store files on IPFS. Pick the one that best suits what you&rsquo;re here to do.</div>
        </div>
    </div>
<p>如果你康得懂英文就很容易明白它是啥了，如果你康不懂那就来翻译一下。</p>
<blockquote>
<p>IPFS 是允许计算机发送和接收数据的协议、包和规范的集合。 因此，用户可以在使用 IPFS 时选择要安装的软件包。 和鞋码一样，没有一种万能的解决方案。 构建网络应用程序的开发人员将安装一组不同的工具，而不是想要在 IPFS 上存储文件的人。 选择最适合您在这里做的事情。
（Google Translate）</p>
</blockquote>
<p>其实它的原理和BT差不多，具有去中心化的性质，这可能会加速从 Web2.0 时代到 Web3.0 时代的过程。</p>
<p>它可能会带头颠覆之前 Web2.0 时代所有的开发逻辑。因为这是比 http 还底层的协议，它可不仅仅是让你能够通过 BT 下载好康的那么简单，而且它可以让一切信息都用去中心化的方式传输。</p>
<p>因此我对它挺有兴趣的，今天就来玩一下。</p>
<h1 id="我能怎么玩">我能怎么玩？</h1>
<p>对于目前这么菜的我来说，可以先试试官方文档写好了的玩法， 233。</p>
<h2 id="安装">安装</h2>
<p>在一切开始之前我得先把 IPFS 安装上去。</p>
<p>我们可以选择多种安装方案。</p>
<p>阅读 <a href="ipns://docs.ipfs.tech/install/" target="_blank" rel="noopener noreffer">IPFS 官方文档的 Install 部分</a></p>
<p></p>
<p>桌面用户（如 Windows、Mac、Linux）可以使用 IPFS Desktop，可以通过阅读官方文档中的教程进行安装和配置。 同样 Linux 也可以使用</p>
<p>然而 Arch 需要通过 aur 才能安装 <code>ipfs-desktop</code> 这个包，因此我决定安装命令行版本的 ipfs。</p>
<p>根据<a href="ipns://docs.ipfs.tech/install/command-line/#system-requirements" target="_blank" rel="noopener noreffer">官方文档</a>的教程</p>
<p>我们需要用 <code>wget</code> 下载一个叫 <code>kubo</code> 的包：</p>
<blockquote>
<ol>
<li>Download the Linux binary from dist.ipfs.tech (opens new window).</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wget https://dist.ipfs.tech/kubo/v0.14.0/kubo_v0.14.0_linux-amd64.tar.gz
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>然后要进行解压、复制文件等一系列繁琐的操作，然而咱用 Arch 的就别吃这一套了。因为咱官方的仓库就有这个包</p>
<p>打开你的终端，用 <code>pacman</code> 找一下这个包:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo pacman -Ss kubo
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来你的终端就会返回类似于这样的信息:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">community/kubo 0.14.0-1
</span></span><span class="line"><span class="cl">    A peer-to-peer hypermedia distribution protocol
</span></span></code></pre></td></tr></table>
</div>
</div><p>装它就完事了！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo pacman -S kubo
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来我们就可以愉快的使用 ipfs 了，哈哈！ <del>这就是咱 Arch 用户的优越性！！！</del></p>
<p>然后我们开始部署 ipfs，将自己的机器作为 ipfs 的节点～！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ipfs init
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ipfs daemon
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>接下来我们用 Brave 浏览器打开 WebUI : http://127.0.0.1:5001/webui</p>
<p>然后你就能看到这个界面了:
</p>
<p>是不是超简单！</p>
<p>另外，推荐使用 <a href="https://brave.com/" target="_blank" rel="noopener noreffer">brave 浏览器</a>来访问 IPFS 服务，毕竟它原生支持 IPFS 网关！</p>
<h2 id="文件传输">文件传输</h2>
<p>在当前 Web 2.0 的模式下，我们传输文件必须经过一些大公司的商业网盘，传输速度和存储空间都会得到一定程度的限制。</p>
<p>而使用 IPFS 传输文件则不会受这些限制，除此之外还能规避很大一部分的审查。</p>
<p>使用 IPFS 传输文件也非常简单，只需要使用 WebUI 进行操作即可。</p>
<p>首先点击 &ldquo;文件&rdquo;：</p>
<p></p>
<p>再点击右上角的导入：</p>
<p></p>
<p>发送文件者可以点击 <code>文件</code> 或 <code>文件夹</code> 来导入要分享出去的文件，这时浏览器会自动弹出系统或DE自带的目录选择器，找到需要分享的文件即可。</p>
<p>然后点击对应文件右边的三个点：</p>
<p></p>
<p>选择<code>复制 CID</code>，然后将 CID 发给接受者。</p>
<p>而接受者则点击<code>来自 IPFS 路径</code>。</p>
<p></p>
<p>将 CID 复制粘贴进去就能将它导入到 WebUI 的文件列表了。</p>
<p>图形化操作，非常简单。</p>
<p>我随便找来几个文件测试了一下，在节点距离较近的情况下传输速度非常惊人。</p>
<p></p>
<p>而在远距离的情况下，速度略有逊色，但很稳定。至少比某些商业网盘的速度要快多了，而且这是免费的。</p>
<p></p>
<h2 id="网页">网页</h2>
<p>IPFS 也是可以用来展示网页的，而且非常简单！</p>
<p>这里是个简单的玩法。</p>
<p>首先编写一个 HTML 文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Hello! IPFS!<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;font-size: 100px;&#34;</span><span class="p">&gt;</span>Hello! IPFS!!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>保存，用和文件传输相同的方法把 <code>index.html</code> 导入自己的 IPFS 节点。</p>
<p>接下来同样点击文件最右边的三个点，与之前不同的是，这次我们要点击的是第一个按钮，<code>分享链接</code>。</p>
<p></p>
<p></p>
<p>然后用 Brave 浏览器直接访问链接。</p>
<p></p>
<p>页面成功打开，这时候我们发现地址栏开头写的协议既不是 HTTP 也不是 HTTPS，而是 <code>ipfs://</code></p>
<p>由此可见，这个网页是通过 IPFS 协议打开的：</p>
<p></p>
<p>像这样点对点协议建立的网站是可以有效规避审查的，内容也会更加丰富。</p>
<h1 id="对未来有什么影响">对未来有什么影响？</h1>
<p>就目前来看， IPFS 节点和用户都比较少，还处于一个冷门阶段。</p>
<p>但是通过我这么菜的试玩，可以看出在文件传输和网页搭建这两个方面 IPFS 是非常优秀的。</p>
<p>唯一想说的是，</p>
<p>在目前全世界节点不足一千的情况下，下载速度最慢最慢都能稳定在1MB/s左右，而某商业网盘运营十几年下载速度却只有9kb/s。</p>
<p>实在是想不到别的理由来拒绝 IPFS 的怀抱了。</p>
<p>也许有一天 IPFS 能火起来，节点数量能增加到 70 亿，那个时候，资源的获取和分享将会更加自由和高效吧。</p>
<p>除此之外，如果用 IPFS 来干一些更能满足需求的事情，一切去中心化，将会对 Web 2.0 时代的巨头们造成一次沉重的打击。</p>
<p>还在想什么呢，赶紧在本地搭一个 IPFS 节点试试看？也许你会想用 IPFS 整一些有意思的活？在评论区留言吧。</p>
<h1 id="参考链接">参考链接</h1>
<ul>
<li><a href="https://zh.wikipedia.org/zh-cn/%E6%98%9F%E9%99%85%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener noreffer">星际文件系统 - 维基百科，自由的百科全书</a></li>
<li><a href="https://docs.ipfs.io" target="_blank" rel="noopener noreffer">IPFS Documentation | IPFS Docs</a></li>
<li><a href="https://wiki.archlinux.org/title/InterPlanetary_File_System" target="_blank" rel="noopener noreffer">InterPlanetary File System - ArchWiki</a></li>
</ul>
]]></description>
</item></channel>
</rss>
