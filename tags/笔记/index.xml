<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>笔记 on WeepingDogel&#39;s Blog</title>
    <link>https://weepingdogel.github.io/tags/%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 笔记 on WeepingDogel&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>WeepingDogel 本站遵循 CC-BY-NC 4.0 协议</copyright>
    <lastBuildDate>Sat, 10 Oct 2020 20:37:45 +0800</lastBuildDate><atom:link href="https://weepingdogel.github.io/tags/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何使用 GitHub 搭建博客</title>
      <link>https://weepingdogel.github.io/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99_%E4%B8%8B/</link>
      <pubDate>Sat, 10 Oct 2020 20:37:45 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99_%E4%B8%8B/</guid>
      <description>序 去年写过一篇如何使用GitHub搭建网站，利用 Github Pages 上传自己写的 HTML 文件来运行一个网页..
嘛.. 搭建博客的话，手写 HTML CSS JS 太麻烦了&amp;hellip;
怎么办？用框架呀
qwq
我建议用 Hugo&amp;hellip; 个人觉得最简单
正好有个朋友的博客要重建..
过程 首先你得有个 Github 帐号和一个能在 Github Pages 显示的库。
去年那篇已经写清楚了如何注册 Github 帐号以及创建 Github Pages 库，这里就不再重复了。
接下来安装 Hugo
 Arch  $ sudo pacman -S hugo  deb 系  $ sudo apt install hugo  Windows  到 Github下载安装程序即可
我以 Linux 为例，其他平台可能有些细节不同，请注意</description>
    </item>
    
    <item>
      <title>Python 学习笔记——文件操作</title>
      <link>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 05 Sep 2020 22:12:05 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
      <description>文件操作 open open() 是 Python 进行文件操作的关键函数，它有连个参数需要设置
 文件名 - 文件的名称，不多解释 模式 - 决定打开的文件是否可读写以及其他属性  open(&amp;#39;filename&amp;#39;,&amp;#39;mode&amp;#39;) 读 仅以只读方式打开一个文件
f = open(&amp;#34;filename.txt&amp;#34;) 这样写也是一样的
f = open(&amp;#34;filename&amp;#34;,&amp;#34;rt&amp;#34;) &amp;ldquo;r&amp;rdquo; 表示读
&amp;ldquo;t&amp;rdquo; 表示文本，这是函数默认设定好的，所以可以省略。
这里引入一下 w3school 的一个列表
 There are four different methods (modes) for opening a file:
 &amp;ldquo;r&amp;rdquo; - Read - Default value. Opens a file for reading, error if the file does not exist
  &amp;ldquo;a&amp;rdquo; - Append - Opens a file for appending, creates the file if it does not exist</description>
    </item>
    
    <item>
      <title>怎样安装 Arch Linux</title>
      <link>https://weepingdogel.github.io/posts/%E6%80%8E%E6%A0%B7%E5%AE%89%E8%A3%85arch_linux/</link>
      <pubDate>Sat, 13 Jun 2020 12:53:25 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E6%80%8E%E6%A0%B7%E5%AE%89%E8%A3%85arch_linux/</guid>
      <description>Arch Linux是什么？ Arch Linux 是一个通用 x86_64_ GNU/Linux 发行版，它采用滚动升级模式，尽权力给用户提供最新版本的稳定软件，因其&amp;quot;简洁、现代、实用、以用户为中心&amp;quot;的原则而得名。
Arch Wiki 上已经写明其原则
 简洁
Arch Linux 将简洁定义为：避免任何不必要的添加、修改和复杂增加。它提供的软件都来自原始开发者(上游)，仅进行和发行版(下游)相关的最小修改。
不包含上游不愿意接受的补丁。绝大部分 Arch 下游补丁都已经被上游接受，下一个正式版本里会包含。
配置文件也是来自上游，仅包含发行版必须的调整，比如特殊的文件系统路径变动。Arch 不会在安装一个软件包后就自动启动服务。
软件包通常都和一个上游项目直接对应。仅在极少数情况下才会拆分软件包。
官方不支持图形化配置界面，建议用户使用命令行或文本编辑器修改设置。
  现代
Arch尽全力保持软件处于最新的稳定版本，只要不出现系统软件包破损，都尽量用最新版本。Arch采用滚动升级策略，安装之后可以持续升级。
Arch向GNU/Linux用户提供了许多新特性，包括systemd初始化系统、现代的文件系统、LVM2/EVMS、软件磁盘阵列（软RAID）、udev支持、initcpio（附带mkinitcpio）以及最新的内核。
  实用
Arch 注重实用性，避免意识形态之争。最终的设计决策都是由开发者的共识决定。开发者依赖基于事实的技术分析和讨论，避免政治因素，不会被流行观点左右。
Arch Linux 的仓库中包含大量的软件包和编译脚本。用户可以按照需要进行自由选择。仓库中既提供了开源、自由的软件，也提供了闭源软件。实用性大于意识形态.
  以用户为中心
许多 Linux 发行版都试图变得更“用户友好”，Arch Linux 则一直是，永远会是“以用户为中心”。此发行版是为了满足贡献者的需求，而不是为了吸引尽可能多的用户。Arch 适用于乐于自己动手的用户，他们愿意花时间阅读文档，解决自己的问题。
Arch 鼓励每一个用户 参与 和贡献，报告和帮助修复 bugs，提供软件包补丁和参加核心 项目：Arch 开发者都是志愿者，通过持续的贡献成为团队的一员。Archers 可以自行贡献软件包到 Arch 用户仓库, 提升 ArchWiki 文档质量, 在 论坛, 邮件列表, IRC 中给其它用户提供技术支持. Arch Linux 是全球很多用户的选择，已经有很多国际社区提供帮助和文档翻译。
 以上内容引用自 Arch Wiki 词条: https://wiki.</description>
    </item>
    
    <item>
      <title>[笔记整理]将来进行时</title>
      <link>https://weepingdogel.github.io/posts/%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86_%E5%B0%86%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%97%B6/</link>
      <pubDate>Thu, 19 Dec 2019 02:01:58 +0530</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86_%E5%B0%86%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%97%B6/</guid>
      <description>简介 个人笔记，仅供参考。
基本结构  陈述句  肯定:  主语 will be doing sth
  否定:  主语 won’t / will not be doing sth
    疑问句  Will 主语 be doing sth?
   例句   表示将来某段时间持续做的动作
 Eg:Toby will be climbing in the Himalayas all next week.
Toby下个星期将会爬一整周的喜马拉雅山
   表示将来的某个时间点前已经开始做的动作，并有可能继续下去
 Eg:Toby will not be in London next Tuesday. He will be climbing the Himalayas.</description>
    </item>
    
    <item>
      <title>锏幕 新人四项考核教程</title>
      <link>https://weepingdogel.github.io/posts/%E9%94%8F%E5%B9%95-%E6%96%B0%E4%BA%BA%E5%9B%9B%E9%A1%B9%E8%80%83%E6%A0%B8%E6%95%99%E7%A8%8B/</link>
      <pubDate>Sun, 20 Oct 2019 23:44:37 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E9%94%8F%E5%B9%95-%E6%96%B0%E4%BA%BA%E5%9B%9B%E9%A1%B9%E8%80%83%E6%A0%B8%E6%95%99%E7%A8%8B/</guid>
      <description>注意事项：本期内容中的IP地址可能与你的实际情况不同！！请根据实际情况更改对应IP地址！！
开场白 诶嘿～！我又回来了，我看到很多萌新不知道怎么过锏幕的新人考核，特意为此写篇博客做个教程。
好让你们看完过一下，那么…
嘛.. 我们开始吧..
考核内容    类型 内容 备注     名称 锏幕四项萌新考核 考核的名称   难度 Low 难度系数   第一关 简单破解Web表单 必须通过，否则无法进行下一关   第二关 简单SQL注入 必须通过   第三关 操作系统渗透 必须通过   第四关 获取root权限 必须通过    PS：锏幕组织的新人考核是以metasploitable作为标准的，因此我会写出如何准备环境
环境准备 上面已经说明了需要用到metasploitable，那么接下来我会写出如何配置靶机环境
第一步|下载&amp;amp;解压 首先我们需要去下载metasploitable这个靶机套餐的虚拟机文件，我们可以在各种搜索引擎中找到它我这里会给出地址。
点击这里可以下载
点进去以后点击那个巨大的Download即可下载。
嘛..我已经下载好了，是个zip文件。
然后你需要解压，两种方法:
 Linux  unzip命令 file-roller(GUI)   Windows  各种解压软件    这个不用多说吧.</description>
    </item>
    
    <item>
      <title>如何使用GitHub搭建网站</title>
      <link>https://weepingdogel.github.io/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99_%E4%B8%8A/</link>
      <pubDate>Sun, 13 Oct 2019 02:01:58 +0530</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99_%E4%B8%8A/</guid>
      <description>不正经的前言  我又回来啦～
嘿嘿，我绝对不会告诉你我又回来水啦～
啊啊别打我～疼
 Github是啥  某个萌新:大佬大佬，Github是啥？
大佬:不知道，滚。
萌新:呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜大佬不帮我了呜呜呜呜呜呜呜
 咳咳，，，，
Github是一个基于git的源代码托管平台，由Chris Wanstrath, PJ Hyett 与Tom Preston-Werner三位开发者在2008年4月创办。迄今拥有59名全职员工，主要提供基于git的版本托管服务。
也常常被人戏称为Gayhub。2333
 今天，GitHub已是：
 一个拥有143万开发者的社区。其中不乏Linux发明者Torvalds这样的顶级黑客，以及Rails创始人DHH这样的年轻极客。 这个星球上最流行的开源托管服务。目前已托管431万git项目，不仅越来越多知名开源项目迁入GitHub，比如Ruby on Rails、jQuery、Ruby、Erlang/OTP；近三年流行的开源库往往在GitHub首发，例如：BootStrap、Node.js、CoffeScript等。 alexa全球排名414的网站。   也就是说，你想把你写好的开源程序发布出去，Github将是最佳选择。
本期的主要内容 本期内容将会写出如何使用Github搭建一个简单的网站
使用Github建站的好处   安全  由于你的网页源代码是由Github托管，所以Github有多安全，你的网站就有多安全，别人想黑你就得先黑掉Github   简单  大部分操作只需要有前端基础就可以轻松完成   无忧  后端用Github的服务器，无需一天24小时维护，可以做到无人值守     使用Github建站的缺点   限制  Github仓库只能运行基于HTML这类的静态网页，不能使用数据库等花里胡哨的东西。   禁止爬虫  Github的仓库是禁止搜索引擎进行爬取内容的，所以你搭建的网站不会在搜索引擎上被找到。 (事实证明其实可以)      以上就是使用Github建站的优缺点，在搭建之前必须按实际情况以及需求来考虑。</description>
    </item>
    
    <item>
      <title>Python学习笔记 简单爬虫</title>
      <link>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/</link>
      <pubDate>Tue, 13 Aug 2019 22:20:53 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/</guid>
      <description>一如既往不正经的前言 嘿嘿，我又回来了，今天在U盘里弄好了hexo，现在可以继续更新了
并且这次博客添加了访问量统计，欢迎扩～
那么，本期更新一个简单的Python爬虫
爬虫原理  小白: 大佬大佬～爬虫是啥啊？
大佬: 去搜索引擎查呀
小白: 查了，还是看不懂
大佬: emmmmm..那你继续往下看吧…
 概述 2333,爬虫其实很好理解
我们都知道上网是用浏览器的，那么我们具体是怎样访问一个网页的呢？看下面吧(懒得画图了)
   浏览器 –发送一个请求www.bing.com –&amp;gt;
  服务器 &amp;lt;–接受到请求-–
  服务器 –做出响应–&amp;gt; –返回数据–&amp;gt; 浏览器
   什么？还是不了解？那我们用浏览器来看一下吧，我们随便打开一个网页
以Chrome/Chromiun为例，接下来依次点击 鼠标右键——检查——NetWork——将Preserve log打上勾 ，然后刷新 就会发现出现了以下内容
我们可以看到浏览器很详细的把请求内容显示出来了，而左边那些列表，你已经获取了这个网站的内容。
爬虫的原理就是把这些过程自动化，不需要我们去手动访问，就可以把网页中你想要的信息和内容爬取下来。
爬虫的作用 举个例子，这里有一个 全国号码段(链接已失效) 的网站，我们需要取一个城市中其中一个号码段的所有的号码。比如西安市
可以看到，号码段有很多，每个段有一万个号码。这个时候怎么办呢？总不可能用鼠标一条一条的去复制粘贴吧？这个时候爬虫就派上用场了。
 其实也可以用来爬取我的博客，当更新的时候就可以及时收到更新信息
啊啊别打我，疼疼疼
 编程语言的选择 我们如果要进行爬虫工作，那么就必须使用编程语言，用得最多的是Python，因为Python进行爬虫是比较简便的，当然也可以选择其他的比如C/C++、Java等，甚至是易语言都可以做到，只不过难易度和写法不同，目的和功能都是一样的。本期我们选择Python
Python的安装 Python是跨平台的语言，所以平台不同安装方法也有所不同。
Windows 可以到Python的官网去下载安装程序并安装，建议下载Python3
Mac OSX 同样到Python的官网下载
Linux Linux则在包管理器安装即可
deb系 $ sudo apt-get install python3 Arch系 $ sudo pacman -S python rpm系 $ sudo yum install python3 Android Android平台则安装QPython即可，</description>
    </item>
    
    <item>
      <title>用 Arch Linux 打造完美渗透环境</title>
      <link>https://weepingdogel.github.io/posts/%E7%94%A8arch_linux%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8E%E6%B8%97%E9%80%8F%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Wed, 31 Jul 2019 21:19:52 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E7%94%A8arch_linux%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8E%E6%B8%97%E9%80%8F%E7%8E%AF%E5%A2%83/</guid>
      <description>简介Arch Linux Arch Linux是一款通用x86_64的GNU/Linux发行版，它采用滚动更新模式，尽全力给用户提供最新的稳定版软件。
 嘿嘿，很久不滚可能会滚挂哦
 刚装完的Arch只是一个基本系统，什么都没有，随后用户就可以根据自己的想法和喜好，安装自己需要的软件，然后通过高度自定义的配置，打造自己喜欢的、理想的系统。这也是Arch的可爱和有吸引力之处。所以Arch也是我最喜欢的发行版之一。
关于Arch Linux的更多详细内容，请参见Arch Wiki。
本期内容介绍 本期将会演示如何用Arch Linux打造完美的渗透环境。一切操作均为教程演示，请读者根据实际情况操作。没使用过Arch Linux的用户请谨慎操作，并仔细查阅Arch Wiki。
那么，开始本期的内容吧。
提示 本期博客会大量使用Arch Wiki的超链接，以方便理解部分内容。
准备工作 安装Arch Linux 本期博客不会详细写出Arch Linux的安装过程，请参考Arch Wiki安装Arch Linux，并做好基本的配置工作。
选择轻量桌面环境 由于渗透测试中部分操作会占用大量的资源，所以请尽量按需求选择轻量的桌面环境，这里不建议使用 Gnome 和 KDE，因为二者占用的资源非常大，对低配用户不友好。
 LXDE   轻量级GTK桌面环境，默认窗口管理器是 OpenBox ，最轻量的桌面环境之一。  LXQT   2013年间，洪任諭（“PCMan”）启动了将 LXDE 移植到 Qt 的项目。所以LXQT相当于是使用QT的LXDE，默认窗口管理器还是 OpenBox ，它比上面的LXDE还要轻量。  xfce4   目前我在用的桌面环境，基于GTK+2，这个是轻量化桌面环境中最好看的一个了。  i3wm   i3 是一种动态的平铺式窗口管理器，其灵感来自于面向开发者与资深用户的 wmii。 i3 的既定目标包括清晰可读的文档，完善的多显示器支持，基于树形结构的窗口管理，提供 vim 式的多种操作模式。 ——摘自Arch Wiki。  自己DIY桌面环境   你可以使用上面介绍过的 OpenBox 通过配置来DIY自己的桌面环境，也可以使用 fluxbox、i3wm 等。详细请参见 利用openbox打造自己的桌面环境-辣条的博客(链接已失效)。  本期博客也将会使用自定义桌面环境进行演示。</description>
    </item>
    
  </channel>
</rss>
