<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on WeepingDogel&#39;s Blog</title>
    <link>https://weepingdogel.github.io/tags/linux/</link>
    <description>Recent content in Linux on WeepingDogel&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-2021 | WeepingDogel with CC-BY-NC 4.0</copyright>
    <lastBuildDate>Tue, 02 Feb 2021 13:43:23 +0800</lastBuildDate><atom:link href="https://weepingdogel.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title> Beef 配合 bettercap 以及 msf 等多种工具的局域网渗透测试</title>
      <link>https://weepingdogel.github.io/posts/beef%E9%85%8D%E5%90%88bettercap%E4%BB%A5%E5%8F%8Amsf%E7%AD%89%E5%A4%9A%E7%A7%8D%E5%B7%A5%E5%85%B7%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Tue, 02 Feb 2021 13:43:23 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/beef%E9%85%8D%E5%90%88bettercap%E4%BB%A5%E5%8F%8Amsf%E7%AD%89%E5%A4%9A%E7%A7%8D%E5%B7%A5%E5%85%B7%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</guid>
      <description>序 嗯&amp;hellip; 惯例是要先说点废话嘛..
今天试着把 beef 和 bettercap 串在一起用了，发现有奇效～
然后如果是 IE 浏览器的话，可以用 beef 配合 msf 的 ms14-064 模块获取系统权限～
不多说啦，我们开始～
测试环境 啊咧，先说说测试环境。
  攻击机
 Arch Linux 192.168.101.15    靶机
 Windows XP on VirtualBox 192.168.101.43    条件有限，就只能用 XP 啦～
用到的工具  bettercap  首先就是它啦～ 这是用来进行 ARP 欺骗的，可以进行 DNS 劫持和断网攻击，也就是常说的中间人攻击的一部分吧&amp;hellip;   beef  用来劫持浏览器&amp;hellip; 然后可以干很多事情，具体的也不是很了解呢。   msf  这个就是老朋友啦～    什么? nmap? 这次用不着哦～</description>
    </item>
    
    <item>
      <title>攻击 CentOS6 虚拟机</title>
      <link>https://weepingdogel.github.io/posts/2020-09-26/</link>
      <pubDate>Sat, 26 Sep 2020 13:14:18 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/2020-09-26/</guid>
      <description>虽然存在渗透过程，但是本篇主题不是渗透，请理性阅读。
 序 最近总听到一些声音。
一些关于软件更新的、不同的声音。
一边说：在某些情况下，更新不好，会带来不必要的工作量，甚至重写
另一边说：持续不断的更新才能带来更好的体验
我不知道哪一边是对的，但有点好奇
我好奇如果不更新会怎样，所以我做了这件事：用虚拟机模拟一个商业公司的服务器，系统为 CentOS 6，尝试使用一些工具试着去攻击。
只是想模拟一家公司在 2020 年使用 CentOS 6.0 被黑客盯上了会怎么样。
模拟环境  攻击者平台: Arch Linux
IP: 192.168.0.109
受害平台: CentOS 6.1 on VirtualBox
IP: 192.168.0.116
 假如这是一家由非技术人员领导技术人员的公司，很长一段时间没有更新过开发时使用的软件（包括开发机、服务器的操作系统）
我们将这个虚拟机想象为他们的服务器，然后进行一些攻击测试。
由于这家公司的管理层是非技术人员，因此服务器的软件不仅版本老旧，且缺乏防御措施。
外加公司有点不尽人意的工时，程序员们都以“完成任务”的摸鱼态度工作，导致后端 PHP 写成了这样
&amp;lt;?php if ($_FILES[&amp;#34;file&amp;#34;][&amp;#34;error&amp;#34;] &amp;gt; 0) { echo &amp;#34;错误：&amp;#34; . $_FILES[&amp;#34;file&amp;#34;][&amp;#34;error&amp;#34;] . &amp;#34;&amp;lt;br&amp;gt;&amp;#34;; } else { echo &amp;#34;上传文件名: &amp;#34; . $_FILES[&amp;#34;file&amp;#34;][&amp;#34;name&amp;#34;] . &amp;#34;&amp;lt;br&amp;gt;&amp;#34;; echo &amp;#34;文件类型: &amp;#34; . $_FILES[&amp;#34;file&amp;#34;][&amp;#34;type&amp;#34;] . &amp;#34;&amp;lt;br&amp;gt;&amp;#34;; echo &amp;#34;文件大小: &amp;#34; .</description>
    </item>
    
    <item>
      <title>Python 学习笔记——文件操作</title>
      <link>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 05 Sep 2020 22:12:05 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
      <description>文件操作 open open() 是 Python 进行文件操作的关键函数，它有连个参数需要设置
 文件名 - 文件的名称，不多解释 模式 - 决定打开的文件是否可读写以及其他属性  open(&amp;#39;filename&amp;#39;,&amp;#39;mode&amp;#39;) 读 仅以只读方式打开一个文件
f = open(&amp;#34;filename.txt&amp;#34;) 这样写也是一样的
f = open(&amp;#34;filename&amp;#34;,&amp;#34;rt&amp;#34;) &amp;ldquo;r&amp;rdquo; 表示读
&amp;ldquo;t&amp;rdquo; 表示文本，这是函数默认设定好的，所以可以省略。
这里引入一下 w3school 的一个列表
 There are four different methods (modes) for opening a file:
 &amp;ldquo;r&amp;rdquo; - Read - Default value. Opens a file for reading, error if the file does not exist
  &amp;ldquo;a&amp;rdquo; - Append - Opens a file for appending, creates the file if it does not exist</description>
    </item>
    
    <item>
      <title>scp 命令小结</title>
      <link>https://weepingdogel.github.io/posts/scp%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Sat, 05 Sep 2020 12:10:07 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/scp%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93/</guid>
      <description>scp 命令是什么 是传文件用的..
我们用 ssh 操作服务器，当我们需要给服务器传输文件的时候，scp 命令会通过 ssh 的端口进行文件传输。
用法 当我们在终端输入 scp 后，我们会得到这些
weepingdogel@WeepingDogel ~&amp;gt; scp usage: scp [-346BCpqrTv] [-c cipher] [-F ssh_config] [-i identity_file] [-J destination] [-l limit] [-o ssh_option] [-P port] [-S program] source ... target 很显然我们很快就知道了一些参数&amp;hellip;
示例 这里举一些例子，来展示清楚具体的使用方法&amp;hellip;
先说明一下我的测试环境
 Arch Linux
IP: 192.168.0.105
CentOS8 虚拟机
IP: 192.168.0.108
 上传一个文件 $ scp [本地文件名] 用户名@地址:[文件名] 这是一般用法，但是请确保路径正确！
即：
weepingdogel@WeepingDogel ~ [1]&amp;gt; scp ./编译/7.1.0.zip root@192.168.0.108:/root/ root@192.168.0.108&amp;#39;s password: 7.1.0.zip 100% 95KB 5.</description>
    </item>
    
    <item>
      <title>如何解决 Manjaro 中 QCA6174 网卡问题</title>
      <link>https://weepingdogel.github.io/posts/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3manjaro%E4%B8%ADqca6174%E7%BD%91%E5%8D%A1%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 17 Jul 2020 10:30:59 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3manjaro%E4%B8%ADqca6174%E7%BD%91%E5%8D%A1%E9%97%AE%E9%A2%98/</guid>
      <description>开场白 尝试在 Redmibook 14 中安装了 Manjaro, 装完发现 WIFI 不能用
此时陷入了疑惑, 难道 Manjaro 也不自带 linux-firmware ?
总之经过了一系列折腾, 最后还是解决了, 写篇东西来记录一下解决的过程
尝试使用其他方法连接网络 既然 WIFI 不能用, 那也要想别的办法联网, 不然这问题就很棘手了
我能想到的是插网线, 可这是轻薄本, 没有有限网卡, 那么我们还有一种办法, 使用手机的 USB 网络共享
这个过程很简单, 按照以下步骤走
  使用 USB 数据线将电脑与手机连接, 并打开 USB 网络共享
 这个都不会的, 可以执行 sudo rm -rf / 这智商, 玩你妈的 Linux 不会的, 请参考这里    打开终端, 执行
  $ sudo ip link 然后它会返回这样的东西, 如图
设置网卡
$ sudo ip link set enp3s0f4u2 up 运行 dhcpcd</description>
    </item>
    
    <item>
      <title>锏幕 新人四项考核教程</title>
      <link>https://weepingdogel.github.io/posts/%E9%94%8F%E5%B9%95-%E6%96%B0%E4%BA%BA%E5%9B%9B%E9%A1%B9%E8%80%83%E6%A0%B8%E6%95%99%E7%A8%8B/</link>
      <pubDate>Sun, 20 Oct 2019 23:44:37 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E9%94%8F%E5%B9%95-%E6%96%B0%E4%BA%BA%E5%9B%9B%E9%A1%B9%E8%80%83%E6%A0%B8%E6%95%99%E7%A8%8B/</guid>
      <description>注意事项：本期内容中的IP地址可能与你的实际情况不同！！请根据实际情况更改对应IP地址！！
开场白 诶嘿～！我又回来了，我看到很多萌新不知道怎么过锏幕的新人考核，特意为此写篇博客做个教程。
好让你们看完过一下，那么…
嘛.. 我们开始吧..
考核内容    类型 内容 备注     名称 锏幕四项萌新考核 考核的名称   难度 Low 难度系数   第一关 简单破解Web表单 必须通过，否则无法进行下一关   第二关 简单SQL注入 必须通过   第三关 操作系统渗透 必须通过   第四关 获取root权限 必须通过    PS：锏幕组织的新人考核是以metasploitable作为标准的，因此我会写出如何准备环境
环境准备 上面已经说明了需要用到metasploitable，那么接下来我会写出如何配置靶机环境
第一步|下载&amp;amp;解压 首先我们需要去下载metasploitable这个靶机套餐的虚拟机文件，我们可以在各种搜索引擎中找到它我这里会给出地址。
点击这里可以下载
点进去以后点击那个巨大的Download即可下载。
嘛..我已经下载好了，是个zip文件。
然后你需要解压，两种方法:
 Linux  unzip命令 file-roller(GUI)   Windows  各种解压软件    这个不用多说吧.</description>
    </item>
    
    <item>
      <title>Python学习笔记 简单爬虫</title>
      <link>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/</link>
      <pubDate>Tue, 13 Aug 2019 22:20:53 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/</guid>
      <description>一如既往不正经的前言 嘿嘿，我又回来了，今天在U盘里弄好了hexo，现在可以继续更新了
并且这次博客添加了访问量统计，欢迎扩～
那么，本期更新一个简单的Python爬虫
爬虫原理  小白: 大佬大佬～爬虫是啥啊？
大佬: 去搜索引擎查呀
小白: 查了，还是看不懂
大佬: emmmmm..那你继续往下看吧…
 概述 2333,爬虫其实很好理解
我们都知道上网是用浏览器的，那么我们具体是怎样访问一个网页的呢？看下面吧(懒得画图了)
   浏览器 –发送一个请求www.bing.com –&amp;gt;
  服务器 &amp;lt;–接受到请求-–
  服务器 –做出响应–&amp;gt; –返回数据–&amp;gt; 浏览器
   什么？还是不了解？那我们用浏览器来看一下吧，我们随便打开一个网页
以Chrome/Chromiun为例，接下来依次点击 鼠标右键——检查——NetWork——将Preserve log打上勾 ，然后刷新 就会发现出现了以下内容
我们可以看到浏览器很详细的把请求内容显示出来了，而左边那些列表，你已经获取了这个网站的内容。
爬虫的原理就是把这些过程自动化，不需要我们去手动访问，就可以把网页中你想要的信息和内容爬取下来。
爬虫的作用 举个例子，这里有一个 全国号码段(链接已失效) 的网站，我们需要取一个城市中其中一个号码段的所有的号码。比如西安市
可以看到，号码段有很多，每个段有一万个号码。这个时候怎么办呢？总不可能用鼠标一条一条的去复制粘贴吧？这个时候爬虫就派上用场了。
 其实也可以用来爬取我的博客，当更新的时候就可以及时收到更新信息
啊啊别打我，疼疼疼
 编程语言的选择 我们如果要进行爬虫工作，那么就必须使用编程语言，用得最多的是Python，因为Python进行爬虫是比较简便的，当然也可以选择其他的比如C/C++、Java等，甚至是易语言都可以做到，只不过难易度和写法不同，目的和功能都是一样的。本期我们选择Python
Python的安装 Python是跨平台的语言，所以平台不同安装方法也有所不同。
Windows 可以到Python的官网去下载安装程序并安装，建议下载Python3
Mac OSX 同样到Python的官网下载
Linux Linux则在包管理器安装即可
deb系 $ sudo apt-get install python3 Arch系 $ sudo pacman -S python rpm系 $ sudo yum install python3 Android Android平台则安装QPython即可，</description>
    </item>
    
    <item>
      <title>Linux 基础命令</title>
      <link>https://weepingdogel.github.io/posts/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 05 Aug 2019 15:05:06 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</guid>
      <description>提示：面向萌新，大佬勿喷
刚入门Linux难免会觉得很麻烦，因为不知道如何使用命令去操作，这样的话在Linux系统是寸步难行的，但是学会了一些基础命令以后就能无压力的操作了，想不想学会Linux？那就让我们从简单的文件操作开始吧。
如何使用命令行 如果你的发行版自带图形界面的话，可以从图形界面的菜单中找到一个叫 “终端” 的东西，打开它，就可以使用命令了。如果你的发行版不带图形界面，那么在tty登录用户以后就可以直接使用了。
注意，这个终端不等于DOS也不等于cmd，它和windows是没有办毛钱关系的，是另一种东西。
cd命令 如果你之前用过DOS或者经常使用windows的cmd，你就会知道这个命令了，这个命令在大多数操作系统中都有。
cd命令是”change directory”的缩写，也就是改变你当前所在的目录，后面可以加相对路径，也可以加上绝对路径。
简单的理解，就是进入一个文件夹。
用法 测试目录:/a/b/c
进入某个目录: 绝对路径：指定一个完整的路径，与自己当前所在的目录无关
[weepingdogel@localhost ~]$ cd /a/b/c # 进入/a/b/c这个路径中的目录c # 按下回车后 [weepingdogel@localhost c]$ 相对路径：指定当前目录上级目录下的其他目录或下级中的一个目录 指定下一级(常用)
[weepingdogel@localhost b]$ cd ./c # 进入当前所在/a/b目录下面的目录c # 按下回车后 [weepingdogel@localhost c]$ 指定上一级
[weepingdogel@localhost b]$ cd ../xxx #进入当前所在目录/a/b中的/a目录下的其他目录 # 按下回车后 [weepingdogel@localhost xxx]$ 退出某个目录: 有人可能不知道，进入了目录以后怎么退出来，那么这个时候就要用到cd ..命令了。
返回上一级
[weepingdogel@localhost c]$ cd .. # 从当前所在的目录/a/b/c返回上一级的目录/a/b # 按下回车后 [weepingdogel@localhost b]$ 返回上两级
[weepingdogel@localhost c]$ cd ../.. # 从当前所在的目录/a/b/c返回上两级的目录/a # 按下回车后 [weepingdogel@localhost a]$ pwd命令 这个命令是用来辅助上面的cd命令的，它的作用是查看当前所在的绝对路径。</description>
    </item>
    
    <item>
      <title>用 Arch Linux 打造完美渗透环境</title>
      <link>https://weepingdogel.github.io/posts/%E7%94%A8arch_linux%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8E%E6%B8%97%E9%80%8F%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Wed, 31 Jul 2019 21:19:52 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E7%94%A8arch_linux%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8E%E6%B8%97%E9%80%8F%E7%8E%AF%E5%A2%83/</guid>
      <description>简介Arch Linux Arch Linux是一款通用x86_64的GNU/Linux发行版，它采用滚动更新模式，尽全力给用户提供最新的稳定版软件。
 嘿嘿，很久不滚可能会滚挂哦
 刚装完的Arch只是一个基本系统，什么都没有，随后用户就可以根据自己的想法和喜好，安装自己需要的软件，然后通过高度自定义的配置，打造自己喜欢的、理想的系统。这也是Arch的可爱和有吸引力之处。所以Arch也是我最喜欢的发行版之一。
关于Arch Linux的更多详细内容，请参见Arch Wiki。
本期内容介绍 本期将会演示如何用Arch Linux打造完美的渗透环境。一切操作均为教程演示，请读者根据实际情况操作。没使用过Arch Linux的用户请谨慎操作，并仔细查阅Arch Wiki。
那么，开始本期的内容吧。
提示 本期博客会大量使用Arch Wiki的超链接，以方便理解部分内容。
准备工作 安装Arch Linux 本期博客不会详细写出Arch Linux的安装过程，请参考Arch Wiki安装Arch Linux，并做好基本的配置工作。
选择轻量桌面环境 由于渗透测试中部分操作会占用大量的资源，所以请尽量按需求选择轻量的桌面环境，这里不建议使用 Gnome 和 KDE，因为二者占用的资源非常大，对低配用户不友好。
 LXDE   轻量级GTK桌面环境，默认窗口管理器是 OpenBox ，最轻量的桌面环境之一。  LXQT   2013年间，洪任諭（“PCMan”）启动了将 LXDE 移植到 Qt 的项目。所以LXQT相当于是使用QT的LXDE，默认窗口管理器还是 OpenBox ，它比上面的LXDE还要轻量。  xfce4   目前我在用的桌面环境，基于GTK+2，这个是轻量化桌面环境中最好看的一个了。  i3wm   i3 是一种动态的平铺式窗口管理器，其灵感来自于面向开发者与资深用户的 wmii。 i3 的既定目标包括清晰可读的文档，完善的多显示器支持，基于树形结构的窗口管理，提供 vim 式的多种操作模式。 ——摘自Arch Wiki。  自己DIY桌面环境   你可以使用上面介绍过的 OpenBox 通过配置来DIY自己的桌面环境，也可以使用 fluxbox、i3wm 等。详细请参见 利用openbox打造自己的桌面环境-辣条的博客(链接已失效)。  本期博客也将会使用自定义桌面环境进行演示。</description>
    </item>
    
    <item>
      <title>震惊！16岁男子竟然在家里做出这种事！</title>
      <link>https://weepingdogel.github.io/posts/%E9%9C%87%E6%83%8A16%E5%B2%81%E7%94%B7%E5%AD%90%E7%AB%9F%E7%84%B6%E5%9C%A8%E5%AE%B6%E9%87%8C%E5%81%9A%E5%87%BA%E8%BF%99%E7%A7%8D%E4%BA%8B/</link>
      <pubDate>Fri, 26 Jul 2019 22:52:54 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E9%9C%87%E6%83%8A16%E5%B2%81%E7%94%B7%E5%AD%90%E7%AB%9F%E7%84%B6%E5%9C%A8%E5%AE%B6%E9%87%8C%E5%81%9A%E5%87%BA%E8%BF%99%E7%A7%8D%E4%BA%8B/</guid>
      <description>简介 该男子居然在家做出这种事情，使多数人震惊！
这才是真正的简介 哈哈，上面那个是假的，本篇博客将会复现MS17-010漏洞攻击。
MS17-010是啥啊？ 你是否记得2017年的那个勒索病毒？就是不给钱就把你电脑里所有的AV加密起来的一个病毒。是不是很可怕？这个病毒就是通过这个漏洞让更多的人看不到AV的。
 那这个漏洞是怎样的呢？我将给出以下链接用于参考：   Microsoft 安全公告 MS17-010 - 严重
https://cvedetails.com/cve/CVE-2017-0143/
https://cvedetails.com/cve/CVE-2017-0144/
https://cvedetails.com/cve/CVE-2017-0145/
https://cvedetails.com/cve/CVE-2017-0146/
https://cvedetails.com/cve/CVE-2017-0147/
https://cvedetails.com/cve/CVE-2017-0148/
https://github.com/RiskSense-Ops/MS17-010
 攻击复现 那么，我们来复现一下这个漏洞的攻击流程吧。在这里，我给大家安利一个Linux的渗透测试软件包。叫做Metasploit。 它在作为渗透测试的发行版中是自带的，如果你用的不是作为渗透测试的发行版，那么以下是安装方法：
 基于Arch  $ sudo pacman -S metasploit  基于Debian更新源里有的  $ sudo apt-get install metasploit  rpm系或deb系源里没有的  $ curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &amp;gt; msfinstall $ sudo chmod 755 msfinstall &amp;amp;&amp;amp; ./msfinstall  Windows嘛….   两个选择
 请到MSF官网下载，并且耐心等待。 出门左转安装Linux   复现过程  重要的事情说三遍：</description>
    </item>
    
    <item>
      <title>关于BlackArch的体验报告</title>
      <link>https://weepingdogel.github.io/posts/%E5%85%B3%E4%BA%8Eblackarch%E7%9A%84%E4%BD%93%E9%AA%8C%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sun, 16 Jun 2019 16:33:47 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%85%B3%E4%BA%8Eblackarch%E7%9A%84%E4%BD%93%E9%AA%8C%E6%8A%A5%E5%91%8A/</guid>
      <description>今天我尝试装了一下black Arch，花了很长时间，之后发现这个系统并不是很完美。
 优点 首先说说它的优点:
 这玩意集成了几千个软件包，并且都是一些很厉害的工具 其次这玩意很酷，特别是壁纸，配色什么的，我都觉得特别炫酷 以及它安装的便捷性，我一开始以为它比Arch难安装，其实用完才知道这个安装简直比Arch简单十倍，只不过我习惯了Arch那种手动式，这种半自动化却不习惯了  缺点 现在来说说缺点:
 首先ISO实在是太大了，Black Arch官方的live ISO达到了12GB，我idm都下载了很久，而网络安装包和Arch的大小一样，不过我没试过 更可怕的是 blackarch官方镜像的安装最低硬盘需求达到了40GB以上，这使得大部分人缺乏这个安装条件 其次就是它的桌面环境实在太简陋了，而且性能上也特别不好，特别是i3和spectrwm这两个，根本无法操作，fluxbox最炫酷但是习惯太不适合大部分人了，openbox啥都没有，更不好操作，而且不支持中文，弄得我很蛋疼；还有就是依赖太乱了，换别的桌面环境很麻烦，比如我想卸载掉其他的换xfce，结果pacman -Rs卸载不了，得用Rsc才能卸载，结果把lxdm给卸掉了，进不去图形了，后来装上lxdm出现了很大的颜色bug。。。  总结 首先不能否认BlackArch是装逼的好东西，但是我不推荐使用官方的镜像（无论是在线镜像还是离线live）去安装，否则就会有我的下场了，其次就是用户必须有Arch系基础，否则就是个坑。建议先安装Arch，然后导入BlackArch的软件库安装全套工具即可。最后请不要那blackarch与kali、parrot对比，这没有对比性的，工具都差不多的。</description>
    </item>
    
  </channel>
</rss>
