<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>安装 - 标签 - WeepingDogel</title>
        <link>http://weepingdogel.github.io/tags/%E5%AE%89%E8%A3%85/</link>
        <description>安装 - 标签 - WeepingDogel</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>weepingdogel@gmail.com (WeepingDogel)</managingEditor>
            <webMaster>weepingdogel@gmail.com (WeepingDogel)</webMaster><lastBuildDate>Sat, 11 Jun 2022 08:00:00 &#43;0800</lastBuildDate><atom:link href="http://weepingdogel.github.io/tags/%E5%AE%89%E8%A3%85/" rel="self" type="application/rss+xml" /><item>
    <title>利用 rsync 给笔记本安装 Gentoo</title>
    <link>http://weepingdogel.github.io/posts/%E5%88%A9%E7%94%A8rsync%E7%BB%99%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%AE%89%E8%A3%85gentoo/</link>
    <pubDate>Sat, 11 Jun 2022 08:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://weepingdogel.github.io/posts/%E5%88%A9%E7%94%A8rsync%E7%BB%99%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%AE%89%E8%A3%85gentoo/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://w.wallhaven.cc/full/95/wallhaven-955vx1.jpg" referrerpolicy="no-referrer">
            </div><p>给低性能设备白嫖高性能CPU编译系统的一种尝试。</p>
<h1 id="序">序</h1>
<p>半年不见，甚是想念～</p>
<p>我有一台性能羸弱不堪的 ChromeBook，</p>
<p>2GB 的 RAM 和一颗 只有 2.6 GHz 的双核老低压 U 对于现在的流行发行版来说已经完全不够用了，目前跑个 Mint 也是 CPU 经常性的 100% 占用。</p>
<p></p>
<p>于是我想着能不能给他装个 Gentoo？</p>
<p>然而就这乌龟U，估计得连续开机一周才能编译完吧&hellip;</p>
<p>嗯，不过我想试试能不能通过台式机编译完 Gentoo 再通过 rsync 给它传输到 ChromeBook。</p>
<p></p>
<p>论编译，我感觉哪怕是在 2022 年 E3 神教也不会让我失望吧。</p>
<p>起码比这颗小赛扬快多了。</p>
<h1 id="准备工作">准备工作</h1>
<p>废话不多说，直接开搞。</p>
<p>但我们要准备好这些东西</p>
<ul>
<li><a href="https://wiki.gentoo.org/wiki/Main_Page" target="_blank" rel="noopener noreffer">Gentoo Wiki</a>
<ul>
<li>安装过程中需要用到官方的指引和文档，必备</li>
</ul>
</li>
<li>翻译工具
<ul>
<li>由于 Gentoo 的用户群体较小，文档汉化可能不是很全面，因此可以借助翻译工具，这里推荐 <a href="https://www.deepl.com/zh/translator" target="_blank" rel="noopener noreffer">deepl</a></li>
</ul>
</li>
<li>一个 U 盘
<ul>
<li>用来装一个临时的 Linux 作为笔记本的 rsync 接收端。</li>
<li>这个没什么好说的，最好支持 USB 3.0～</li>
</ul>
</li>
<li>下载好 Gentoo 官方提供的 stage 包
<ul>
<li>这个会在下文中写出过程</li>
</ul>
</li>
<li>一个能够操作的 Linux 终端</li>
</ul>
<h1 id="下载-stage-压缩包">下载 stage 压缩包</h1>
<p>由于我们的安装手段比较特殊，因此可以直接跳到官方 wiki 的这一步</p>
<p>按照官方 wiki 给出的文档，我们进行以下操作:</p>
<p>首先开启 root</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">weepingdogel $ sudo -i
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来，你可以挂载一个分区到 <code>mnt</code> ，也可以直接创建文件夹，我这边空间很充足就直接空载操作了。</p>
<p>至于如何挂载？可以去参考 Arch Wiki。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">root # cd /mnt/gentoo
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们需要用 wget 下载 stage 包，打开<a href="https://www.gentoo.org/downloads/#other-arches" target="_blank" rel="noopener noreffer">这个页面</a>，这里我们选择 stage3</p>
<p>因为我懒，喜欢用 systemd ， 可以根据需要选择。</p>
<p><strong>注意：右键 stage3 systemd ，复制链接</strong></p>
<p></p>
<p>将链接粘贴到终端上</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">root # wget https://bouncer.gentoo.org/fetch/root/all/releases/amd64/autobuilds/20220605T170549Z/stage3-amd64-systemd-20220605T170549Z.tar.xz
</span></span></code></pre></td></tr></table>
</div>
</div><p>等待下载。</p>
<p></p>
<p>下载完成之后可以进行一下文件校验，可以参考一下官方的<a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Stage/zh-cn" target="_blank" rel="noopener noreffer">这个条目</a></p>
<p></p>
<p>一般情况下我这边不会损坏，所以我这里就不写出来了，接下来我们直接进入解压 stage 文件这一步。</p>
<h1 id="解压-stage-压缩包">解压 stage 压缩包</h1>
<p>我们使用 tar 来进行解压，这是官方 wiki 给出的命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">root #tar xpvf stage3-*.tar.bz2 --xattrs-include=&#39;*.*&#39; --numeric-owner
</span></span></code></pre></td></tr></table>
</div>
</div><p>有些读者可能看不懂中间那一串，那一串其实是个通配符，不过这个通配符可能跟你下载到的文件不一样，因此我们将中间那段改成准确的文件名。</p>
<p>这一步操作很简单，只需要按一下 Tab 键即可。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">root # tar xpvf stage3-amd64-systemd-20220102T170545Z.tar.xz --xattrs-include=&#39;*.*&#39; --numeric-owner
</span></span></code></pre></td></tr></table>
</div>
</div><p>等待解压，一会儿就好，<del>除非你用 IDE 硬盘</del>。</p>
<p></p>
<h1 id="配置编译选项">配置编译选项</h1>
<p>这一步官方是这么解释的：</p>
<blockquote>
<p>为了优化Gentoo，可以设置一些影响Portage的变量，Gentoo官方支持包管理器。 所有这些变量可以设置为环境变量（使用export），但这不是永久的。 为了保留设置，Portage读入/etc/portage/make.conf文件 ，一个用于Portage的配置文件。</p>
<blockquote>
<p>附注</p>
<p>所有可能的变量的注释列表可以在 /mnt/gentoo/usr/share/portage/config/make.conf.example中找到。要成功安装Gentoo，只需要设置下面提到的变量。</p>
</blockquote>
<p>启动编辑器（在本指南中，我们使用 nano）来更改我们将在下面讨论的优化变量。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">root #nano -w /mnt/gentoo/etc/portage/make.conf
</span></span></code></pre></td></tr></table>
</div>
</div><p>从make.conf.example文件中可以明显看出文件的结构：注释行以 &ldquo;#&ldquo;开头，其他行使用 VARIABLE=&ldquo;content 语法定义变量。 接下来选取其中的几个进行讨论。</p>
</blockquote>
<p>这里我们用 vim 写一下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">root # vim /mnt/gentoo/etc/portage/make.conf
</span></span></code></pre></td></tr></table>
</div>
</div><p>将里面的 <code>COMMON_FLAGS=</code> 加入 <code>-march=silvermont</code> 的选项，这样就能让编译器给 <code>silvermont</code> 架构的垃圾 CPU 进行优化了。</p>
<p>完整文件如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># These settings were set by the catalyst build script that automatically
</span></span><span class="line"><span class="cl"># built this stage.
</span></span><span class="line"><span class="cl"># Please consult /usr/share/portage/config/make.conf.example for a more
</span></span><span class="line"><span class="cl"># detailed example.
</span></span><span class="line"><span class="cl">COMMON_FLAGS=&#34;-march=silvermont -O2 -pipe&#34;
</span></span><span class="line"><span class="cl">CFLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">CXXFLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">FCFLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">FFLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># NOTE: This stage was built with the bindist Use flag enabled
</span></span><span class="line"><span class="cl">PORTDIR=&#34;/var/db/repos/gentoo&#34;
</span></span><span class="line"><span class="cl">DISTDIR=&#34;/var/cache/distfiles&#34;
</span></span><span class="line"><span class="cl">PKGDIR=&#34;/var/cache/binpkgs&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># This sets the language of build output to English.
</span></span><span class="line"><span class="cl"># Please keep this setting intact when reporting bugs.
</span></span><span class="line"><span class="cl">LC_MESSAGES=C
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="安装-gentoo-基础系统">安装 Gentoo 基础系统</h1>
<p>上面已经完成了第一阶段的操作，可以开始安装基本系统了，诶嘿嘿。</p>
<p>接下来要做的是选择镜像源，我们可以参考 ustc mirror 给出的帮助文档：</p>
<ul>
<li><a href="https://mirrors.ustc.edu.cn/help/gentoo.html" target="_blank" rel="noopener noreffer">Gentoo 源使用帮助 — USTC Mirror Help  文档</a></li>
<li><a href="https://mirrors.ustc.edu.cn/help/gentoo-portage.html" target="_blank" rel="noopener noreffer">Gentoo Portage 源使用帮助 — USTC Mirror Help  文档</a></li>
</ul>
<p>直接按照 ustc 给出的帮助设置这两个源地址就好啦～</p>
<p></p>
<p></p>
<p>然后复制 DNS 信息</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">root # cp --dereference /etc/resolv.conf /mnt/gentoo/etc/
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="挂载必要的文件系统">挂载必要的文件系统</h2>
<p>这里要注意一下了，我这边要打好几条命令</p>
<p>Why？</p>
<p>官方的解释：</p>
<blockquote>
<p>稍等片刻，Linux 的根目录将变更到新的位置。为了确保新环境正常工作，需要确保一些文件系统可以正常使用。</p>
<p>需要提供的文件系统是：</p>
<ul>
<li>/proc/ 一个pseudo文件系统（看起来像是常规文件，事实上却是实时生成的），由Linux内核暴露的一些环境信息</li>
<li>/sys/ 一个pseudo文件系统，像要被取代的/proc/一样，比/proc/更加有结构</li>
<li>/dev/ 是一个包含全部设备文件的常规文件系统，一部分由Linux设备管理器（通常是udev）管理</li>
</ul>
<p>/proc/位置将要挂载到/mnt/gentoo/proc/，而其它的两个都是绑定挂载。字面上的意思是，例如/mnt/gentoo/sys/事实上就是/sys/（它只是同一个文件系统的第二个条目点），而/mnt/gentoo/proc/是（可以说是）文件系统的一个新的挂载。</p>
</blockquote>
<p>因此按顺序执行以下命令进行挂载：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">root # mount --types proc /proc /mnt/gentoo/proc
</span></span><span class="line"><span class="cl">root # mount --rbind /sys /mnt/gentoo/sys
</span></span><span class="line"><span class="cl">root # mount --make-rslave /mnt/gentoo/sys
</span></span><span class="line"><span class="cl">root # mount --rbind /dev /mnt/gentoo/dev
</span></span><span class="line"><span class="cl">root # mount --make-rslave /mnt/gentoo/dev 
</span></span></code></pre></td></tr></table>
</div>
</div><p>然而，这还没完</p>
<p></p>
<p>因此，接下来要加上这三条</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">root # test -L /dev/shm &amp;&amp; rm /dev/shm &amp;&amp; mkdir /dev/shm
</span></span><span class="line"><span class="cl">root # mount --types tmpfs --options nosuid,nodev,noexec shm /dev/shm 
</span></span><span class="line"><span class="cl">root # chmod 1777 /dev/shm
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="chroot--进入新环境">Chroot : 进入新环境</h2>
<p>当挂载好一切后，就可以 chroot 进去了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">root # chroot /mnt/gentoo /bin/bash 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">root # source /etc/profile 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">root # export PS1=&#34;(chroot) ${PS1}&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来终端会变成这样</p>
<p></p>
<h2 id="挂载-boot-分区">挂载 boot 分区</h2>
<p>这一步我们直接略过，因为最终安装的设备不是本机，而是另一台笔记本。</p>
<p>之后我们再进行手动安装引导介质。</p>
<h2 id="从网站安装-gentoo-ebuild-数据库快照">从网站安装 Gentoo ebuild 数据库快照</h2>
<p>官方其实这个就相当于 Arch 里面的 <code>sudo pacman -Syyu</code></p>
<p>不多说，复制粘贴吧。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">root # emerge-webrsync
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<h2 id="选择配置文件">选择配置文件</h2>
<p><del>我怎么感觉像是在复制 wiki 的内容呢&hellip;</del></p>
<blockquote>
<p>配置文件是任何一个Gentoo系统的积木。它不仅指定USE、CFLAGS和其它重要变量的默认值，还会锁定系统的包版本范围。这些设定全是由Gentoo的Portage开发者们来维护。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># eselect profile list
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Available profile symlink targets:
</span></span><span class="line"><span class="cl">  [1]   default/linux/amd64/17.1 *
</span></span><span class="line"><span class="cl">  [2]   default/linux/amd64/17.1/desktop
</span></span><span class="line"><span class="cl">  [3]   default/linux/amd64/17.1/desktop/gnome
</span></span><span class="line"><span class="cl">  [4]   default/linux/amd64/17.1/desktop/kde
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后输入以下命令即可：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># eselect profile set [对应的数字]
</span></span></code></pre></td></tr></table>
</div>
</div><p>其实它会列出很多选项，我们需要选择含有 <code>desktop/system</code> 的版本</p>
<h2 id="设置时区">设置时区</h2>
<p>这里直接用 Arch 的方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># ln -sf /usr/share/zoneinfo/Region（地区名）/City（城市名） /etc/localtime
</span></span></code></pre></td></tr></table>
</div>
</div><p>根据我的情况，我应该这样写：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后运行 hwclock 以生成 /etc/adjtime：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># hwclock --systohc
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="设置-use">设置 USE</h2>
<p>对于 Gentoo 这个系统来说， USE 标记是必备的，因此在编译之前，我们需要设置好全局 USE 标记</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># vim /etc/portage/make.conf
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">USE=&#34;alsa udev dbus icu systemd gles2 sound video intel -kde tiff x265&#34;
</span></span><span class="line"><span class="cl">VIDEO_CARDS=&#34;intel&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="更新-world-集合">更新 @world 集合</h2>
<p>其实就是跟 Arch 的“滚”差不多，但是它会是一个比较漫长的过程。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># emerge --ask --verbose --update --deep --newuse @world
</span></span></code></pre></td></tr></table>
</div>
</div><p>除此之外，在更改USE标记之后，这条命令也用来动态调整系统功能。</p>
<h2 id="配置-locale">配置 locale</h2>
<p>麻了，参考这个 <a href="https://wiki.archlinux.org/title/Installation_guide_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#%E6%9C%AC%E5%9C%B0%E5%8C%96" target="_blank" rel="noopener noreffer">Installation guide (简体中文) - ArchWiki</a></p>
<h1 id="配置内核">配置内核</h1>
<p>嗯哼，你以为我那么傻又编译八个小时？不！这次我选择用 bin 内核！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># emerge --ask sys-kernel/installkernel-systemd-boot
</span></span></code></pre></td></tr></table>
</div>
</div><p>节省不少时间呢。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># emerge --ask sys-kernel/gentoo-kernel-bin
</span></span></code></pre></td></tr></table>
</div>
</div><p>哎呀不想写了&hellip; 写了都是复制粘贴</p>
<p>自己看吧</p>
<p></p>
<h1 id="安装固件">安装固件</h1>
<blockquote>
<p>一些驱动需要先在系统上安装附加的固件才能工作。经常网络接口上会使用，特别是无线网络接口。此外，来自 AMD 、 NVidia 和 Intel 等供应商的现代视频芯片在使用开源驱动程序时，通常也需要外部固件文件。大多数固件都打包在 sys-kernel/linux-firmware 里</p>
</blockquote>
<p>大多数设备的驱动都依赖于 <code>linux-firmware</code> 这个包</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># emerge --ask sys-kernel/linux-firmware
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="配置-fstab">配置 fstab</h1>
<p>这一步操作是在系统启动的时候，让内核认识分区</p>
<p>但是 Gentoo 好像不能用 <code>genfstab</code></p>
<p>只能手写了</p>
<p>先在笔记本获取 UUID</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ls /dev/disk/by-uuid/ -l
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来将 <code>/</code> 分区对应分区的 <code>UUID</code> 按如下格式写在 <code>/etc/fstab</code> 这个文件里面</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># /dev/mmcblk1p2
</span></span><span class="line"><span class="cl">UUID=xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx	/         	xfs       	default,rw,relatime	0 1
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="通过-rsync-将系统灌到笔记本上">通过 rsync 将系统灌到笔记本上</h1>
<p>这个时候需要给笔记本插入一个 ArchISO 的 U 盘，启动到 ISO，<strong>并连接 WIFI 和 开启 ssh 服务。</strong></p>
<p>接下来将其原有的分区格式化</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># mkfs.btrfs /dev/mmcblk1p2 -f
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后挂载它，并将刚刚做好的文件用 rsync 灌进去</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># mount /dev/mmcblk1p2 /mnt 
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来笔记本这一端开启 ssh 服务</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># systemctl start sshd
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后使用 rsync 将编译好的文件传输至笔记本的系统分区。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># rsync -aAXHv -P -vi --exclude={&#34;/dev/*&#34;,&#34;/proc/*&#34;,&#34;/sys/*&#34;,&#34;/tmp/*&#34;,&#34;/run/*&#34;,&#34;/mnt/*&#34;,&#34;/media/*&#34;,&#34;/lost+found&#34;} ./mnt/gentoo/. root@192.168.0.109:/mnt
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="在笔记本安装启动引导器">在笔记本安装启动引导器</h1>
<p>这个也是很熟悉的操作了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># grub-install --target=x86_64-efi --efi-directory=/dev/mmcblk1p1 --bootloader-id=GRUB
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># grub-mkconfig -o /boot/grub/grub.cfg
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="结语">结语</h1>
<p>通过一系列的折腾，这台老本子终于能发挥其最大的性能了。</p>
<p>由此看来通过 rsync 复制 Linux 发行版系统文件到其他的设备看起来是可行的。</p>
<p>不过也折腾了挺久的</p>
<h1 id="参考链接">参考链接</h1>
<ul>
<li><a href="https://wiki.gentoo.org/wiki/Main_Page" target="_blank" rel="noopener noreffer">Gentoo Wiki</a></li>
<li><a href="https://www.gentoo.org/downloads/#other-arches" target="_blank" rel="noopener noreffer">Downloads â Gentoo Linux</a></li>
<li><a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Stage/zh-cn" target="_blank" rel="noopener noreffer">安装Gentoo安装文件 - Gentoo Wiki</a></li>
<li><a href="https://mirrors.ustc.edu.cn/help/gentoo.html" target="_blank" rel="noopener noreffer">Gentoo 源使用帮助 — USTC Mirror Help  文档</a></li>
<li><a href="https://mirrors.ustc.edu.cn/help/gentoo-portage.html" target="_blank" rel="noopener noreffer">Gentoo Portage 源使用帮助 — USTC Mirror Help  文档</a></li>
<li><a href="https://wiki.archlinux.org/title/Installation_guide_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#%E6%9C%AC%E5%9C%B0%E5%8C%96" target="_blank" rel="noopener noreffer">Installation guide (简体中文) - ArchWiki</a></li>
</ul>]]></description>
</item><item>
    <title>FreeBSD 初♂体验</title>
    <link>http://weepingdogel.github.io/posts/freebsd%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
    <pubDate>Mon, 30 Mar 2020 15:49:34 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://weepingdogel.github.io/posts/freebsd%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/wallhaven-r2pdxw.png" referrerpolicy="no-referrer">
            </div><h2 id="开场白">开场白</h2>
<p>闲着无聊我又来<del>水文章</del>更新了，这次准备<del>水</del>写一篇比较长的，然后就想对FreeBSD下手了,嘿嘿。</p>
<h2 id="freebsd介绍">FreeBSD介绍</h2>
<p>FreeBSD是一个类Unix的操作系统，它与Linux还是有区别的&hellip;&hellip;</p>
<p>Unix&hellip;感觉很少人用吧..估计比Linux还少，不过服务器用用应该还不错吧&hellip;</p>
<p>维基百科是这么说的 :</p>
<blockquote>
<p>FreeBSD是一个类Unix的操作系统，也是FreeBSD项目的发展成果。[2]FreeBSD是第一个开放源代码的系统，他是由基于BSD Unix的源代码派生而来的。BSD Unix是加州大学伯克利分校在1975年至1993年开发的操作系统。FreeBSD被开发为自由软件，这意味着其源代码开放，人人都可以使用FreeBSD。任何人都可以获得并使用它来满足各种需求，也可以修改它，然后再重发布它。此功能专为个人和公司量身定制，可用于创建各种基于FreeBSD的商业和非商业产品。尽管FreeBSD直接从BSD派生，但是从法律的角度来看，FreeBSD为 unix 系统，但它并不是“UNIX”。因为现在“UNIX”商标是属于国际开放标准组织的。[3]FreeBSD的第一个版本于1993年发布。</p>
</blockquote>
<blockquote>
<p>FreeBSD是一个支持许多硬件和体系架构的企业级系统。和其他BSD家族的操作系统一样， FreeBSD其核心、驱动程序以及所有的用户层（Userland）应用程序（如Unix shell和cat和ps等命令）都存储在源代码库中。[4]FreeBSD也可以运行其他二进制软件，比如Linux的。借助ports和FreeBSD软件包管理器，你可以在其上安装各种应用程序。根据2005年的调查，77％的BSD用户使用FreeBSD，因此FreeBSD拥有BSD系列中最大的用户社区。[5]</p>
</blockquote>
<blockquote>
<p>在今天，个人和企业都将FreeBSD用于多种用途，包括Yahoo! [6]，苹果[7]，Juniper网络公司，诺基亚，IBM， Yandex的，Apache软件基金会，Hotmail，索尼和许多其他用途</p>
<p><a href="https://zh.wikipedia.org/wiki/FreeBSD" target="_blank" rel="noopener noreffer">[Read More]</a></p>
</blockquote>
<h2 id="安装">安装</h2>
<h3 id="准备工作">准备工作</h3>
<p>我打算在虚拟机里玩玩就好啦～</p>
<blockquote>
<p>问:是VirtualBox吗？</p>
</blockquote>
<p>对，之前介绍过的<strong>VirtualBox</strong>，也应该没什么好讲的了，创建一个虚拟机应该不是问题，问题是接下来如何进行安装。</p>
<p>除了虚拟机我们还要准备的东西就是FreeBSD的安装镜像了，可以去官方的源下载，但是考虑到速度问题，也可以去墙内的一些镜像站下载。</p>
<p><a href="http://mirrors.ustc.edu.cn/freebsd/releases/" target="_blank" rel="noopener noreffer">USTC Mirror</a></p>
<p><strong>注意：下载的时候要确定你的架构，别下错了</strong>(应该大部分都是amd64吧)</p>
<p>什么？你说配置要求？嘛&hellip;</p>
<p>看看官网怎么说</p>
<blockquote>
<p>FreeBSD/i386 和 FreeBSD/pc98 版本， 都需要 486 或更高的处理器，以及至少 24 MB 的 RAM。 您需要至少 150 MB 的空闲硬盘空间， 才能完成最小的安装配置。</p>
</blockquote>
<p>至于amd64架构嘛，一句话，你有处理器有内存有硬盘就能用，而且我们都用虚拟机了</p>
<h3 id="安装过程">安装过程</h3>
<p>首先肯定是先把镜像导入虚拟机啦，这个我就不再写一遍了，百度谷歌能搜到的&hellip;</p>
<p>然后我们启动，就会看到这个可爱的画面..</p>
<p>你可以直接按回车，也可以等10秒让它自动启动&hellip;</p>
<p></p>
<p>启动之后就会来到这个界面</p>
<p></p>
<p>选择Install按回车啦</p>
<p>然后是选择键盘类型，这里选<code>United States Of America</code>
</p>
<p>选完以后回到第一项回车即可，当然你也可以在第二项那里测试你的键盘是否有效</p>
<p></p>
<p>什么？你看不懂英文？</p>
<p>第一项是<code>继续</code></p>
<p>第二项是<code>测试键盘</code></p>
<p>下面的就是地区或者国家名称了</p>
<p>接下来输入你的主机名</p>
<p></p>
<p>我就随便输入一个<code>localhost</code>吧</p>
<p>然后回车</p>
<p>然后我就懵逼了。。</p>
<p></p>
<p>然后看了下英文手册，这里是选择要安装的组件</p>
<p>根据官方的指引，这里来翻译一下&hellip;</p>
<ul>
<li>base-dbg</li>
</ul>
<blockquote>
<p>一些基础的软件包,比如&rsquo;cat&rsquo;这样的（debugging）</p>
</blockquote>
<ul>
<li>kernel-dbg</li>
</ul>
<blockquote>
<p>内核和内核模块（debugging）</p>
</blockquote>
<ul>
<li>lib32-dbg</li>
</ul>
<blockquote>
<p>32位的依赖吧好像是，带（debugging）的</p>
</blockquote>
<ul>
<li>lib32</li>
</ul>
<blockquote>
<p>同上，但是不带（debugging）</p>
</blockquote>
<ul>
<li>ports</li>
</ul>
<blockquote>
<p>嗯..类似于Gentoo的portage，必须装</p>
</blockquote>
<ul>
<li>src</li>
</ul>
<blockquote>
<p>一些源代码，最好选上吧</p>
</blockquote>
<ul>
<li>tests</li>
</ul>
<blockquote>
<p>一些测试代码，没必要选了</p>
</blockquote>
<p>想了一会儿，然后决定这样选了，你问凭什么这样选，我凭经验</p>
<p>那你就应该凭借翻译软件把官方的手册翻译完看一遍了</p>
<p></p>
<p>接下来是分区</p>
<p></p>
<p>这里有四种方式啊&hellip;</p>
<ul>
<li>Auto(UFS)</li>
</ul>
<blockquote>
<p>以<code>UFS</code>文件系统自动进行分区</p>
</blockquote>
<ul>
<li>Manual</li>
</ul>
<blockquote>
<p>手动对硬盘进行分区</p>
</blockquote>
<ul>
<li>shell</li>
</ul>
<blockquote>
<p>使用命令对硬盘进行分区</p>
</blockquote>
<ul>
<li>Auto(ZFS)</li>
</ul>
<blockquote>
<p>用<code>ZFS</code>文件系统自动分区</p>
</blockquote>
<p>行吧，选第二项，手动</p>
<p>然后就进了这里</p>
<p></p>
<p>然后，选<code>create</code>创建一个分区表，官方手册有说明要创建一个<code>GPT</code>分区表，但这里由于我没有开启<code>EFI</code>所以我用<code>MBR</code></p>
<p></p>
<p>这里的图形操作会有提示的，看不懂英文的可以用翻译器看一下</p>
<p>什么？还是不会？这玩意跟cfdisk差不多的</p>
<p>总之详细过程我就不截图出来了，只需要把分区分成这样就行</p>
<p></p>
<p>接下来选择<code>Finish</code>,再选择<code>Commit</code></p>
<p></p>
<p>然后就会慢慢安装了</p>
<p></p>
<p>接下来就需要设置一个密码了，毕竟Unix的系统是不能空口令登录的</p>
<p></p>
<p>跟Linux一样，设置一个能记住的就可以了，然后会让你确认网卡</p>
<p></p>
<p>后面一路选<code>yes</code>，不多说</p>
<p></p>
<p>这里直接全选</p>
<p></p>
<p>然后回车，这里把<code>6</code>勾选上，继续按回车</p>
<p></p>
<p>最后一个提示，<code>yes</code>，然后回车</p>
<p>然后重启，自动启动，再登录root，就完成啦</p>
<p></p>
<h2 id="装完后的感想">装完后的感想</h2>
<p>FreeBSD注定是适合服务器的，或许也适合拿来玩，但日常使用的话就会出现很多问题让人头疼</p>
<p>反正我是不会玩啦..连个顺手的文本编辑器都没有&hellip;vi我是真用不来&hellip;要修改很多配置文件的说..</p>
<p>如果你有什么主意的话，就在下面留言吧</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li>
<p><a href="https://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/using-bsdinstall.html" target="_blank" rel="noopener noreffer">FreeBSD 使用手册（英文）</a></p>
</li>
<li>
<p><a href="https://www.freebsd.org/" target="_blank" rel="noopener noreffer">FreeBSD 官网</a></p>
</li>
</ul>
]]></description>
</item></channel>
</rss>
