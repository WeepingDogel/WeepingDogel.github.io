<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程 on WeepingDogel&#39;s Blog</title>
    <link>https://weepingdogel.github.io/tags/%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 编程 on WeepingDogel&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-2021 | WeepingDogel via CC-BY-NC 4.0</copyright>
    <lastBuildDate>Tue, 15 Jun 2021 15:35:52 +0800</lastBuildDate><atom:link href="https://weepingdogel.github.io/tags/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>冒泡排序的尝试</title>
      <link>https://weepingdogel.github.io/posts/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%9A%84%E5%B0%9D%E8%AF%95/</link>
      <pubDate>Tue, 15 Jun 2021 15:35:52 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%9A%84%E5%B0%9D%E8%AF%95/</guid>
      <description>序 嗯.. 又遇到了一个题
 输入4个整数，从小到大排序
 哇这个.. 看似简单其实写起来可不轻松呢。
我照着谷歌查到的教程写了两种办法..
一个是指针交换法
 drafts/swap_sort.c at main · WeepingDogel/drafts · GitHub  另一个是冒泡排序
 drafts/bbsort.c at main · WeepingDogel/drafts · GitHub  本文将会描述用冒泡排序法解这个题
冒泡排序 什么是冒泡排序？
 冒泡排序（英语：Bubble Sort）又称为泡式排序，是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。
——冒泡排序 - 维基百科，自由的百科全书
 嗯&amp;hellip; 冒泡排序的过程是啥？
  比较相邻的元素。如果第一个比第二个大，就交换他们两个。 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。 针对所有的元素重复以上的步骤，除了最后一个。 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。  ——冒泡排序 - 维基百科，自由的百科全书
 再来看看维基百科上的伪代码和助记码
 1 2 3 4 5 6 7 8 9  function bubble_sort (array, length) { var i, j; for(i from 0 to length-1){ for(j from 0 to length-1-i){ if (array[j] &amp;gt; array[j+1]) swap(array[j], array[j+1]) } } }   1 2 3 4 5 6 7 8 9  函数 冒泡排序 输入 一个数组名称为array 其长度为length i 从 0 到 (length - 1) j 从 0 到 (length - 1 - i) 如果 array[j] &amp;gt; array[j + 1] 交换 array[j] 和 array[j + 1] 的值 如果结束 j循环结束 i循环结束 函数结束   助记码</description>
    </item>
    
    <item>
      <title>输入一个分数判断该分数的评级</title>
      <link>https://weepingdogel.github.io/posts/%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E5%88%86%E6%95%B0%E5%88%A4%E6%96%AD%E8%AF%A5%E5%88%86%E6%95%B0%E7%9A%84%E8%AF%84%E7%BA%A7/</link>
      <pubDate>Tue, 15 Jun 2021 09:01:29 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E5%88%86%E6%95%B0%E5%88%A4%E6%96%AD%E8%AF%A5%E5%88%86%E6%95%B0%E7%9A%84%E8%AF%84%E7%BA%A7/</guid>
      <description>序 好久没玩过 C 了， 昨晚看到一个题:
 输入一个分数，自动判断该分数的评级
要求: 使用 switch(){}
 过程 首先我肯定要获取这个分数然后赋值给某个变量，用 scanf(); 就可以做到
1 2 3 4 5 6 7 8  #include&amp;lt;stido.h&amp;gt; int main() { float score; printf(&amp;#34;Please type a score:\n&amp;#34;); scanf(&amp;#34;%f&amp;#34;, &amp;amp;score); }   其次我得确认这个数字小于 100 并大于 0
 满分100分
最低0分
 之前写过的一篇文章里就提到了 &amp;amp;&amp;amp; 这个符号
因此直接 if(score &amp;lt;= 100 &amp;amp;&amp;amp; &amp;gt;= 0){} 即可
1 2 3 4 5 6 7 8 9 10 11 12  #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>Python 学习笔记——ArgParse</title>
      <link>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-argparse/</link>
      <pubDate>Sun, 16 May 2021 18:21:05 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-argparse/</guid>
      <description>序 为了使 TitleGetter 更加灵活，我打算将 list.txt 和输出文件由用户自定， 因此这需要用到命令行选项&amp;hellip; 就像一些我们常用到的软件一样，比如 pacman
因此谷歌了一下，了解到了 ArgParse 这个东西
 The argparse module makes it easy to write user-friendly command-line interfaces. The program defines what arguments it requires, and argparse will figure out how to parse those out of sys.argv. The argparse module also automatically generates help and usage messages and issues errors when users give the program invalid arguments.
From: argparse â Parser for command-line options, arguments and sub-commands — Python 3.</description>
    </item>
    
    <item>
      <title>尝试在 Linux 下编译 exe 可执行文件</title>
      <link>https://weepingdogel.github.io/posts/%E5%B0%9D%E8%AF%95%E5%9C%A8linux%E4%B8%8B%E7%BC%96%E8%AF%91exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/</link>
      <pubDate>Thu, 06 May 2021 14:09:13 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%B0%9D%E8%AF%95%E5%9C%A8linux%E4%B8%8B%E7%BC%96%E8%AF%91exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/</guid>
      <description>序 最近一直在想有没有什么办法可以在 Linux 环境下编译 Windows 中可以运行的 exe 文件，由于自己没有 Windows 环境， 就算开虚拟机也多多少少有些不方便..
于是就去谷歌了一下.. 发现办法是有的.
这种办法叫做交叉编译, 要用到交叉编译器
我们看看维基百科上怎么说
 交叉编译器（英语：Cross compiler）是指一个在某个系统平台下可以产生另一个系统平台的可执行文件的编译器。交叉编译器在目标系统平台（开发出来的应用程序序所运行的平台）难以或不容易编译时非常有用。
交叉编译器的存在对于从一个开发主机为多个平台编译代码是非常有必要的。直接在平台上编译有时行不通，例如在一个嵌入式系统的单片机 ，因为它们没有操作系统，所以直接编译行不通。
交叉编译器和源代码至源代码编译器不同，交叉编译器用于二进制代码的跨平台软件开发，而源到源编译器是将某种编程语言的程序源代码作为输入，生成以另一种编程语言构成的等效源代码的编译器，但两者都是编程工具。
rel: https://zh.wikipedia.org/zh-hans/%E4%BA%A4%E5%8F%89%E7%B7%A8%E8%AD%AF%E5%99%A8
 概念就是这样..
mingw-w64 这大概是个交叉编译器了
看看官网怎么说
 Mingw-w64 is an advancement of the original mingw.org project, created to support the GCC compiler on Windows systems. It has forked it in 2007 in order to provide support for 64 bits and new APIs. It has since then gained widespread use and distribution.</description>
    </item>
    
    <item>
      <title>学 GTK 记</title>
      <link>https://weepingdogel.github.io/posts/%E5%AD%A6gtk%E8%AE%B0/</link>
      <pubDate>Fri, 09 Apr 2021 22:50:18 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%AD%A6gtk%E8%AE%B0/</guid>
      <description>序 心血来潮想玩玩 GTK, 于是..
我就尝试了一下， 用 C 试着捏了一个。
总的来说其实不是很难， 也是套用函数就好&amp;hellip;
但是，很长.. 真的很长..
gtk.h 要写 gtk 程序， 首先得导入这个库， 不过它得在安装 gtk 之后才行。
并且编译的时候还要加一些参数..
安装 gtk 现在已经 gtk 已经更新到 4 了， 不过我这里用的是 3..
这边 Arch 的话， 直接装上就好。
1  $ sudo pacman -S gtk3   头文件 然后在程序的开头写上这个就可以开始编程了。
1  #include &amp;lt;gtk/gtk.h&amp;gt;  构建一个空白窗口 C 可能稍微比较复杂， 在它能够加载出窗口之前， 我们需要在主函数里定义两个参数&amp;hellip;
我也不太懂， 就当作标准格式了。
一个是 整型(int) 的， 命名为 argc:
1  int main(int argc, )   另一个是 char 类型的, 命名为 argv, 但是这个有所不同， 我们得这么写 &amp;ldquo;char *argv&amp;rdquo; :</description>
    </item>
    
    <item>
      <title>Python 学习笔记——文件操作</title>
      <link>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 05 Sep 2020 22:12:05 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
      <description>文件操作 open open() 是 Python 进行文件操作的关键函数，它有连个参数需要设置
 文件名 - 文件的名称，不多解释 模式 - 决定打开的文件是否可读写以及其他属性  1  open(&amp;#39;filename&amp;#39;,&amp;#39;mode&amp;#39;)   读 仅以只读方式打开一个文件
1  f = open(&amp;#34;filename.txt&amp;#34;)   这样写也是一样的
1  f = open(&amp;#34;filename&amp;#34;,&amp;#34;rt&amp;#34;)   &amp;ldquo;r&amp;rdquo; 表示读
&amp;ldquo;t&amp;rdquo; 表示文本，这是函数默认设定好的，所以可以省略。
这里引入一下 w3school 的一个列表
 There are four different methods (modes) for opening a file:
 &amp;ldquo;r&amp;rdquo; - Read - Default value. Opens a file for reading, error if the file does not exist</description>
    </item>
    
    <item>
      <title>一个C语言的小程序</title>
      <link>https://weepingdogel.github.io/posts/%E4%B8%80%E4%B8%AAc%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B0%8F%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sun, 29 Mar 2020 14:15:46 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E4%B8%80%E4%B8%AAc%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B0%8F%E7%A8%8B%E5%BA%8F/</guid>
      <description>简介 嘛&amp;hellip;学了一会儿C语言弄了这么个玩意👑
其实就是基础语法和简单的判断👑
代码 废话不多说直接上代码👑
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118  /* 标准体重计算器 By WeepingDogel 世卫计算方法 男性：(身高cm－80)×70﹪=标准体重 女性：(身高cm－70)×60﹪=标准体重 标准体重正负10﹪为正常体重 标准体重正负10﹪~ 20﹪为体重过重或过轻 标准体重正负20﹪以上为肥胖或体重不足 超重计算公式 超重%=[（实际体重－理想体重）/（理想体重）]×100% */ /*导入标准库stdio.</description>
    </item>
    
    <item>
      <title>Python学习笔记 简单爬虫</title>
      <link>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/</link>
      <pubDate>Tue, 13 Aug 2019 22:20:53 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/</guid>
      <description>一如既往不正经的前言 嘿嘿，我又回来了，今天在U盘里弄好了hexo，现在可以继续更新了
并且这次博客添加了访问量统计，欢迎扩～
那么，本期更新一个简单的Python爬虫
爬虫原理  小白: 大佬大佬～爬虫是啥啊？
大佬: 去搜索引擎查呀
小白: 查了，还是看不懂
大佬: emmmmm..那你继续往下看吧…
 概述 2333,爬虫其实很好理解
我们都知道上网是用浏览器的，那么我们具体是怎样访问一个网页的呢？看下面吧(懒得画图了)
   浏览器 –发送一个请求www.bing.com –&amp;gt;
  服务器 &amp;lt;–接受到请求-–
  服务器 –做出响应–&amp;gt; –返回数据–&amp;gt; 浏览器
   什么？还是不了解？那我们用浏览器来看一下吧，我们随便打开一个网页
以Chrome/Chromiun为例，接下来依次点击 鼠标右键——检查——NetWork——将Preserve log打上勾 ，然后刷新 就会发现出现了以下内容
我们可以看到浏览器很详细的把请求内容显示出来了，而左边那些列表，你已经获取了这个网站的内容。
爬虫的原理就是把这些过程自动化，不需要我们去手动访问，就可以把网页中你想要的信息和内容爬取下来。
爬虫的作用 举个例子，这里有一个 全国号码段(链接已失效) 的网站，我们需要取一个城市中其中一个号码段的所有的号码。比如西安市
可以看到，号码段有很多，每个段有一万个号码。这个时候怎么办呢？总不可能用鼠标一条一条的去复制粘贴吧？这个时候爬虫就派上用场了。
 其实也可以用来爬取我的博客，当更新的时候就可以及时收到更新信息
啊啊别打我，疼疼疼
 编程语言的选择 我们如果要进行爬虫工作，那么就必须使用编程语言，用得最多的是Python，因为Python进行爬虫是比较简便的，当然也可以选择其他的比如C/C++、Java等，甚至是易语言都可以做到，只不过难易度和写法不同，目的和功能都是一样的。本期我们选择Python
Python的安装 Python是跨平台的语言，所以平台不同安装方法也有所不同。
Windows 可以到Python的官网去下载安装程序并安装，建议下载Python3
Mac OSX 同样到Python的官网下载
Linux Linux则在包管理器安装即可
deb系 1  $ sudo apt-get install python3   Arch系 1  $ sudo pacman -S python   rpm系 1  $ sudo yum install python3   Android Android平台则安装QPython即可，</description>
    </item>
    
  </channel>
</rss>
