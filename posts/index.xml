<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on WeepingDogel&#39;s Blog</title>
    <link>https://weepingdogel.github.io/posts/</link>
    <description>Recent content in Posts on WeepingDogel&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-2021 | WeepingDogel via CC-BY-NC 4.0</copyright>
    <lastBuildDate>Mon, 30 Aug 2021 21:49:09 +0800</lastBuildDate><atom:link href="https://weepingdogel.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>罗技 K845 开箱</title>
      <link>https://weepingdogel.github.io/posts/%E7%BD%97%E6%8A%80k845%E5%BC%80%E7%AE%B1/</link>
      <pubDate>Mon, 30 Aug 2021 21:49:09 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E7%BD%97%E6%8A%80k845%E5%BC%80%E7%AE%B1/</guid>
      <description>序  注意，这不是专业详细的评测，只是个人的开箱体验感受
 关注我 tg 频道的读者可能知道，之前我一直在考虑入手一把机械键盘。最终我选择了罗技的 k845。
昨天下午收到了快递代收点发来的到货短信，它终于来了，内心同时存在两种感觉：一个是键盘来了的欢喜，一个是暂时无法去取快递的尴尬。
今天返城到家，一下车我就迫不及待的跑去拿快递。 包了一层塑料纸和一层瓦楞纸，但是没有泡泡纸，不能戳戳戳了。 QAQ
多重？据说这个键盘不太重，连包装一起&amp;hellip; 大概和一瓶 2L 的可乐差不多吧..
包装与外观 一跑回家就开始拆快递了，带着一点点急切和一点点期待&amp;hellip;.. Emmmm&amp;hellip;.. 就打开了&amp;hellip;
啊这，罗技作为一个大品牌怎么可以这么抠啊
嗯&amp;hellip; 简约低调朴实无华的牛皮纸外包装，完美地体现了罗技的环保品牌形象！
密封方式照样也很简约环保，沾了一层透明的胶，只需要简简单单的用指甲划开，就能打开盒子了。
打开盒子之后，里面直接就是一把键盘，啥都没有&amp;hellip;
这环保，简直做到了极致啊。堪比某果不送充电器～
不过包装并不能代表什么，罗技这样的大厂肯定是把预算都花在了品质上。
没有泡沫绵缓冲这个事实就表明了罗技对键盘的可靠性充满了自信，这是一项加分项。
键盘采用悬浮式设计，银色磨砂外观的铝制底板，一股商务风扑面而来
图片是我直接上机点亮后拍的，不得不说这个灯光确实跟我想象的一样，在房间开灯的时候键盘上的灯光跟几乎没有一样.. 很微弱。
于是我就关上了灯，想看看它在关灯的时候是什么效果。
嗯.. 亮度刚刚好，不刺眼，正好适合晚上偷偷的写代码嘿嘿～
 （照片看上去可能很亮，但实际上并没有图上那么刺眼。）
 键冒的话.. 是 ABS 黑色键冒，配上这个白色的背光.. 感觉有点性冷淡的感觉，233
如果把键冒换成粉色的就完美了，嘿嘿
然后右上角有三个指示灯，分别是数字键、大小写、滚动锁定，这样传统的设计还是比较适合我的。qwq
背后有两个脚架，打开之后大概是这样
我个人是很喜欢打开脚架的，不过打开这个脚架需要稍微用一点力，打开之后的高度差也不是很大，正好适合狗爪子（bushi）。
手感 日常打字的话，概括一下：
  清脆的声音很带感，嘿嘿。 qwq
  但是造成的噪音也很大，毕竟青轴号称室友快乐轴嘛～ 但是我喜欢 （逃
  青轴的触感很强，段落感很到位～
  长期输入的情况下都不会疲劳。
  游戏方面，我玩了会 Minecraft ，对比薄膜差异还是很大的 QAQ，但平时也很少玩其他游戏了。
总的来说比薄膜强太多了，我可能回不去了。 QAQ</description>
    </item>
    
    <item>
      <title>冒泡排序的尝试</title>
      <link>https://weepingdogel.github.io/posts/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%9A%84%E5%B0%9D%E8%AF%95/</link>
      <pubDate>Tue, 15 Jun 2021 15:35:52 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%9A%84%E5%B0%9D%E8%AF%95/</guid>
      <description>序 嗯.. 又遇到了一个题
 输入4个整数，从小到大排序
 哇这个.. 看似简单其实写起来可不轻松呢。
我照着谷歌查到的教程写了两种办法..
一个是指针交换法
 drafts/swap_sort.c at main · WeepingDogel/drafts · GitHub  另一个是冒泡排序
 drafts/bbsort.c at main · WeepingDogel/drafts · GitHub  本文将会描述用冒泡排序法解这个题
冒泡排序 什么是冒泡排序？
 冒泡排序（英语：Bubble Sort）又称为泡式排序，是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。
——冒泡排序 - 维基百科，自由的百科全书
 嗯&amp;hellip; 冒泡排序的过程是啥？
  比较相邻的元素。如果第一个比第二个大，就交换他们两个。 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。 针对所有的元素重复以上的步骤，除了最后一个。 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。  ——冒泡排序 - 维基百科，自由的百科全书
 再来看看维基百科上的伪代码和助记码
 1 2 3 4 5 6 7 8 9  function bubble_sort (array, length) { var i, j; for(i from 0 to length-1){ for(j from 0 to length-1-i){ if (array[j] &amp;gt; array[j+1]) swap(array[j], array[j+1]) } } }   1 2 3 4 5 6 7 8 9  函数冒泡排序输入一个数组名称为array其长度为lengthi从0到(length-1)j从0到(length-1-i)如果array[j]&amp;gt;array[j+1]交换array[j]和array[j+1]的值如果结束j循环结束i循环结束函数结束   助记码</description>
    </item>
    
    <item>
      <title>输入一个分数判断该分数的评级</title>
      <link>https://weepingdogel.github.io/posts/%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E5%88%86%E6%95%B0%E5%88%A4%E6%96%AD%E8%AF%A5%E5%88%86%E6%95%B0%E7%9A%84%E8%AF%84%E7%BA%A7/</link>
      <pubDate>Tue, 15 Jun 2021 09:01:29 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E5%88%86%E6%95%B0%E5%88%A4%E6%96%AD%E8%AF%A5%E5%88%86%E6%95%B0%E7%9A%84%E8%AF%84%E7%BA%A7/</guid>
      <description>序 好久没玩过 C 了， 昨晚看到一个题:
 输入一个分数，自动判断该分数的评级
要求: 使用 switch(){}
 过程 首先我肯定要获取这个分数然后赋值给某个变量，用 scanf(); 就可以做到
1 2 3 4 5 6 7 8  #include&amp;lt;stido.h&amp;gt; int main() { float score; printf(&amp;#34;Please type a score:\n&amp;#34;); scanf(&amp;#34;%f&amp;#34;, &amp;amp;score); }   其次我得确认这个数字小于 100 并大于 0
 满分100分
最低0分
 之前写过的一篇文章里就提到了 &amp;amp;&amp;amp; 这个符号
因此直接 if(score &amp;lt;= 100 &amp;amp;&amp;amp; &amp;gt;= 0){} 即可
1 2 3 4 5 6 7 8 9 10 11 12  #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>Python 学习笔记——ArgParse</title>
      <link>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-argparse/</link>
      <pubDate>Sun, 16 May 2021 18:21:05 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-argparse/</guid>
      <description>序 为了使 TitleGetter 更加灵活，我打算将 list.txt 和输出文件由用户自定， 因此这需要用到命令行选项&amp;hellip; 就像一些我们常用到的软件一样，比如 pacman
因此谷歌了一下，了解到了 ArgParse 这个东西
 The argparse module makes it easy to write user-friendly command-line interfaces. The program defines what arguments it requires, and argparse will figure out how to parse those out of sys.argv. The argparse module also automatically generates help and usage messages and issues errors when users give the program invalid arguments.
From: argparse â Parser for command-line options, arguments and sub-commands — Python 3.</description>
    </item>
    
    <item>
      <title>尝试在 Linux 下编译 exe 可执行文件</title>
      <link>https://weepingdogel.github.io/posts/%E5%B0%9D%E8%AF%95%E5%9C%A8linux%E4%B8%8B%E7%BC%96%E8%AF%91exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/</link>
      <pubDate>Thu, 06 May 2021 14:09:13 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%B0%9D%E8%AF%95%E5%9C%A8linux%E4%B8%8B%E7%BC%96%E8%AF%91exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/</guid>
      <description>序 最近一直在想有没有什么办法可以在 Linux 环境下编译 Windows 中可以运行的 exe 文件，由于自己没有 Windows 环境， 就算开虚拟机也多多少少有些不方便..
于是就去谷歌了一下.. 发现办法是有的.
这种办法叫做交叉编译, 要用到交叉编译器
我们看看维基百科上怎么说
 交叉编译器（英语：Cross compiler）是指一个在某个系统平台下可以产生另一个系统平台的可执行文件的编译器。交叉编译器在目标系统平台（开发出来的应用程序序所运行的平台）难以或不容易编译时非常有用。
交叉编译器的存在对于从一个开发主机为多个平台编译代码是非常有必要的。直接在平台上编译有时行不通，例如在一个嵌入式系统的单片机 ，因为它们没有操作系统，所以直接编译行不通。
交叉编译器和源代码至源代码编译器不同，交叉编译器用于二进制代码的跨平台软件开发，而源到源编译器是将某种编程语言的程序源代码作为输入，生成以另一种编程语言构成的等效源代码的编译器，但两者都是编程工具。
rel: https://zh.wikipedia.org/zh-hans/%E4%BA%A4%E5%8F%89%E7%B7%A8%E8%AD%AF%E5%99%A8
 概念就是这样..
mingw-w64 这大概是个交叉编译器了
看看官网怎么说
 Mingw-w64 is an advancement of the original mingw.org project, created to support the GCC compiler on Windows systems. It has forked it in 2007 in order to provide support for 64 bits and new APIs. It has since then gained widespread use and distribution.</description>
    </item>
    
    <item>
      <title>学 GTK 记</title>
      <link>https://weepingdogel.github.io/posts/%E5%AD%A6gtk%E8%AE%B0/</link>
      <pubDate>Fri, 09 Apr 2021 22:50:18 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%AD%A6gtk%E8%AE%B0/</guid>
      <description>序 心血来潮想玩玩 GTK, 于是..
我就尝试了一下， 用 C 试着捏了一个。
总的来说其实不是很难， 也是套用函数就好&amp;hellip;
但是，很长.. 真的很长..
gtk.h 要写 gtk 程序， 首先得导入这个库， 不过它得在安装 gtk 之后才行。
并且编译的时候还要加一些参数..
安装 gtk 现在已经 gtk 已经更新到 4 了， 不过我这里用的是 3..
这边 Arch 的话， 直接装上就好。
1  $ sudo pacman -S gtk3   头文件 然后在程序的开头写上这个就可以开始编程了。
1  #include &amp;lt;gtk/gtk.h&amp;gt;  构建一个空白窗口 C 可能稍微比较复杂， 在它能够加载出窗口之前， 我们需要在主函数里定义两个参数&amp;hellip;
我也不太懂， 就当作标准格式了。
一个是 整型(int) 的， 命名为 argc:
1  int main(int argc, )   另一个是 char 类型的, 命名为 argv, 但是这个有所不同， 我们得这么写 &amp;ldquo;char *argv&amp;rdquo; :</description>
    </item>
    
    <item>
      <title> Beef 配合 bettercap 以及 msf 等多种工具的局域网渗透测试</title>
      <link>https://weepingdogel.github.io/posts/beef%E9%85%8D%E5%90%88bettercap%E4%BB%A5%E5%8F%8Amsf%E7%AD%89%E5%A4%9A%E7%A7%8D%E5%B7%A5%E5%85%B7%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Tue, 02 Feb 2021 13:43:23 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/beef%E9%85%8D%E5%90%88bettercap%E4%BB%A5%E5%8F%8Amsf%E7%AD%89%E5%A4%9A%E7%A7%8D%E5%B7%A5%E5%85%B7%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</guid>
      <description>序 嗯&amp;hellip; 惯例是要先说点废话嘛..
今天试着把 beef 和 bettercap 串在一起用了，发现有奇效～
然后如果是 IE 浏览器的话，可以用 beef 配合 msf 的 ms14-064 模块获取系统权限～
不多说啦，我们开始～
测试环境 啊咧，先说说测试环境。
  攻击机
 Arch Linux 192.168.101.15    靶机
 Windows XP on VirtualBox 192.168.101.43    条件有限，就只能用 XP 啦～
用到的工具  bettercap  首先就是它啦～ 这是用来进行 ARP 欺骗的，可以进行 DNS 劫持和断网攻击，也就是常说的中间人攻击的一部分吧&amp;hellip;   beef  用来劫持浏览器&amp;hellip; 然后可以干很多事情，具体的也不是很了解呢。   msf  这个就是老朋友啦～    什么? nmap? 这次用不着哦～</description>
    </item>
    
    <item>
      <title>如何解决 gvfs 在 i3wm 下无法挂载的问题</title>
      <link>https://weepingdogel.github.io/posts/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3_gvfs_%E5%9C%A8_i3wm_%E4%B8%8B%E6%97%A0%E6%B3%95%E6%8C%82%E8%BD%BD%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 16 Jan 2021 23:59:59 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3_gvfs_%E5%9C%A8_i3wm_%E4%B8%8B%E6%97%A0%E6%B3%95%E6%8C%82%E8%BD%BD%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>序 呃&amp;hellip; 前面其实没什么可以说的废话，就是出问题了嘛&amp;hellip;
然后就去群里问了，弄好了，然后写一下怎么弄好的&amp;hellip;
换 i3wm 了，然后使用文件管理器挂载别的分区的时候，突然弹出这个报错&amp;hellip;
这个问题一般是缺包，
好吧其实就是少装了东西。
我们需要装的是 polkit 这个东西&amp;hellip;
如果不知道它是啥的话，看 Arch Wiki 的这个页面。
 Polkit - ArchWiki  解决过程 首先安装 polkit ，
1  $ sudo pacman -S polkit   装完后，我们还需要安装其对应的图形前端。
如图，我们有很多可以选择。
我这里选择 Gnome 的，比较习惯..
用 pacman 就可以装了，
1  $ sudo pacman -S polkit-gnome   如果想用其他的，把 polkit-gnome 替换成其他包名即可。
但是装完还不行，还得设置启动项，原因？ 在这：
 If you are using a graphical environment, make sure that a graphical authentication agent is installed and autostarted on login.</description>
    </item>
    
    <item>
      <title>帮做大学计算机作业</title>
      <link>https://weepingdogel.github.io/posts/%E5%B8%AE%E5%81%9A%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%9C%E4%B8%9A/</link>
      <pubDate>Wed, 02 Dec 2020 23:20:22 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%B8%AE%E5%81%9A%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%9C%E4%B8%9A/</guid>
      <description>序 帮做作业 qwq&amp;hellip;
我也好久没玩 C 语言了，试试看我会不会做
 PS: 我这里是 Linux，运行方式可能不同，如果你是 Windows ，你得用编辑器来运行。
例如 Dev C++ 、 VS 2019 等。
 实验十一  实验十一
实验目的:
 了解 C 程序设计思想 了解 C 程序设计框架 实验内容:  输入一个成绩，输出它的等级评分
 这个很简单，我们需要列几个等级区间。
 优秀  80 ~ 100 分 [80,100]   及格  60~79 分 [60,79]   不及格  60 以下 [0,60)    在代码中，我们可以直接用运算表达式来表达区间，例如：
1  score &amp;gt;= 80 &amp;amp;&amp;amp; score &amp;lt;= 100   然后我们用 if() 来判断成绩等级。</description>
    </item>
    
    <item>
      <title>Linux Mint 如何修改软件源</title>
      <link>https://weepingdogel.github.io/posts/2020-nov-6/</link>
      <pubDate>Fri, 06 Nov 2020 22:54:23 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/2020-nov-6/</guid>
      <description>序 由于 Linux Mint 在安装完之后..
唔啊！ 不许笑！！ 我我我当然早就会！写给萌新看的！喂！不许笑！！
默认的软件源是官方的，在安装软件包和更新的时候得 跨过山河大海，也要穿过人山人海 ，因此我们得把它修改为离我们最近的镜像源
对于 Mint 来说，无非就两种办法
注意：二选一
一、终端法 我们先去 TUNA 镜像站看看帮助文档
内容是这样的
嗯&amp;hellip; 也许你看不太懂，具体怎么操作&amp;hellip;
首先把鼠标移到左下角，打开终端
就是封面上那个东西..
我们先要编辑 /etc/apt/sources.list 这个文件。
Mint 似乎不自带 vim，所以我们这里使用 nano。
1  $ sudo nano /etc/apt/sources.list   注意：sudo 不能丢！ 而且按下回车之后要输入密码才能有权限。
我们打开才发现里面是空的，除了一大堆英文注释什么都没有..
我们往里面写入
1  deb http://mirrors.tuna.tsinghua.edu.cn/linuxmint/ ulyana main upstream import backport   接下来还不够，因为 Mint 还有一些包要使用 Ubuntu 的仓库，所以我们再看看 Ubuntu 的帮助文档
我知道怎么做了，把这些当中的archive.ubuntu.com 等域名全部改成mirrors.tuna.tsinghua.edu.cn 即可
1 2 3 4 5 6 7 8 9 10 11 12 13  #deb cdrom:[Linux Mint 20 _Ulyana_ - Release amd64 20200624]/ focal contrib main # This system was installed using small removable media # (e.</description>
    </item>
    
    <item>
      <title>如何使用 GitHub 搭建博客</title>
      <link>https://weepingdogel.github.io/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99_%E4%B8%8B/</link>
      <pubDate>Tue, 13 Oct 2020 20:37:45 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99_%E4%B8%8B/</guid>
      <description>序 去年写过一篇如何使用GitHub搭建网站，利用 Github Pages 上传自己写的 HTML 文件来运行一个网页..
嘛.. 搭建博客的话，手写 HTML CSS JS 太麻烦了&amp;hellip;
怎么办？用框架呀
qwq
我建议用 Hugo&amp;hellip; 个人觉得最简单
正好有个朋友的博客要重建..
注册 Github 首先你得有个 Github 帐号和一个能在 Github Pages 显示的库。
去年那篇已经写清楚了如何注册 Github 帐号以及创建 Github Pages 库，这里就不再重复了。
总之你需要有一个 Github 帐号，然后创建一个名字为这样的库，记得勾选 Public
 你的GitHub用户名.github.io
 安装 Hugo 接下来安装 Hugo
 Arch  1  $ sudo pacman -S hugo    deb 系  1  $ sudo apt install hugo    Windows  到 Github下载安装程序即可</description>
    </item>
    
    <item>
      <title>攻击 CentOS6 虚拟机</title>
      <link>https://weepingdogel.github.io/posts/2020-09-26/</link>
      <pubDate>Sat, 26 Sep 2020 13:14:18 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/2020-09-26/</guid>
      <description>虽然存在渗透过程，但是本篇主题不是渗透，请理性阅读。
 序 最近总听到一些声音。
一些关于软件更新的、不同的声音。
一边说：在某些情况下，更新不好，会带来不必要的工作量，甚至重写
另一边说：持续不断的更新才能带来更好的体验
我不知道哪一边是对的，但有点好奇
我好奇如果不更新会怎样，所以我做了这件事：用虚拟机模拟一个商业公司的服务器，系统为 CentOS 6，尝试使用一些工具试着去攻击。
只是想模拟一家公司在 2020 年使用 CentOS 6.0 被黑客盯上了会怎么样。
模拟环境  攻击者平台: Arch Linux
IP: 192.168.0.109
受害平台: CentOS 6.1 on VirtualBox
IP: 192.168.0.116
 假如这是一家由非技术人员领导技术人员的公司，很长一段时间没有更新过开发时使用的软件（包括开发机、服务器的操作系统）
我们将这个虚拟机想象为他们的服务器，然后进行一些攻击测试。
由于这家公司的管理层是非技术人员，因此服务器的软件不仅版本老旧，且缺乏防御措施。
外加公司有点不尽人意的工时，程序员们都以“完成任务”的摸鱼态度工作，导致后端 PHP 写成了这样
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  &amp;lt;?php if ($_FILES[&amp;#34;file&amp;#34;][&amp;#34;error&amp;#34;] &amp;gt; 0) { echo &amp;#34;错误：&amp;#34; . $_FILES[&amp;#34;file&amp;#34;][&amp;#34;error&amp;#34;] . &amp;#34;&amp;lt;br&amp;gt;&amp;#34;; } else { echo &amp;#34;上传文件名: &amp;#34; .</description>
    </item>
    
    <item>
      <title>Python 学习笔记——文件操作</title>
      <link>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 05 Sep 2020 22:12:05 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
      <description>文件操作 open open() 是 Python 进行文件操作的关键函数，它有连个参数需要设置
 文件名 - 文件的名称，不多解释 模式 - 决定打开的文件是否可读写以及其他属性  1  open(&amp;#39;filename&amp;#39;,&amp;#39;mode&amp;#39;)   读 仅以只读方式打开一个文件
1  f = open(&amp;#34;filename.txt&amp;#34;)   这样写也是一样的
1  f = open(&amp;#34;filename&amp;#34;,&amp;#34;rt&amp;#34;)   &amp;ldquo;r&amp;rdquo; 表示读
&amp;ldquo;t&amp;rdquo; 表示文本，这是函数默认设定好的，所以可以省略。
这里引入一下 w3school 的一个列表
 There are four different methods (modes) for opening a file:
 &amp;ldquo;r&amp;rdquo; - Read - Default value. Opens a file for reading, error if the file does not exist</description>
    </item>
    
    <item>
      <title>scp 命令小结</title>
      <link>https://weepingdogel.github.io/posts/scp%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Sat, 05 Sep 2020 12:10:07 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/scp%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93/</guid>
      <description>scp 命令是什么 是传文件用的..
我们用 ssh 操作服务器，当我们需要给服务器传输文件的时候，scp 命令会通过 ssh 的端口进行文件传输。
用法 当我们在终端输入 scp 后，我们会得到这些
1 2 3 4  weepingdogel@WeepingDogel ~&amp;gt; scp usage: scp [-346BCpqrTv] [-c cipher] [-F ssh_config] [-i identity_file] [-J destination] [-l limit] [-o ssh_option] [-P port] [-S program] source ... target   很显然我们很快就知道了一些参数&amp;hellip;
示例 这里举一些例子，来展示清楚具体的使用方法&amp;hellip;
先说明一下我的测试环境
 Arch Linux
IP: 192.168.0.105
CentOS8 虚拟机
IP: 192.168.0.108
 上传一个文件 1  $ scp [本地文件名] 用户名@地址:[文件名]   这是一般用法，但是请确保路径正确！
即：</description>
    </item>
    
    <item>
      <title>关于 fcitx5 ，以及最近的环境变量问题</title>
      <link>https://weepingdogel.github.io/posts/%E5%85%B3%E4%BA%8Efcitx5/</link>
      <pubDate>Sat, 25 Jul 2020 13:25:46 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%85%B3%E4%BA%8Efcitx5/</guid>
      <description>发生了啥 最近我收到了一条这样的消息
 使用 $HOME/.pam_environment 设置环境变量的用户注意啦！由于 CVE-2010-4708, pam 上游在 1.4.0 版本中设置了默认不读取用户的环境变量设置，需要用户自行更换环境变量设置位置或恢复原默认读取行为。
ref: Linux 的环境变量怎么设 依云&amp;rsquo;s Blog
 为什么十年的漏洞现在才修啊喂！！！
Emmmm, 这么说就是 .pam_environment 这个文件不能用了&amp;hellip;&amp;hellip;
这里感谢 依云 写出了各种情况的应对方法
我这里记一篇在 xfce + lightdm 环境下更换 fcitx5 的东西&amp;hellip; 其他具体的可以参考云云写的.. (逃
fcitx5 与 fcitx  Fcitx   Fcitx (Flexible Input Method Framework) ──即小企鹅输入法，它是一个以 GPL 方式发布的输入法平台,可以通过安装引擎支持多种输入法，支持简入繁出，是在 Linux 操作系统中常用的中文输入法。它的优点是，短小精悍、跟程序的兼容性比较好。
&amp;mdash; Arch Wiki
  Fcitx5   Fcitx5 是继 Fcitx 后的新一代输入法框架。
&amp;mdash; Arch Wiki
 日常偷懒，直接引用(逃
好啦，直接开始吧  先贴出我的系统情况</description>
    </item>
    
    <item>
      <title>如何解决 Manjaro 中 QCA6174 网卡问题</title>
      <link>https://weepingdogel.github.io/posts/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3manjaro%E4%B8%ADqca6174%E7%BD%91%E5%8D%A1%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 17 Jul 2020 10:30:59 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3manjaro%E4%B8%ADqca6174%E7%BD%91%E5%8D%A1%E9%97%AE%E9%A2%98/</guid>
      <description>开场白 尝试在 Redmibook 14 中安装了 Manjaro, 装完发现 WIFI 不能用
此时陷入了疑惑, 难道 Manjaro 也不自带 linux-firmware ?
总之经过了一系列折腾, 最后还是解决了, 写篇东西来记录一下解决的过程
尝试使用其他方法连接网络 既然 WIFI 不能用, 那也要想别的办法联网, 不然这问题就很棘手了
我能想到的是插网线, 可这是轻薄本, 没有有限网卡, 那么我们还有一种办法, 使用手机的 USB 网络共享
这个过程很简单, 按照以下步骤走
  使用 USB 数据线将电脑与手机连接, 并打开 USB 网络共享
 这个都不会的, 可以执行 sudo rm -rf / 这智商, 玩你妈的 Linux 不会的, 请参考这里    打开终端, 执行
  1  $ sudo ip link   然后它会返回这样的东西, 如图</description>
    </item>
    
    <item>
      <title>怎样安装 Arch Linux</title>
      <link>https://weepingdogel.github.io/posts/%E6%80%8E%E6%A0%B7%E5%AE%89%E8%A3%85arch_linux/</link>
      <pubDate>Sat, 13 Jun 2020 12:53:25 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E6%80%8E%E6%A0%B7%E5%AE%89%E8%A3%85arch_linux/</guid>
      <description>Arch Linux是什么？ Arch Linux 是一个通用 x86_64_ GNU/Linux 发行版，它采用滚动升级模式，尽权力给用户提供最新版本的稳定软件，因其&amp;quot;简洁、现代、实用、以用户为中心&amp;quot;的原则而得名。
Arch Wiki 上已经写明其原则
 简洁
Arch Linux 将简洁定义为：避免任何不必要的添加、修改和复杂增加。它提供的软件都来自原始开发者(上游)，仅进行和发行版(下游)相关的最小修改。
不包含上游不愿意接受的补丁。绝大部分 Arch 下游补丁都已经被上游接受，下一个正式版本里会包含。
配置文件也是来自上游，仅包含发行版必须的调整，比如特殊的文件系统路径变动。Arch 不会在安装一个软件包后就自动启动服务。
软件包通常都和一个上游项目直接对应。仅在极少数情况下才会拆分软件包。
官方不支持图形化配置界面，建议用户使用命令行或文本编辑器修改设置。
  现代
Arch尽全力保持软件处于最新的稳定版本，只要不出现系统软件包破损，都尽量用最新版本。Arch采用滚动升级策略，安装之后可以持续升级。
Arch向GNU/Linux用户提供了许多新特性，包括systemd初始化系统、现代的文件系统、LVM2/EVMS、软件磁盘阵列（软RAID）、udev支持、initcpio（附带mkinitcpio）以及最新的内核。
  实用
Arch 注重实用性，避免意识形态之争。最终的设计决策都是由开发者的共识决定。开发者依赖基于事实的技术分析和讨论，避免政治因素，不会被流行观点左右。
Arch Linux 的仓库中包含大量的软件包和编译脚本。用户可以按照需要进行自由选择。仓库中既提供了开源、自由的软件，也提供了闭源软件。实用性大于意识形态.
  以用户为中心
许多 Linux 发行版都试图变得更“用户友好”，Arch Linux 则一直是，永远会是“以用户为中心”。此发行版是为了满足贡献者的需求，而不是为了吸引尽可能多的用户。Arch 适用于乐于自己动手的用户，他们愿意花时间阅读文档，解决自己的问题。
Arch 鼓励每一个用户 参与 和贡献，报告和帮助修复 bugs，提供软件包补丁和参加核心 项目：Arch 开发者都是志愿者，通过持续的贡献成为团队的一员。Archers 可以自行贡献软件包到 Arch 用户仓库, 提升 ArchWiki 文档质量, 在 论坛, 邮件列表, IRC 中给其它用户提供技术支持. Arch Linux 是全球很多用户的选择，已经有很多国际社区提供帮助和文档翻译。
 以上内容引用自 Arch Wiki 词条: https://wiki.</description>
    </item>
    
    <item>
      <title>FreeBSD 初♂体验</title>
      <link>https://weepingdogel.github.io/posts/freebsd%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Mon, 30 Mar 2020 15:49:34 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/freebsd%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
      <description>开场白 闲着无聊我又来水文章更新了，这次准备水写一篇比较长的，然后就想对FreeBSD下手了,嘿嘿。
FreeBSD介绍 FreeBSD是一个类Unix的操作系统，它与Linux还是有区别的&amp;hellip;&amp;hellip;
Unix&amp;hellip;感觉很少人用吧..估计比Linux还少，不过服务器用用应该还不错吧&amp;hellip;
维基百科是这么说的 :
 FreeBSD是一个类Unix的操作系统，也是FreeBSD项目的发展成果。[2]FreeBSD是第一个开放源代码的系统，他是由基于BSD Unix的源代码派生而来的。BSD Unix是加州大学伯克利分校在1975年至1993年开发的操作系统。FreeBSD被开发为自由软件，这意味着其源代码开放，人人都可以使用FreeBSD。任何人都可以获得并使用它来满足各种需求，也可以修改它，然后再重发布它。此功能专为个人和公司量身定制，可用于创建各种基于FreeBSD的商业和非商业产品。尽管FreeBSD直接从BSD派生，但是从法律的角度来看，FreeBSD为 unix 系统，但它并不是“UNIX”。因为现在“UNIX”商标是属于国际开放标准组织的。[3]FreeBSD的第一个版本于1993年发布。
  FreeBSD是一个支持许多硬件和体系架构的企业级系统。和其他BSD家族的操作系统一样， FreeBSD其核心、驱动程序以及所有的用户层（Userland）应用程序（如Unix shell和cat和ps等命令）都存储在源代码库中。[4]FreeBSD也可以运行其他二进制软件，比如Linux的。借助ports和FreeBSD软件包管理器，你可以在其上安装各种应用程序。根据2005年的调查，77％的BSD用户使用FreeBSD，因此FreeBSD拥有BSD系列中最大的用户社区。[5]
  在今天，个人和企业都将FreeBSD用于多种用途，包括Yahoo! [6]，苹果[7]，Juniper网络公司，诺基亚，IBM， Yandex的，Apache软件基金会，Hotmail，索尼和许多其他用途
[Read More]
 安装 准备工作 我打算在虚拟机里玩玩就好啦～
 问:是VirtualBox吗？
 对，之前介绍过的VirtualBox，也应该没什么好讲的了，创建一个虚拟机应该不是问题，问题是接下来如何进行安装。
除了虚拟机我们还要准备的东西就是FreeBSD的安装镜像了，可以去官方的源下载，但是考虑到速度问题，也可以去墙内的一些镜像站下载。
USTC Mirror
注意：下载的时候要确定你的架构，别下错了(应该大部分都是amd64吧)
什么？你说配置要求？嘛&amp;hellip;
看看官网怎么说
 FreeBSD/i386 和 FreeBSD/pc98 版本， 都需要 486 或更高的处理器，以及至少 24 MB 的 RAM。 您需要至少 150 MB 的空闲硬盘空间， 才能完成最小的安装配置。
 至于amd64架构嘛，一句话，你有处理器有内存有硬盘就能用，而且我们都用虚拟机了
安装过程 首先肯定是先把镜像导入虚拟机啦，这个我就不再写一遍了，百度谷歌能搜到的&amp;hellip;
然后我们启动，就会看到这个可爱的画面..
你可以直接按回车，也可以等10秒让它自动启动&amp;hellip;
启动之后就会来到这个界面
选择Install按回车啦
然后是选择键盘类型，这里选United States Of America 选完以后回到第一项回车即可，当然你也可以在第二项那里测试你的键盘是否有效
什么？你看不懂英文？</description>
    </item>
    
    <item>
      <title>一个C语言的小程序</title>
      <link>https://weepingdogel.github.io/posts/%E4%B8%80%E4%B8%AAc%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B0%8F%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sun, 29 Mar 2020 14:15:46 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E4%B8%80%E4%B8%AAc%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B0%8F%E7%A8%8B%E5%BA%8F/</guid>
      <description>简介 嘛&amp;hellip;学了一会儿C语言弄了这么个玩意👑
其实就是基础语法和简单的判断👑
代码 废话不多说直接上代码👑
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118  /* 标准体重计算器 By WeepingDogel 世卫计算方法 男性：(身高cm－80)×70﹪=标准体重 女性：(身高cm－70)×60﹪=标准体重 标准体重正负10﹪为正常体重 标准体重正负10﹪~ 20﹪为体重过重或过轻 标准体重正负20﹪以上为肥胖或体重不足 超重计算公式 超重%=[（实际体重－理想体重）/（理想体重）]×100% */ /*导入标准库stdio.</description>
    </item>
    
    <item>
      <title>锏幕 新人四项考核教程</title>
      <link>https://weepingdogel.github.io/posts/%E9%94%8F%E5%B9%95-%E6%96%B0%E4%BA%BA%E5%9B%9B%E9%A1%B9%E8%80%83%E6%A0%B8%E6%95%99%E7%A8%8B/</link>
      <pubDate>Sun, 20 Oct 2019 23:44:37 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E9%94%8F%E5%B9%95-%E6%96%B0%E4%BA%BA%E5%9B%9B%E9%A1%B9%E8%80%83%E6%A0%B8%E6%95%99%E7%A8%8B/</guid>
      <description>注意事项：本期内容中的IP地址可能与你的实际情况不同！！请根据实际情况更改对应IP地址！！
开场白 诶嘿～！我又回来了，我看到很多萌新不知道怎么过锏幕的新人考核，特意为此写篇博客做个教程。
好让你们看完过一下，那么…
嘛.. 我们开始吧..
考核内容    类型 内容 备注     名称 锏幕四项萌新考核 考核的名称   难度 Low 难度系数   第一关 简单破解Web表单 必须通过，否则无法进行下一关   第二关 简单SQL注入 必须通过   第三关 操作系统渗透 必须通过   第四关 获取root权限 必须通过    PS：锏幕组织的新人考核是以metasploitable作为标准的，因此我会写出如何准备环境
环境准备 上面已经说明了需要用到metasploitable，那么接下来我会写出如何配置靶机环境
第一步|下载&amp;amp;解压 首先我们需要去下载metasploitable这个靶机套餐的虚拟机文件，我们可以在各种搜索引擎中找到它我这里会给出地址。
点击这里可以下载
点进去以后点击那个巨大的Download即可下载。
嘛..我已经下载好了，是个zip文件。
然后你需要解压，两种方法:
 Linux  unzip命令 file-roller(GUI)   Windows  各种解压软件    这个不用多说吧.</description>
    </item>
    
    <item>
      <title>如何使用 GitHub 搭建网站</title>
      <link>https://weepingdogel.github.io/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99_%E4%B8%8A/</link>
      <pubDate>Sun, 13 Oct 2019 02:01:58 +0530</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99_%E4%B8%8A/</guid>
      <description>不正经的前言  我又回来啦～
嘿嘿，我绝对不会告诉你我又回来水啦～
啊啊别打我～疼
 Github是啥  某个萌新:大佬大佬，Github是啥？
大佬:不知道，滚。
萌新:呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜大佬不帮我了呜呜呜呜呜呜呜
 咳咳，，，，
Github是一个基于git的源代码托管平台，由Chris Wanstrath, PJ Hyett 与Tom Preston-Werner三位开发者在2008年4月创办。迄今拥有59名全职员工，主要提供基于git的版本托管服务。
也常常被人戏称为Gayhub。2333
 今天，GitHub已是：
 一个拥有143万开发者的社区。其中不乏Linux发明者Torvalds这样的顶级黑客，以及Rails创始人DHH这样的年轻极客。 这个星球上最流行的开源托管服务。目前已托管431万git项目，不仅越来越多知名开源项目迁入GitHub，比如Ruby on Rails、jQuery、Ruby、Erlang/OTP；近三年流行的开源库往往在GitHub首发，例如：BootStrap、Node.js、CoffeScript等。 alexa全球排名414的网站。   也就是说，你想把你写好的开源程序发布出去，Github将是最佳选择。
本期的主要内容 本期内容将会写出如何使用Github搭建一个简单的网站
使用Github建站的好处   安全  由于你的网页源代码是由Github托管，所以Github有多安全，你的网站就有多安全，别人想黑你就得先黑掉Github   简单  大部分操作只需要有前端基础就可以轻松完成   无忧  后端用Github的服务器，无需一天24小时维护，可以做到无人值守     使用Github建站的缺点   限制  Github仓库只能运行基于HTML这类的静态网页，不能使用数据库等花里胡哨的东西。   禁止爬虫  Github的仓库是禁止搜索引擎进行爬取内容的，所以你搭建的网站不会在搜索引擎上被找到。 (事实证明其实可以)      以上就是使用Github建站的优缺点，在搭建之前必须按实际情况以及需求来考虑。</description>
    </item>
    
    <item>
      <title>Python学习笔记 简单爬虫</title>
      <link>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/</link>
      <pubDate>Tue, 13 Aug 2019 22:20:53 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/</guid>
      <description>一如既往不正经的前言 嘿嘿，我又回来了，今天在U盘里弄好了hexo，现在可以继续更新了
并且这次博客添加了访问量统计，欢迎扩～
那么，本期更新一个简单的Python爬虫
爬虫原理  小白: 大佬大佬～爬虫是啥啊？
大佬: 去搜索引擎查呀
小白: 查了，还是看不懂
大佬: emmmmm..那你继续往下看吧…
 概述 2333,爬虫其实很好理解
我们都知道上网是用浏览器的，那么我们具体是怎样访问一个网页的呢？看下面吧(懒得画图了)
   浏览器 –发送一个请求www.bing.com –&amp;gt;
  服务器 &amp;lt;–接受到请求-–
  服务器 –做出响应–&amp;gt; –返回数据–&amp;gt; 浏览器
   什么？还是不了解？那我们用浏览器来看一下吧，我们随便打开一个网页
以Chrome/Chromiun为例，接下来依次点击 鼠标右键——检查——NetWork——将Preserve log打上勾 ，然后刷新 就会发现出现了以下内容
我们可以看到浏览器很详细的把请求内容显示出来了，而左边那些列表，你已经获取了这个网站的内容。
爬虫的原理就是把这些过程自动化，不需要我们去手动访问，就可以把网页中你想要的信息和内容爬取下来。
爬虫的作用 举个例子，这里有一个 全国号码段(链接已失效) 的网站，我们需要取一个城市中其中一个号码段的所有的号码。比如西安市
可以看到，号码段有很多，每个段有一万个号码。这个时候怎么办呢？总不可能用鼠标一条一条的去复制粘贴吧？这个时候爬虫就派上用场了。
 其实也可以用来爬取我的博客，当更新的时候就可以及时收到更新信息
啊啊别打我，疼疼疼
 编程语言的选择 我们如果要进行爬虫工作，那么就必须使用编程语言，用得最多的是Python，因为Python进行爬虫是比较简便的，当然也可以选择其他的比如C/C++、Java等，甚至是易语言都可以做到，只不过难易度和写法不同，目的和功能都是一样的。本期我们选择Python
Python的安装 Python是跨平台的语言，所以平台不同安装方法也有所不同。
Windows 可以到Python的官网去下载安装程序并安装，建议下载Python3
Mac OSX 同样到Python的官网下载
Linux Linux则在包管理器安装即可
deb系 1  $ sudo apt-get install python3   Arch系 1  $ sudo pacman -S python   rpm系 1  $ sudo yum install python3   Android Android平台则安装QPython即可，</description>
    </item>
    
    <item>
      <title>Linux 基础命令</title>
      <link>https://weepingdogel.github.io/posts/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 05 Aug 2019 15:05:06 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</guid>
      <description>提示：面向萌新，大佬勿喷
刚入门Linux难免会觉得很麻烦，因为不知道如何使用命令去操作，这样的话在Linux系统是寸步难行的，但是学会了一些基础命令以后就能无压力的操作了，想不想学会Linux？那就让我们从简单的文件操作开始吧。
如何使用命令行 如果你的发行版自带图形界面的话，可以从图形界面的菜单中找到一个叫 “终端” 的东西，打开它，就可以使用命令了。如果你的发行版不带图形界面，那么在tty登录用户以后就可以直接使用了。
注意，这个终端不等于DOS也不等于cmd，它和windows是没有办毛钱关系的，是另一种东西。
cd命令 如果你之前用过DOS或者经常使用windows的cmd，你就会知道这个命令了，这个命令在大多数操作系统中都有。
cd命令是”change directory”的缩写，也就是改变你当前所在的目录，后面可以加相对路径，也可以加上绝对路径。
简单的理解，就是进入一个文件夹。
用法 测试目录:/a/b/c
进入某个目录: 绝对路径：指定一个完整的路径，与自己当前所在的目录无关
1 2 3  [weepingdogel@localhost ~]$ cd /a/b/c # 进入/a/b/c这个路径中的目录c # 按下回车后 [weepingdogel@localhost c]$   相对路径：指定当前目录上级目录下的其他目录或下级中的一个目录 指定下一级(常用)
1 2 3  [weepingdogel@localhost b]$ cd ./c # 进入当前所在/a/b目录下面的目录c # 按下回车后 [weepingdogel@localhost c]$   指定上一级
1 2 3  [weepingdogel@localhost b]$ cd ../xxx #进入当前所在目录/a/b中的/a目录下的其他目录 # 按下回车后 [weepingdogel@localhost xxx]$   退出某个目录: 有人可能不知道，进入了目录以后怎么退出来，那么这个时候就要用到cd ..命令了。
返回上一级</description>
    </item>
    
    <item>
      <title>用 Arch Linux 打造完美渗透环境</title>
      <link>https://weepingdogel.github.io/posts/%E7%94%A8arch_linux%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8E%E6%B8%97%E9%80%8F%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Wed, 31 Jul 2019 21:19:52 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E7%94%A8arch_linux%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8E%E6%B8%97%E9%80%8F%E7%8E%AF%E5%A2%83/</guid>
      <description>简介Arch Linux Arch Linux是一款通用x86_64的GNU/Linux发行版，它采用滚动更新模式，尽全力给用户提供最新的稳定版软件。
 嘿嘿，很久不滚可能会滚挂哦
 刚装完的Arch只是一个基本系统，什么都没有，随后用户就可以根据自己的想法和喜好，安装自己需要的软件，然后通过高度自定义的配置，打造自己喜欢的、理想的系统。这也是Arch的可爱和有吸引力之处。所以Arch也是我最喜欢的发行版之一。
关于Arch Linux的更多详细内容，请参见Arch Wiki。
本期内容介绍 本期将会演示如何用Arch Linux打造完美的渗透环境。一切操作均为教程演示，请读者根据实际情况操作。没使用过Arch Linux的用户请谨慎操作，并仔细查阅Arch Wiki。
那么，开始本期的内容吧。
提示 本期博客会大量使用Arch Wiki的超链接，以方便理解部分内容。
准备工作 安装Arch Linux 本期博客不会详细写出Arch Linux的安装过程，请参考Arch Wiki安装Arch Linux，并做好基本的配置工作。
选择轻量桌面环境 由于渗透测试中部分操作会占用大量的资源，所以请尽量按需求选择轻量的桌面环境，这里不建议使用 Gnome 和 KDE，因为二者占用的资源非常大，对低配用户不友好。
 LXDE   轻量级GTK桌面环境，默认窗口管理器是 OpenBox ，最轻量的桌面环境之一。  LXQT   2013年间，洪任諭（“PCMan”）启动了将 LXDE 移植到 Qt 的项目。所以LXQT相当于是使用QT的LXDE，默认窗口管理器还是 OpenBox ，它比上面的LXDE还要轻量。  xfce4   目前我在用的桌面环境，基于GTK+2，这个是轻量化桌面环境中最好看的一个了。  i3wm   i3 是一种动态的平铺式窗口管理器，其灵感来自于面向开发者与资深用户的 wmii。 i3 的既定目标包括清晰可读的文档，完善的多显示器支持，基于树形结构的窗口管理，提供 vim 式的多种操作模式。 ——摘自Arch Wiki。  自己DIY桌面环境   你可以使用上面介绍过的 OpenBox 通过配置来DIY自己的桌面环境，也可以使用 fluxbox、i3wm 等。详细请参见 利用openbox打造自己的桌面环境-辣条的博客(链接已失效)。  本期博客也将会使用自定义桌面环境进行演示。</description>
    </item>
    
    <item>
      <title>夏尔·凡多姆海威语录</title>
      <link>https://weepingdogel.github.io/posts/%E5%A4%8F%E5%B0%94%E5%87%A1%E5%A4%9A%E5%A7%86%E6%B5%B7%E5%A8%81%E8%AF%AD%E5%BD%95/</link>
      <pubDate>Mon, 29 Jul 2019 02:01:58 +0530</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%A4%8F%E5%B0%94%E5%87%A1%E5%A4%9A%E5%A7%86%E6%B5%B7%E5%A8%81%E8%AF%AD%E5%BD%95/</guid>
      <description>收集一些夏尔的语录。
  不要哭，真难看，哭也不会改变什么，这个世界从来不曾对任何人温柔。
——–夏尔 凡多姆海威
   随着时间的流逝痛苦会变得淡薄，然而我并不想让时间来治愈我的痛苦，就算从痛苦中逃脱，忘记一切，得到的也只是停滞，无法前进。
——–夏尔 凡多姆海威
   用我那牵强的微笑，活出无人能比的骄傲。
——–夏尔 凡多姆海威
   除了死亡，所有的离开都是背叛。
——–夏尔 凡多姆海威
   就算如此，我也要去。就算全部的棋子被夺走，棋盘上只剩下了王，也绝不会投降。
——–夏尔 凡多姆海威
   悲观着，叹息着，这么做有什么用，停滞不前，即使是死人也办得到。可是，我活着，用自己的力量站着，终有一天会死的话，还是不要留下遗憾比较好吧。
——–夏尔 凡多姆海威
   认为悲惨的话就反抗，心存懊悔的话就前进，只会为不幸哀叹的你，连猪都不如。
——–夏尔 凡多姆海威
   瞬间的犹豫可是会丧命的，所以我决不会犹豫。
——–夏尔 凡多姆海威
   一旦失去的东西，就再也拿不回来了。
——–夏尔 凡多姆海威
   这个世界里没有什么规则，就算有，那也是由我创造的。
——–夏尔 凡多姆海威
   过度的圣洁比邪恶更恶。
——–夏尔 凡多姆海威
   我愿我择，故我在。我绝不后悔，也绝不乞怜，无论是向谁。</description>
    </item>
    
    <item>
      <title>震惊！16岁男子竟然在家里做出这种事！</title>
      <link>https://weepingdogel.github.io/posts/%E9%9C%87%E6%83%8A16%E5%B2%81%E7%94%B7%E5%AD%90%E7%AB%9F%E7%84%B6%E5%9C%A8%E5%AE%B6%E9%87%8C%E5%81%9A%E5%87%BA%E8%BF%99%E7%A7%8D%E4%BA%8B/</link>
      <pubDate>Fri, 26 Jul 2019 22:52:54 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E9%9C%87%E6%83%8A16%E5%B2%81%E7%94%B7%E5%AD%90%E7%AB%9F%E7%84%B6%E5%9C%A8%E5%AE%B6%E9%87%8C%E5%81%9A%E5%87%BA%E8%BF%99%E7%A7%8D%E4%BA%8B/</guid>
      <description>简介 该男子居然在家做出这种事情，使多数人震惊！
这才是真正的简介 哈哈，上面那个是假的，本篇博客将会复现MS17-010漏洞攻击。
MS17-010是啥啊？ 你是否记得2017年的那个勒索病毒？就是不给钱就把你电脑里所有的AV加密起来的一个病毒。是不是很可怕？这个病毒就是通过这个漏洞让更多的人看不到AV的。
 那这个漏洞是怎样的呢？我将给出以下链接用于参考：   Microsoft 安全公告 MS17-010 - 严重
https://cvedetails.com/cve/CVE-2017-0143/
https://cvedetails.com/cve/CVE-2017-0144/
https://cvedetails.com/cve/CVE-2017-0145/
https://cvedetails.com/cve/CVE-2017-0146/
https://cvedetails.com/cve/CVE-2017-0147/
https://cvedetails.com/cve/CVE-2017-0148/
https://github.com/RiskSense-Ops/MS17-010
 攻击复现 那么，我们来复现一下这个漏洞的攻击流程吧。在这里，我给大家安利一个Linux的渗透测试软件包。叫做Metasploit。 它在作为渗透测试的发行版中是自带的，如果你用的不是作为渗透测试的发行版，那么以下是安装方法：
 基于Arch  1  $ sudo pacman -S metasploit    基于Debian更新源里有的  1  $ sudo apt-get install metasploit    rpm系或deb系源里没有的  1  $ curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &amp;gt; msfinstall   1  $ sudo chmod 755 msfinstall &amp;amp;&amp;amp; .</description>
    </item>
    
    <item>
      <title>Linux Mint 安装教程</title>
      <link>https://weepingdogel.github.io/posts/linux_mint_%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</link>
      <pubDate>Sun, 23 Jun 2019 20:10:29 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/linux_mint_%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</guid>
      <description>简介 Linux Mint是一款由Linux Mint Team团队从2006年开始发行，是基于Debian和Ubuntu的发行版。
其目的是提供一种更加完整的即刻可用体验，它诞生的目的是为家庭用户和企业提供一个免费的，易用的，舒适而优雅的桌面操作系统。
包括了浏览器 多媒体播放器 DVD播放支持 Java和其他组件，它有三个桌面环境版本，分别是Cinnamon，MATE，xfce。
下载 Linux Mint可以去官网下载，官网有两种下载方式，一种是通过所在国家对应的镜像站进行HTTP下载，还有一种就是通过种子下载的。
由于官网上的上海大学开源镜像站进不去所以我只好选择了种子下载，但是本篇博客将会提供xfce版本的下载地址。
Linux Mint官网：https://www.linuxmint.com/
墙内用户可以从以下两个镜像源快速下载Linux Mint:
 清华开源镜像站 中科大开源镜像站  安装 xfce版本安装条件：至少512MB或以上的内存，15GB或以上的磁盘空间
你可以选择安装在物理机上，也可以安装在虚拟机上。
如果你需要安装在物理机则需要使用refus等类似的U盘启动制作工具制作启动盘。
本篇博客将使用虚拟机作为演示。
安装过程 挂载安装介质 首先将下载好的镜像文件加入虚拟机的启动，如果是物理机则插入你制作好的启动盘。
选择好之后，点击确定
然后启动虚拟机即可。而物理机则需要重启然后按相应的键，ESC F12 F11之类的，这些百度上都有，搜索“你电脑的品牌或者主板的品牌+U盘启动”就可以查到
然后虚拟机将会自动切换到虚拟CD进行启动，等待即可。
接下来就会出现这个画面，等待10秒后进入了CD Live即可。
10秒后，将会进入开机动画，不用多解释（还挺好看的哈）
再过了一会儿，就进入这个界面了，这就是我上文说的CD Live。
哈哈哈哈吐嘈一下这个时间显示，为什么是8点呢，而我发布这篇博客的时间是下午两点啊，其实是因为这个CD Live的默认时区不一样，不用理会他，我们继续操作即可。
选择语言，习惯和安装需要 那么接下来点击这个 “Install Linux Mint” ，然后就会弹出这个安装界面了，第一页这里是选择语言，我们选择简体中文（当然你看得懂什么语言就选什么语言）。
然后就是选择键盘布局了，这里默认就好，或者选择美式，但都差不多是一样的。
分区 然后就是一个重头戏了,你一定要认真看！认真看！认真看！
（重要的事情说三遍）
这里会给你两个选项来进行分区，其中第一个单选框的意思是把你的整个硬盘全部格式化然后再安装Linux Mint，如果你是虚拟机的话选这个无所谓，但是如果你是物理机的话就要慎重了,无论安装成功或失败你的原有数据都会丢失。
下面两个勾不用理会，因为大部分人都不会选择第一个单选框，所以这两个勾毫无意义了。本篇博客也将选择 “其他选项” 。 那么我们选择下面那个 “其他选项” 。
选择其他选项后，就会进入这个页面，这里就是建立分区表的地方（废话，下面都写着呢，还用你说）了。
那么，因为教程演示是虚拟机，所以点击新建分区表，如果是物理机则不需要了。
这时候会弹出一个提示，这个也不必理会它，直接点继续即可。
接下来一个空的分区表就建立好了。
那么，要怎样分区呢？
我们知道Linux必须分的区有根(/)分区、/boot分区和swap分区，那么该分多少呢?
从/boot说起，这个分区是存放系统启动引导文件的，只需要500MB左右，但别小看了这个小分区，如果没有这个，根分区一旦被写满，系统将无法启动。
SWAP分区：用于给内存交换空间，当内存要爆了的时候系统会把一部分进程转移到SWAP里面，它所需的大小可以是内存大小的一半，也可以与内存大小相等，也可以是内存的两倍，但是太大也不好，如果内存够用的话，swap分太大会浪费不少的硬盘存储空间。
最后是根分区了，这个好理解，就是系统分区，应该将剩下的全都分给它。
那么具体怎么分呢，参考我操作咯</description>
    </item>
    
    <item>
      <title>关于BlackArch的体验报告</title>
      <link>https://weepingdogel.github.io/posts/%E5%85%B3%E4%BA%8Eblackarch%E7%9A%84%E4%BD%93%E9%AA%8C%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sun, 16 Jun 2019 16:33:47 +0800</pubDate>
      
      <guid>https://weepingdogel.github.io/posts/%E5%85%B3%E4%BA%8Eblackarch%E7%9A%84%E4%BD%93%E9%AA%8C%E6%8A%A5%E5%91%8A/</guid>
      <description>今天我尝试装了一下black Arch，花了很长时间，之后发现这个系统并不是很完美。
 优点 首先说说它的优点:
 这玩意集成了几千个软件包，并且都是一些很厉害的工具 其次这玩意很酷，特别是壁纸，配色什么的，我都觉得特别炫酷 以及它安装的便捷性，我一开始以为它比Arch难安装，其实用完才知道这个安装简直比Arch简单十倍，只不过我习惯了Arch那种手动式，这种半自动化却不习惯了  缺点 现在来说说缺点:
 首先ISO实在是太大了，Black Arch官方的live ISO达到了12GB，我idm都下载了很久，而网络安装包和Arch的大小一样，不过我没试过 更可怕的是 blackarch官方镜像的安装最低硬盘需求达到了40GB以上，这使得大部分人缺乏这个安装条件 其次就是它的桌面环境实在太简陋了，而且性能上也特别不好，特别是i3和spectrwm这两个，根本无法操作，fluxbox最炫酷但是习惯太不适合大部分人了，openbox啥都没有，更不好操作，而且不支持中文，弄得我很蛋疼；还有就是依赖太乱了，换别的桌面环境很麻烦，比如我想卸载掉其他的换xfce，结果pacman -Rs卸载不了，得用Rsc才能卸载，结果把lxdm给卸掉了，进不去图形了，后来装上lxdm出现了很大的颜色bug。。。  总结 首先不能否认BlackArch是装逼的好东西，但是我不推荐使用官方的镜像（无论是在线镜像还是离线live）去安装，否则就会有我的下场了，其次就是用户必须有Arch系基础，否则就是个坑。建议先安装Arch，然后导入BlackArch的软件库安装全套工具即可。最后请不要那blackarch与kali、parrot对比，这没有对比性的，工具都差不多的。</description>
    </item>
    
  </channel>
</rss>
